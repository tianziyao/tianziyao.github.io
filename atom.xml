<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iSTian&#39;notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-18T12:51:04.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>iSTian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift - Mirror反射</title>
    <link href="http://yoursite.com/2017/07/18/%10Swift%20-%20Mirror%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2017/07/18/Swift - Mirror反射/</id>
    <published>2017-07-17T18:46:00.000Z</published>
    <updated>2017-07-18T12:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常能听到映射和反射，那么它们代表的含义是什么呢？</p>
<p>映射只是一种概念，通常是用代码方式来表示一个比较复杂的意义。例如访问网站时 404 错误的含义是“找不到当前页”，500错误是“服务器内部错误”。那么我们会把这些错误的原因和一些固定的数字对应起来，这就是一种映射。</p>
<p>体现在程序里，映射用的比较多的地方就是和数据库打交道。我们通常会期望不直接操作数据库而对数据库做出一些改变。那么我们会声明一个类去对应数据库的一张数据表。</p>
<p>例如有一张学生表，有学号和姓名两个字段。我们可以在代码里建一个学生类，下面有学号和姓名两个属性，通过一定的技术可以把这个类和那张学生表对应起来，可以实现在操作这个类的时候，却去改变那张表的数据的效果，我们可以称这是一种映射。</p>
<p>熟悉 C#、Java 的朋友应该不难理解反射的，反射是一种技术，很多高级语言都有这种技术。具体作用就是通过一个独立存在的对象，可以找到该对象的其他信息。</p>
<p>例如该对象是由哪个类实例化而成的，例如有一条狗和一个人，我们通过反射技术，可以得知狗是犬科，人是灵长目的。犬科和灵长目就是我们通过反射所得到的信息，这两个词语不是一个层面的东西。</p>
<p><strong>用代码来说，映射就是 <code>a -&gt; b</code>，反射就是 <code>a.id</code>、<code>a.func()</code> 等。</strong></p>
<a id="more"></a>
<p>在使用 <code>Objective-C</code> 开发时很少强调其反射概念，因为 <code>Objective-C</code> 的 <code>Runtime</code> 要比其他语言中的反射强大的多。在 <code>Objective-C</code> 中可以很简单的实现字符串和类型的转换 <code>NSClassFromString</code>，实现动态方法调用 <code>performSelector: withObject:</code>，动态赋值 <code>KVC</code> 等等。</p>
<p>这些功能大家已经习以为常，但是在其他语言中要实现这些功能却要跨过较高的门槛，而且有些根本就是无法实现的。不过在 <code>Swift</code> 中并不提倡使用 <code>Runtime</code>，而是像其他语言一样使用反射 <code>Reflect</code>。</p>
<p><code>Swift</code> 的反射机制是基于一个叫 <strong>Mirror</strong> 的 <code>struct</code> 来实现的。你为具体的 <code>subject</code> 创建一个 <code>Mirror</code>，然后就可以通过它查询这个对象 <code>subject</code> 。</p>
<p>在我们创建 <code>Mirror</code> 之前，我们先创建一个可以让我们当做对象来使用的简单数据结构。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> storesToDisk: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookmarkStore</span>: <span class="title">Store</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> itemCount: <span class="type">Int</span> = <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Bookmark</span> </span>&#123;</div><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">Group</span> </span>&#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Tech</span></div><div class="line">      <span class="keyword">case</span> <span class="type">News</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">let</span> store = &#123;</div><div class="line">       <span class="keyword">return</span> <span class="type">BookmarkStore</span>()</div><div class="line">   &#125;()</div><div class="line">   <span class="keyword">let</span> title: <span class="type">String</span>?</div><div class="line">   <span class="keyword">let</span> url: <span class="type">NSURL</span></div><div class="line">   <span class="keyword">let</span> keywords: [<span class="type">String</span>]</div><div class="line">   <span class="keyword">let</span> group: <span class="type">Group</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> aBookmark = <span class="type">Bookmark</span>(title: <span class="string">"Appventure"</span>, url: <span class="type">NSURL</span>(string: <span class="string">"appventure.me"</span>)!, keywords: [<span class="string">"Swift"</span>, <span class="string">"iOS"</span>, <span class="string">"OSX"</span>], group: .<span class="type">Tech</span>)</div></pre></td></tr></table></figure>
<h2 id="创建一个-Mirror"><a href="#创建一个-Mirror" class="headerlink" title="创建一个 Mirror"></a>创建一个 Mirror</h2><p>创建 <code>Mirror</code> 最简单的方式就是使用 <code>reflecting</code> 构造器：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(reflecting subject: <span class="type">Any</span>)</div></pre></td></tr></table></figure>
<p>然后在 <code>aBookmark</code> <code>struct</code> 上使用它：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aMirror = <span class="type">Mirror</span>(reflecting: aBookmark)</div><div class="line"><span class="built_in">print</span>(aMirror)</div><div class="line"><span class="comment">// 输出 : Mirror for Bookmark</span></div></pre></td></tr></table></figure>
<p>这段代码创建了 <code>Bookmark</code> 的 <code>Mirror</code>。正如你所见，对象的类型是 <code>Any</code>。这是 <code>Swift</code> 中最通用的类型。<code>Swift</code> 中的任何东西至少都是 <code>Any</code> 类型的。这样一来 <code>mirror</code> 就可以兼容 <code>struct</code>, <code>class</code>, <code>enum</code>, <code>Tuple</code>, <code>Array</code>, <code>Dictionary</code>, <code>set</code> 等。</p>
<p><code>Mirror</code> 结构体还有另外三个构造器，然而这三个都是在你需要自定义 <code>mirror</code> 这种情况下使用的。我们会在接下来讨论自定义 <code>mirror</code> 时详细讲解这些额外的构造器。</p>
<h2 id="Mirror-中都有什么？"><a href="#Mirror-中都有什么？" class="headerlink" title="Mirror 中都有什么？"></a>Mirror 中都有什么？</h2><p><code>Mirror struct</code> 中包含几个 <code>types</code> 来帮助确定你想查询的信息。</p>
<p>第一个是 <code>DisplayStyle</code> <code>enum</code>，它会告诉你对象的类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DisplayStyle</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Struct</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Class</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Enum</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Tuple</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Optional</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Collection</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Dictionary</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是反射 API 的辅助类型。正如之前我们知道的，反射只要求对象是 <code>Any</code> 类型，而且 <code>Swift</code> 标准库中还有很多类型为 <code>Any</code> 的东西没有被列举在上面的 <code>DisplayStyle</code> <code>enum</code> 中。如果试图反射它们中间的某一个又会发生什么呢？比如 <code>closure</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> closure = &#123; (a: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> a * <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">let</span> aMirror = <span class="type">Mirror</span>(reflecting: closure)</div></pre></td></tr></table></figure>
<p>在这种情况下，这里你会得到一个 <code>mirror</code>，但是 <code>DisplayStyle</code> 为 <code>nil</code>。</p>
<p>也有提供给 <code>Mirror</code> 的子节点使用的 <code>typealias</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Child</span> = (label: <span class="type">String</span>?, value: <span class="type">Any</span>)</div></pre></td></tr></table></figure>
<p>所以每个 <code>Child</code> 都包含一个可选的 <code>label</code> 和 <code>Any</code> 类型的 <code>value</code>。为什么 <code>label</code> 是 <code>Optional</code> 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 <code>struct</code> 会以属性的名字做为 <code>label</code>，但是 <code>Collection</code> 只有下标，没有名字。<code>Tuple</code> 同样也可能没有给它们的条目指定名字。</p>
<p>接下来是 <code>AncestorRepresentation</code> <code>enum</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AncestorRepresentation</span> </span>&#123;</div><div class="line">    <span class="comment">/// 为所有 ancestor class 生成默认 mirror。</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Generated</span></div><div class="line">    <span class="comment">/// 使用最近的 ancestor 的 customMirror() 实现来给它创建一个 mirror。    </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Customized</span>(() -&gt; <span class="type">Mirror</span>)</div><div class="line">    <span class="comment">/// 禁用所有 ancestor class 的行为。Mirror 的 superclassMirror() 返回值为 nil。</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Suppressed</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 <code>enum</code> 用来定义被反射的对象的父类应该如何被反射。也就是说，这只应用于 <code>class</code> 类型的对象。默认情况下 <code>Swift</code> 会为每个父类生成额外的 <code>mirror</code>。然而，如果你需要做更复杂的操作，你可以使用 <code>AncestorRepresentation enum</code> 来定义父类被反射的细节。</p>
<h2 id="如何使用一个-Mirror"><a href="#如何使用一个-Mirror" class="headerlink" title="如何使用一个 Mirror"></a>如何使用一个 Mirror</h2><p>现在我们有了给 <code>Bookmark</code> 类型的对象 <code>aBookmark</code> 做反射的实例变量 <code>aMirror</code>。可以用它来做什么呢？</p>
<p>下面列举了 <code>Mirror</code> 可用的属性 / 方法：</p>
<ul>
<li><code>let children: Children</code>：对象的子节点。</li>
<li><code>displayStyle: Mirror.DisplayStyle?</code>：对象的展示风格</li>
<li><code>let subjectType: Any.Type</code>：对象的类型</li>
<li><code>func superclassMirror() -&gt; Mirror?</code>：对象父类的 <code>mirror</code></li>
</ul>
<p>下面我们会分别对它们进行解析。</p>
<h3 id="DisplayStyle"><a href="#DisplayStyle" class="headerlink" title="DisplayStyle"></a>DisplayStyle</h3><p>很简单，它会返回 <code>DisplayStyle</code> <code>enum</code> 的其中一种情况。如果你想要对某种不支持的类型进行反射，你会得到一个空的 <code>Optional</code> 值（这个之前解释过）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> (aMirror.displayStyle)</div><div class="line"><span class="comment">// 此处输出：Optional(Struct)</span></div></pre></td></tr></table></figure>
<h3 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h3><p>这会返回一个包含了对象所有的子节点的 <code>AnyForwardCollection&lt;Child&gt;</code>。这些子节点不单单限于 <code>Array</code> 或者 <code>Dictionary</code> 中的条目。诸如 <code>struct</code> 或者 <code>class</code> 中所有的属性也是由 <code>AnyForwardCollection&lt;Child&gt;</code> 这个属性返回的子节点。<code>AnyForwardCollection</code> 协议意味着这是一个支持遍历的 <code>Collection</code> 类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, value) <span class="keyword">in</span> aMirror.children &#123;</div><div class="line">    <span class="built_in">print</span> (label, value)</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="comment">//: store main.BookmarkStore</span></div><div class="line"><span class="comment">//: title Optional("Appventure")</span></div><div class="line"><span class="comment">//: url appventure.me</span></div><div class="line"><span class="comment">//: keywords ["Swift", "iOS", "OSX"]</span></div><div class="line"><span class="comment">//: group Tech</span></div></pre></td></tr></table></figure>
<h3 id="SubjectType"><a href="#SubjectType" class="headerlink" title="SubjectType"></a>SubjectType</h3><p>这是对象的类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(aMirror.subjectType)</div><div class="line"><span class="comment">//输出 : Bookmark</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="number">5</span>).subjectType)</div><div class="line"><span class="comment">//输出 : Int</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="string">"test"</span>).subjectType)</div><div class="line"><span class="comment">//输出 : String</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="type">NSNull</span>()).subjectType)</div><div class="line"><span class="comment">//输出 : NSNull</span></div></pre></td></tr></table></figure>
<p>然而，<code>Swift</code> 的文档中有下面一句话：</p>
<blockquote>
<p>“当 <code>self</code> 是另外一个 <code>mirror</code> 的 <code>superclassMirror()</code> 时，这个类型和对象的动态类型可能会不一样。”</p>
</blockquote>
<h3 id="SuperclassMirror"><a href="#SuperclassMirror" class="headerlink" title="SuperclassMirror"></a>SuperclassMirror</h3><p>这是我们对象父类的 <code>mirror</code>。如果这个对象不是一个类，它会是一个空的 <code>Optional</code> 值。如果对象的类型是基于类的，你会得到一个新的 <code>Mirror</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 试试 struct</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: aBookmark).superclassMirror())</div><div class="line"><span class="comment">// 输出: nil</span></div><div class="line"><span class="comment">// 试试 class</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: aBookmark.store).superclassMirror())</div><div class="line"><span class="comment">// 输出: Optional(Mirror for Store)</span></div></pre></td></tr></table></figure>
<h2 id="Struct-转-Core-Data"><a href="#Struct-转-Core-Data" class="headerlink" title="Struct 转 Core Data"></a>Struct 转 Core Data</h2><p>假设我们在一个叫 <strong>Books Bunny</strong> 的新兴高科技公司工作，我们以浏览器插件的方式提供了一个人工智能，它可以自动分析用户访问的所有网站，然后把相关页面自动保存到书签中。</p>
<p>现在 <code>Swift</code> 已经开源，所以我们的后台服务端肯定是用 <code>Swift</code> 编写。因为在我们的系统中同时有数以百万计的网站访问活动，我们想用 <code>struct</code> 来存储用户访问网站的分析数据。不过，如果我们 AI 认定某个页面的数据是需要保存到书签中的话，我们需要使用 <code>CoreData</code> 来把这个类型的对象保存到数据库中。</p>
<p>现在我们不想为每个新建的 <code>struct</code> 单独写自定义的 <code>Core Data</code> 序列化代码。而是想以一种更优雅的方式来开发，从而可以让将来的所有 <code>struct</code> 都可以利用这种方式来做序列化。</p>
<p>那么我们该怎么做呢？</p>
<h3 id="一个协议"><a href="#一个协议" class="headerlink" title="一个协议"></a>一个协议</h3><p>记住，我们有一个 <code>struct</code>，它需要自动转换为 <code>NSManagedObject</code> （<strong>Core Data</strong>）。</p>
<p>如果我们想要支持不同的 <code>struct</code> 甚至类型，我们可以用协议来实现，然后确保我们需要的类型符合这个协议。所以我们假想的协议应该有哪些功能呢？</p>
<ul>
<li>第一，协议应该允许自定义我们想要创建的 <strong>Core Data 实体</strong>的名字</li>
<li>第二，协议需要提供一种方式来告诉它如何转换为 <code>NSManagedObject</code>。</li>
</ul>
<p>我们的 <code>protocol</code>（协议） 看起来是下面这个样子的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="comment">// 我们 Core Data 实体的名字</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">EntityName</span>: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="comment">// 返回包含我们属性集的 NSManagedObject</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>toCoreData</code> 方法使用了 Swift 2.0 新的异常处理来抛出错误，如果转换失败，会有几种错误情况，这些情况都在下面的 <code>ErrorTypeenum</code> 进行了列举：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SerializationError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">    <span class="comment">// 我们只支持 struct</span></div><div class="line">    <span class="keyword">case</span> <span class="type">StructRequired</span></div><div class="line">    <span class="comment">// 实体在 Core Data 模型中不存在</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnknownEntity</span>(name: <span class="type">String</span>)</div><div class="line">    <span class="comment">// 给定的类型不能保存在 core data 中</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnsupportedSubType</span>(label: <span class="type">String</span>?)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面列举了三种转换时需要注意的错误情况。第一种情况是我们试图把它应用到非 <code>struct</code> 的对象上。第二种情况是我们想要创建的 <code>entity</code> 在 Core Data 模型中不存在。第三种情况是我们想要把一些不能存储在 Core Data 中的东西保存到 Core Data 中（即 <code>enum</code>）。</p>
<p>让我们创建一个 <code>struct</code> 然后为其增加协议一致性：</p>
<h3 id="Bookmark-struct"><a href="#Bookmark-struct" class="headerlink" title="Bookmark struct"></a>Bookmark struct</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bookmark</span> </span>&#123;</div><div class="line">   <span class="keyword">let</span> title: <span class="type">String</span></div><div class="line">   <span class="keyword">let</span> url: <span class="type">NSURL</span></div><div class="line">   <span class="keyword">let</span> pagerank: <span class="type">Int</span></div><div class="line">   <span class="keyword">let</span> created: <span class="type">NSDate</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们要实现 <code>toCoreData</code> 方法。</p>
<h3 id="协议扩展"><a href="#协议扩展" class="headerlink" title="协议扩展"></a>协议扩展</h3><p>当然我们可以为每个 <code>struct</code> 都写新的 <code>toCoreData</code> 方法，但是工作量很大，因为 <code>struct</code> 不支持继承，所以我们不能使用基类的方式。不过我们可以使用 <code>protocol extension</code> 来扩展这个方法到所有相符合的 <code>struct</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为扩展已经被应用到相符合的 <code>struct</code>，这个方法就可以在 <code>struct</code> 的上下文中被调用。因此，在协议中，<code>self</code> 指的是我们想分析的 <code>struct</code>。</p>
<p>所以，我们需要做的第一步就是创建一个可以写入我们 <code>Bookmark struct</code> 值的<code>NSManagedObject</code>。我们该怎么做呢？</p>
<h3 id="一点-Core-Data"><a href="#一点-Core-Data" class="headerlink" title="一点 Core Data"></a>一点 Core Data</h3><p><code>Core Data</code> 有点啰嗦，所以如果需要创建一个对象，我们需要如下的步骤：</p>
<ol>
<li>获得我们需要创建的实体的名字（字符串）</li>
<li>获取 <code>NSManagedObjectContext</code>，然后为我们的实体创建 <code>NSEntityDescription</code></li>
<li>利用这些信息创建 <code>NSManagedObject</code>。</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 Core Data 实体的名字</span></div><div class="line"><span class="keyword">let</span> entityName = <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.<span class="type">EntityName</span></div><div class="line"></div><div class="line"><span class="comment">// 创建实体描述</span></div><div class="line"><span class="comment">// 实体可能不存在, 所以我们使用 'guard let' 来判断，如果实体</span></div><div class="line"><span class="comment">// 在我们的 core data 模型中不存在的话，我们就抛出错误</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> desc = <span class="type">NSEntityDescription</span>.entityForName(entityName, inManagedObjectContext: context)</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">UnknownEntity</span>(name: entityName) &#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建 NSManagedObject</span></div><div class="line"><span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(entity: desc, insertIntoManagedObjectContext: context)</div></pre></td></tr></table></figure>
<h3 id="实现反射"><a href="#实现反射" class="headerlink" title="实现反射"></a>实现反射</h3><p>下一步，我们想使用反射 API 来读取 <code>bookmark</code> 对象的属性然后把它写入到 <code>NSManagedObject</code> 实例中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 Mirror</span></div><div class="line"><span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="comment">// 确保我们是在分析一个 struct</span></div><div class="line"><span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span> <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div></pre></td></tr></table></figure>
<p>我们通过测试 <code>displayStyle</code> 属性的方式来确保这是一个 <code>struct</code>。</p>
<p>所以现在我们有了一个可以让我们读取属性的 <code>Mirror</code>，也有了一个可以用来设置属性的 <code>NSManagedObject</code>。因为 <code>mirror</code> 提供了读取所有 <code>children</code> 的方式，所以我们可以遍历它们并保存它们的值。方式如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, value) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">    managedObject.setValue(value, forKey: label)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>太棒了！但是，如果我们试图编译它，它会失败。原因是 <code>setValueForKey</code> 需要一个 <code>AnyObject?</code> 类型的对象，而我们的 <code>children</code> 属性只返回一个 <code>(String?, Any)</code> 类型的 <code>tuple</code>。也就是说 <code>value</code> 是 <code>Any</code> 类型但是我们需要 <code>AnyObject</code> 类型的。为了解决这个问题，我们要测试 <code>value</code> 的 <code>AnyObject</code> 协议一致性。这也意味着如果得到的属性的类型不符合 <code>AnyObject</code> 协议（比如 <code>enum</code>)，我们就可以抛出一个错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span></div><div class="line">  <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> value = anyValue <span class="keyword">as</span>? <span class="type">AnyObject</span> &#123;</div><div class="line">    	managedObject.setValue(value, forKey: label)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">UnsupportedSubType</span>(label: label)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，只有在 <code>child</code> 是 <code>AnyObject</code> 类型的时候我们才会调用 <code>setValueForKey</code> 方法。</p>
<p>然后唯一剩下的事情就是返回 <code>NSManagedObject</code>。完整的代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</div><div class="line">	<span class="keyword">let</span> entityName = <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.<span class="type">EntityName</span></div><div class="line"></div><div class="line">	<span class="comment">// 创建实体描述</span></div><div class="line">	<span class="keyword">guard</span> <span class="keyword">let</span> desc = <span class="type">NSEntityDescription</span>.entityForName(entityName, inManagedObjectContext: context)</div><div class="line">	    <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">UnknownEntity</span>(name: entityName) &#125; <span class="comment">// [译者注] UnknownEntity 为 SerializationError.UnknownEntity</span></div><div class="line"></div><div class="line">	<span class="comment">// 创建 NSManagedObject</span></div><div class="line">	<span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(entity: desc, insertIntoManagedObjectContext: context)</div><div class="line"></div><div class="line">	<span class="comment">// 创建一个 Mirror</span></div><div class="line">	<span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 确保我们是在分析一个 struct</span></div><div class="line">	<span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span> <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">	    <span class="keyword">if</span> <span class="keyword">let</span> value = anyValue <span class="keyword">as</span>? <span class="type">AnyObject</span> &#123;</div><div class="line">		managedObject.setValue(child, forKey: label) <span class="comment">// [译者注] 正确代码为：managedObject.setValue(value, forKey: label)</span></div><div class="line">	    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">UnsupportedSubType</span>(label: label)</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> managedObject</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>搞定，我们现在已经把 <code>struct</code> 转换为 <code>NSManagedObject</code> 了。</p>
<h2 id="Class-转-Dictionary"><a href="#Class-转-Dictionary" class="headerlink" title="Class 转 Dictionary"></a>Class 转 Dictionary</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义用户类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span>  <span class="comment">//姓名</span></div><div class="line">    <span class="keyword">var</span> nickname:<span class="type">String</span>?  <span class="comment">//昵称</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span>?   <span class="comment">//年龄</span></div><div class="line">    <span class="keyword">var</span> emails:[<span class="type">String</span>]?  <span class="comment">//邮件地址</span></div><div class="line">    <span class="keyword">var</span> tels:[<span class="type">Telephone</span>]? <span class="comment">//电话</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//电话结构体</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Telephone</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> title:<span class="type">String</span>  <span class="comment">//电话标题</span></div><div class="line">    <span class="keyword">var</span> number:<span class="type">String</span>  <span class="comment">//电话号码</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//自定义一个JSON协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>?</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展协议方法，实现一个通用的toJSONModel方法（反射实现）</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="comment">//将模型数据转成可用的字典数据，Any表示任何类型，除了方法类型</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>? &#123;</div><div class="line">        <span class="comment">//根据实例创建反射结构体Mirror</span></div><div class="line">        <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line">        <span class="keyword">if</span> mirror.children.<span class="built_in">count</span> &gt; <span class="number">0</span>  &#123;</div><div class="line">            <span class="comment">//创建一个空字典，用于后面添加键值对</span></div><div class="line">            <span class="keyword">var</span> result: [<span class="type">String</span>:<span class="type">Any</span>] = [:]</div><div class="line">            <span class="comment">//遍历实例的所有属性集合</span></div><div class="line">            <span class="keyword">for</span> children <span class="keyword">in</span> mirror.children &#123;</div><div class="line">                <span class="keyword">let</span> propertyNameString = children.label!</div><div class="line">                <span class="keyword">let</span> value = children.value</div><div class="line">                <span class="comment">//判断value的类型是否遵循JSON协议，进行深度递归调用</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> jsonValue = value <span class="keyword">as</span>? <span class="type">JSON</span> &#123;</div><div class="line">                    result[propertyNameString] = jsonValue.toJSONModel()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展可选类型，使其遵循JSON协议，可选类型值为nil时，不转化进字典中</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span>: <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="comment">//可选类型重写toJSONModel()方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>? &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">self</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = x <span class="keyword">as</span>? <span class="type">JSON</span> &#123;</div><div class="line">                <span class="keyword">return</span> value.toJSONModel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展两个自定义类型，使其遵循JSON协议</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">User</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Telephone</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="comment">//扩展Swift的基本数据类型，使其遵循JSON协议</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个User实例对象模型</span></div><div class="line"><span class="keyword">let</span> user1 = <span class="type">User</span>()</div><div class="line">user1.name = <span class="string">"hangge"</span></div><div class="line">user1.age = <span class="number">100</span></div><div class="line">user1.emails = [<span class="string">"hangge@hangge.com"</span>,<span class="string">"system@hangge.com"</span>]</div><div class="line"><span class="comment">//添加电话</span></div><div class="line"><span class="keyword">let</span> tel1 = <span class="type">Telephone</span>(title: <span class="string">"手机"</span>, number: <span class="string">"123456"</span>)</div><div class="line"><span class="keyword">let</span> tel2 = <span class="type">Telephone</span>(title: <span class="string">"公司座机"</span>, number: <span class="string">"001-0358"</span>)</div><div class="line">user1.tels = [tel1, tel2]</div><div class="line"><span class="comment">//模型转字典</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> model = user1.toJSONModel() &#123;</div><div class="line">    <span class="built_in">print</span>(model)</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 打印：【以下打印经过排版，正式的打印是紧凑的】</span></div><div class="line">[</div><div class="line">"tels": [</div><div class="line">    "[1]": [</div><div class="line">        "title": "公司座机",</div><div class="line">        "number": "001-0358"</div><div class="line">    ],</div><div class="line">    "[0]": [</div><div class="line">        "title": "手机",</div><div class="line">        "number": "123456"</div><div class="line">    ]</div><div class="line">],</div><div class="line">"name": "hangge",</div><div class="line">"emails": [</div><div class="line">    "[1]": "system@hangge.com",</div><div class="line">    "[0]": "hangge@hangge.com"</div><div class="line">],</div><div class="line">"age": 100</div><div class="line">]</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="自定义-Mirror"><a href="#自定义-Mirror" class="headerlink" title="自定义 Mirror"></a>自定义 Mirror</h2><p>我们之前已经讨论过，创建 <code>Mirror</code> 还有其他的选项。这些选项是非常有用的，比如，你想自己定义 <code>mirror</code> 中<strong>对象</strong>的哪些部分是可访问的。对于这种情况 <code>Mirror Struct</code> 提供了其他的构造器。</p>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>第一个特殊 <code>init</code> 是为 <code>Collection</code> 量身定做的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>, <span class="type">C</span> : <span class="type">CollectionType</span> <span class="keyword">where</span> <span class="type">C</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Child</span>&gt;</div><div class="line">  (<span class="number">_</span> subject: <span class="type">T</span>, children: <span class="type">C</span>,</div><div class="line">   displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>? = <span class="keyword">default</span>,</div><div class="line">   ancestorRepresentation: <span class="type">Mirror</span>.<span class="type">AncestorRepresentation</span> = <span class="keyword">default</span>)</div></pre></td></tr></table></figure>
<p>与之前的 <code>init(reflecting:)</code> 相比，这个构造器允许我们定义更多反射处理的细节。</p>
<ul>
<li>它只对 <code>Collection</code> 有效</li>
<li>我们可以设定被反射的对象<strong>以及</strong>对象的 <code>children</code> （<code>Collection</code> 的内容）</li>
</ul>
<h3 id="Class-或者-Struct"><a href="#Class-或者-Struct" class="headerlink" title="Class 或者 Struct"></a>Class 或者 Struct</h3><p>第二个可以在 <code>class</code> 或者 <code>struct</code> 上使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>&gt;(<span class="number">_</span> subject: <span class="type">T</span>,</div><div class="line">  children: <span class="type">DictionaryLiteral</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;,</div><div class="line">  displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>? = <span class="keyword">default</span>,</div><div class="line">  ancestorRepresentation: <span class="type">Mirror</span>.<span class="type">AncestorRepresentation</span> = <span class="keyword">default</span>)</div></pre></td></tr></table></figure>
<p>有意思的是，这里是由你指定对象的 <code>children</code> （即属性），指定的方式是通过一个 <code>DictionaryLiteral</code>，它有点像字典，可以直接用作函数参数。如果我们为 <code>Bookmark struct</code> 实现这个构造器，它看起来是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bookmark</span>: <span class="title">CustomReflectable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">customMirror</span><span class="params">()</span></span> -&gt; <span class="type">Mirror</span> &#123; <span class="comment">// [译者注] 此处应该为 public func customMirror() -&gt; Mirror &#123;</span></div><div class="line">	<span class="keyword">let</span> children = <span class="type">DictionaryLiteral</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;(dictionaryLiteral:</div><div class="line">	(<span class="string">"title"</span>, <span class="keyword">self</span>.title), (<span class="string">"pagerank"</span>, <span class="keyword">self</span>.pagerank),</div><div class="line">	(<span class="string">"url"</span>, <span class="keyword">self</span>.url), (<span class="string">"created"</span>, <span class="keyword">self</span>.created),</div><div class="line">	(<span class="string">"keywords"</span>, <span class="keyword">self</span>.keywords), (<span class="string">"group"</span>, <span class="keyword">self</span>.group))</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="type">Mirror</span>.<span class="keyword">init</span>(<span class="type">Bookmark</span>.<span class="keyword">self</span>, children: children,</div><div class="line">	    displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>.<span class="type">Struct</span>,</div><div class="line">	    ancestorRepresentation:.<span class="type">Suppressed</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>所以留下来让我们思考的问题是什么呢？好的反射用例又是什么呢？很显然，如果你在很多 <code>NSManagedObject</code> 上使用反射，它会大大降低你代码的性能。同时如果只有一个或者两个 <code>struct</code>，根据自己掌握的<code>struct</code> 领域的知识编写一个序列化的方法会更容易，更高性能且更不容易让人困惑。</p>
<p>而本文展示反射技巧可以当你在有很多复杂的 <code>struct</code> ，且偶尔想对它们中的一部分进行存储时使用。</p>
<p>例子如下：</p>
<ul>
<li>设置收藏夹</li>
<li>收藏书签</li>
<li>加星</li>
<li>记住上一次选择</li>
<li>在重新启动时存储 AST 打开的项目</li>
<li>在特殊处理时做临时存储</li>
</ul>
<p>当然除此之外，反射当然还有其他的使用场景：</p>
<ul>
<li>遍历 <code>tuples</code></li>
<li>对类做分析</li>
<li>运行时分析对象的一致性</li>
<li>自动生成详细日志 / 调试信息（即外部生成对象）</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Swift 反射 API 及用法：</p>
<p><a href="http://swift.gg/2015/11/23/swift-reflection-api-what-you-can-do/" target="_blank" rel="external">http://swift.gg/2015/11/23/swift-reflection-api-what-you-can-do/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常能听到映射和反射，那么它们代表的含义是什么呢？&lt;/p&gt;
&lt;p&gt;映射只是一种概念，通常是用代码方式来表示一个比较复杂的意义。例如访问网站时 404 错误的含义是“找不到当前页”，500错误是“服务器内部错误”。那么我们会把这些错误的原因和一些固定的数字对应起来，这就是一种映射。&lt;/p&gt;
&lt;p&gt;体现在程序里，映射用的比较多的地方就是和数据库打交道。我们通常会期望不直接操作数据库而对数据库做出一些改变。那么我们会声明一个类去对应数据库的一张数据表。&lt;/p&gt;
&lt;p&gt;例如有一张学生表，有学号和姓名两个字段。我们可以在代码里建一个学生类，下面有学号和姓名两个属性，通过一定的技术可以把这个类和那张学生表对应起来，可以实现在操作这个类的时候，却去改变那张表的数据的效果，我们可以称这是一种映射。&lt;/p&gt;
&lt;p&gt;熟悉 C#、Java 的朋友应该不难理解反射的，反射是一种技术，很多高级语言都有这种技术。具体作用就是通过一个独立存在的对象，可以找到该对象的其他信息。&lt;/p&gt;
&lt;p&gt;例如该对象是由哪个类实例化而成的，例如有一条狗和一个人，我们通过反射技术，可以得知狗是犬科，人是灵长目的。犬科和灵长目就是我们通过反射所得到的信息，这两个词语不是一个层面的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用代码来说，映射就是 &lt;code&gt;a -&amp;gt; b&lt;/code&gt;，反射就是 &lt;code&gt;a.id&lt;/code&gt;、&lt;code&gt;a.func()&lt;/code&gt; 等。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 定位模型</title>
    <link href="http://yoursite.com/2017/06/25/CSS%20%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/25/CSS 定位模型/</id>
    <published>2017-06-24T17:21:00.000Z</published>
    <updated>2017-07-14T13:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>position</code> 属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。<code>position</code> 属性有以下几种模型：</p>
<ul>
<li>static 自然模型</li>
<li>relative 相对定位模型</li>
<li>absolute 绝对定位模型</li>
<li>fixed 固定定位模型</li>
<li>sticky 磁贴定位模型</li>
</ul>
<p>在学习布局模型之前，我们先来了解几个属性。</p>
<a id="more"></a>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。元素可拥有负的 <code>z-index</code> 属性值。仅能在定位元素，例如 <code>position:absolute</code> 这样的元素上奏效！</p>
<p>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>默认。堆叠顺序与父元素相等。</td>
</tr>
<tr>
<td>number</td>
<td>设置元素的堆叠顺序。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 z-index 属性的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></div><div class="line">    img.x &#123;</div><div class="line">      position: absolute;</div><div class="line">      left: 0px;</div><div class="line">      top: 0px;</div><div class="line">      z-index: -1;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"x"</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/i/eg_mouse.jpg"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>默认的 z-index 是 0。Z-index -1 拥有更低的优先级。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，<code>img</code> 原本应该在 <code>p</code> 元素的上面，但是由于修改了 <code>img</code> 的 <code>z-index</code> 属性，因此 <code>p</code> 显示在了 <code>img</code> 的上面。</p>
<h2 id="static-自然定位"><a href="#static-自然定位" class="headerlink" title="static 自然定位"></a>static 自然定位</h2><p><code>static</code> 的叫法有很多，如静态定位，常规定位，自然定位等。特点如下：</p>
<ol>
<li>使元素定位于<strong>常规/自然流</strong>中，也就是块、行垂直排列下去，行内元素水平从左往右排列；</li>
<li>忽略 <code>top、bottom、left、right</code> 或者 <code>z-index</code> 声明；</li>
<li>两个相邻的元素如果都设置了 <code>margin</code>，那么最终外边距会取两者中最大的；</li>
<li>如果是具有固定的 <code>width、height</code> 属性，如果将左右外边距设置为 <code>auto</code>，则左右外边距会自动扩大占满剩余宽度，最终的效果是这个块水平居中。</li>
</ol>
<h2 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h2><p><code>relative</code> 作用是使元素成为可定位的祖先元素，通俗的讲，就是可以使其他元素以此元素作为参照物设定坐标。<code>relative</code> 有以下几个特点：</p>
<ol>
<li><p>可以使用 <code>top、bottom、right、left、z-index</code> 等属性进行相对定位，这里的相对定位参展的是此元素在自然流中原本的位置；</p>
</li>
<li><p>相对定位的元素不会离开常规流，也就是说使用 <code>top、bottom、right、left、z-index</code> 等属性设定偏移后，自然流中依然保留此元素的位置；</p>
</li>
<li><p>任何元素都可以设置为 <code>relation</code>，它的绝对定位的后代都可以相对于它进行绝对定位，这点在网页广告中应用较多，如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen</span></span></div><div class="line">    .parent &#123;</div><div class="line">      width: 200px;</div><div class="line">      height: 150px;</div><div class="line">      border: 1px solid #000;</div><div class="line">      position: relative;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .child &#123;</div><div class="line">      width: 80px;</div><div class="line">      height: 80px;</div><div class="line">      background-color: blue;</div><div class="line">      position: absolute;</div><div class="line">      right: -80px;</div><div class="line">      top: 0;</div><div class="line">    &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div class="<span class="attr">parent</span>"&gt;<span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以使浮动元素发生偏移，并控制它们的堆叠顺序。这句话怎么理解呢？通常在浮动元素中，我们无法修改元素的偏移，但使用 <code>relation</code> 后，就可以通过 <code>top、bottom、right、left</code> 进行偏移了，同理，也可以通过 <code>z-index</code> 来改变堆叠顺序。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line">    .block &#123;</div><div class="line">      width: 50px;</div><div class="line">      height: 50px;</div><div class="line">      line-height: 50px;</div><div class="line">      text-align: center;</div><div class="line">      border: 1px solid #000;</div><div class="line">      float: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .block:nth-child(2) &#123;</div><div class="line">      /*改变浮动元素的位置*/</div><div class="line">      position: relative;</div><div class="line">      top: 10em;</div><div class="line">      /*margin-top: 10px;*/</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /*改变浮动元素的层级*/</div><div class="line">    .block:nth-child(4) &#123;</div><div class="line">      z-index: 9</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .block:nth-child(5) &#123;</div><div class="line">      position: relative;</div><div class="line">      border: 1px solid red;</div><div class="line">      left: -52px;</div><div class="line">      z-index: 20;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h2><p><code>absolute</code> 生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。位置通过 <code>left、top、right、bottom</code> 属性进行规定，<code>absolute</code> 有以下特性：</p>
<ol>
<li><p>使元素脱离常规流，也就是说自然流中不会再保存此元素的位置，此处需要注意的是，如果使用 <code>%</code> 作为单位进行偏移，这个 <code>%</code> 对比的是最近的祖先元素；</p>
</li>
<li><p>如果有父级元素中有 <code>relative</code> ，那么这个标签就是此元素的祖先元素，如果没有，那么 <code>&lt;body&gt;</code> 就是此元素的祖先元素；</p>
</li>
<li><p><code>right、left、top、bottom</code> 等值如果设置为 <code>0px</code>，它将对齐到最近的祖先元素的各边，这种特性可以用来设定居中对齐，需要注意的是，如果此元素没有设定宽高，实际上和 <code>width: 100%;  height: 100%;</code> 是一个意思；如果设定了宽高，可以使用以下方法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>right、left、top、bottom</code> 等值如果设置为 auto，那么它会回到常规流中；</p>
</li>
</ol>
<h2 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h2><p><code>absolute</code> 和 <code>fixed</code> 都是用于绝对定位，两者不同之处在以下几点：</p>
<ol>
<li><code>absolute</code> 相对于最近的祖先元素进行绝对定位，而 <code>fixed</code> 是相对于浏览器的窗口进行定位，这个特点使得 <code>fixed</code> 适合用于悬浮效果；</li>
<li>固定定位元素不会随着浏览器窗口的滚动而滚动；  </li>
</ol>
<h2 id="sticky-磁贴定位"><a href="#sticky-磁贴定位" class="headerlink" title="sticky 磁贴定位"></a>sticky 磁贴定位</h2><p><code>sticky</code> 也有很多名字，比如磁贴定位、粘性定位、吸附定位等，<code>sticky</code> 只适用于 CSS3 版本。<code>sticky</code> 类似 <code>relative</code> 和 <code>fixed</code> 的结合体，使用 <code>sticky</code> 可以很轻松的做出元素到达浏览器顶部后悬浮的效果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.header</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.nav</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">position</span>: sticky;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    这里是 logo</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">    这里是导航，有分享，收藏，登录，喜欢等等</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>sticky</code> 有以下几个特性：</p>
<ol>
<li><p>如果产生偏移，原位置依然还会在常规流中；</p>
</li>
<li><p>如果它的祖先元素有滚动，那么它的偏移标尺就是最近的祖先元素，这个改怎么理解呢？如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.header</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.nav</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">position</span>: sticky;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.top</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: yellow;</div><div class="line">      <span class="attribute">height</span>: <span class="number">70px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.content</span> &#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">position</span>: relative;</div><div class="line">      <span class="attribute">overflow</span>: scroll;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    这里是 logo</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></div><div class="line">      这里是一些内容</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">      这里是导航，有分享，收藏，登录，喜欢等等</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，<code>sticky</code> 的父级元素是有滚动的，因此它的偏移标尺是父级元素，因此滚动第二层的下拉框，会触发悬浮，滚动第一次则无效果；</p>
</li>
<li><p>如果祖先元素没有滚动，那么它的偏移标尺就是浏览器的窗口；</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;position&lt;/code&gt; 属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。&lt;code&gt;position&lt;/code&gt; 属性有以下几种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 自然模型&lt;/li&gt;
&lt;li&gt;relative 相对定位模型&lt;/li&gt;
&lt;li&gt;absolute 绝对定位模型&lt;/li&gt;
&lt;li&gt;fixed 固定定位模型&lt;/li&gt;
&lt;li&gt;sticky 磁贴定位模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在学习布局模型之前，我们先来了解几个属性。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 浮动</title>
    <link href="http://yoursite.com/2017/06/22/CSS%20%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/06/22/CSS 浮动/</id>
    <published>2017-06-21T17:21:00.000Z</published>
    <updated>2017-07-14T13:44:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>float</code> 属性可以让元素显示在任意的问题，下面是 <code>float</code> 的几个常用值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左浮动</td>
</tr>
<tr>
<td>right</td>
<td>右浮动</td>
</tr>
<tr>
<td>none</td>
<td>无浮动</td>
</tr>
<tr>
<td>inherit</td>
<td>继承浮动</td>
</tr>
</tbody>
</table>
<p><code>float</code> 属性最初被设计出来，是为了解决图片的排版问题，也就是让文字环绕着图片。</p>
<a id="more"></a>
<h2 id="浮动的原因和副作用"><a href="#浮动的原因和副作用" class="headerlink" title="浮动的原因和副作用"></a>浮动的原因和副作用</h2><p>CSS 的定位有 3 种机制：</p>
<ul>
<li>标准流，也叫做普通流；</li>
<li>定位；</li>
<li>浮动；</li>
</ul>
<p>浮动这种方式元素脱离了文档的标准流，但也会影响它周围的元素。浮动的元素不再占有原始的空间，转而占有其他的空间，这会导致父元素无法检测子元素的高度，从而出现父元素塌陷的问题，父元素的塌陷又导致依赖这个父元素布局的元素被浮动元素所遮挡，那么这样的问题如何解决呢？</p>
<h2 id="解决浮动副作用"><a href="#解决浮动副作用" class="headerlink" title="解决浮动副作用"></a>解决浮动副作用</h2><p>我们知道浮动带来的主要问题是父元素的塌陷，这个问题可以通过以下几种方案解决：</p>
<ul>
<li>手动给父元素添加高度；</li>
<li>通过 <code>clear</code> 清除内部和外部浮动；</li>
<li>给父元素添加 <code>overflow</code> 属性并结合 <code>zoom:1</code> 使用；</li>
<li>给父元素添加浮动。</li>
</ul>
<h3 id="手动给父元素添加高度"><a href="#手动给父元素添加高度" class="headerlink" title="手动给父元素添加高度"></a>手动给父元素添加高度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="comment">/*手动设置高度，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上就是通过手动设定父元素高度来解决塌陷，但这种解决方法不是很好，首先我们要确定子元素高度，其次，<strong>如果子元素很多，宽度不够导致子元素换行，父元素的高度就又不够了</strong>。</p>
<h3 id="clear-属性"><a href="#clear-属性" class="headerlink" title="clear 属性"></a>clear 属性</h3><p><code>clear</code> 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为设置了 <code>clear</code> 属性的元素增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，<strong>如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。对于 CSS 的清除浮动 <code>clear</code>，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。</strong><code>clear</code> 属性有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>在左侧不允许浮动元素。</td>
</tr>
<tr>
<td>right</td>
<td>在右侧不允许浮动元素。</td>
</tr>
<tr>
<td>both</td>
<td>在左右两侧均不允许浮动元素。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。允许浮动元素出现在两侧。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 clear 属性的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.div1</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">float</span>: right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.div2</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">120px</span>;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="comment">/*使用 clear 属性，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="overflow-和-zoom"><a href="#overflow-和-zoom" class="headerlink" title="overflow 和 zoom"></a>overflow 和 zoom</h2><p><code>overflow</code> 属性规定当内容溢出元素框时发生的事情。这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。这个属性有以下几个常用的值：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">visible</span>:默认值。内容不会被修剪，会呈现在元素框之外。</div><div class="line"></div><div class="line"><span class="selector-tag">hidden</span>:内容会被修剪，并且其余内容是不可见的。</div><div class="line"></div><div class="line"><span class="selector-tag">scroll</span>:内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</div><div class="line"></div><div class="line"><span class="selector-tag">auto</span>:如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</div><div class="line"></div><div class="line"><span class="selector-tag">inherit</span>:规定应该从父元素继承 <span class="selector-tag">overflow</span> 属性的值。</div></pre></td></tr></table></figure>
<p><code>zoom</code> 则是 IE 浏览器专用的一个属性。它可以根据子元素的总体高度来放大缩小父元素的高度。这种方法同样不是很完美，如果子元素宽度超过父元素，<code>overflow</code> 属性会导致子元素的部分内容不可见。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="comment">/*使用 overflow 和 zoom 属性，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">overflow</span>: hidden;</div><div class="line">      <span class="attribute">zoom</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="给父元素添加浮动"><a href="#给父元素添加浮动" class="headerlink" title="给父元素添加浮动"></a>给父元素添加浮动</h3><p>给父元素添加 <code>float</code> 属性后，父元素和子元素相当于在同一个流里，所以自然子元素会撑开父元素，因此父元素就不再塌陷，但是这会导致父元素的兄弟元素收到影响，那么如何解决呢？我们可以给父元素的兄弟元素添加 <code>clear</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.bro</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bro"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;float&lt;/code&gt; 属性可以让元素显示在任意的问题，下面是 &lt;code&gt;float&lt;/code&gt; 的几个常用值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;left&lt;/td&gt;
&lt;td&gt;左浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;right&lt;/td&gt;
&lt;td&gt;右浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherit&lt;/td&gt;
&lt;td&gt;继承浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; 属性最初被设计出来，是为了解决图片的排版问题，也就是让文字环绕着图片。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 盒子模型</title>
    <link href="http://yoursite.com/2017/06/15/CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/15/CSS 盒子模型/</id>
    <published>2017-06-14T17:21:00.000Z</published>
    <updated>2017-07-14T13:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在网页中，元素可以视作可以产生矩形的框，这些框会影响元素之间的距离，元素内容的距离等。盒子模型的概念是将网页视作一个个盒子，每个盒子用来放网页中的各种元素。比如图片，文字等元素，都可以视为盒子，这些盒子可以用更大的盒子 <code>&lt;div&gt;</code> 进行嵌套。将这些盒子进行嵌套，叠加，排列，最后就成为了网页。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="盒子模型"></p>
<a id="more"></a>
<h2 id="width"><a href="#width" class="headerlink" title="width"></a>width</h2><p>如上图所示，<code>height</code> 和 <code>width</code> 是指元素本身的宽和高，宽度的值可以是数值和百分比以及 <code>auto</code>，与宽度有关的还有以下两个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>min-width</td>
<td>最大宽度</td>
</tr>
<tr>
<td>max-width</td>
<td>最小宽度</td>
</tr>
</tbody>
</table>
<p>最小和最大宽度，主要是为了防止页面变形，比如一个页面的宽度设置为百分比，这时此页面的宽度会根据浏览器的宽度而定，但如果浏览器的宽度过小，页面就会变形。</p>
<p>例如百分比设置的页面，浏览器窗口宽度被缩小成 <code>100px</code> 宽度，如果设定了 <code>min-width:780px</code>，那么网页会正常显示，只不过有一部分看不到。同理，<code>max-width</code> 也是如此，现在大多显示都是宽屏的，如果不想页面铺满全屏或各模块的间隔过大，就可以通过最大宽度进行限制。</p>
<h2 id="height"><a href="#height" class="headerlink" title="height"></a>height</h2><p><code>height</code> 和 <code>width</code> 的值时一样的，而且同样有两个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>min-height</td>
<td>最大高度</td>
</tr>
<tr>
<td>max-height</td>
<td>最小高度</td>
</tr>
</tbody>
</table>
<p>我们有时设置一个对象盒子时候避免对象没有内容时候不能撑开，但内容多少不能确定所以又不能固定高度，这个时候我们就会需要设置 <code>min-height</code> 最小高度撑高对象盒子。当内容少时候最小高度能将内容显示出，如果内容多余最小高度能装下时候，对象也会再随内容增多而增高。</p>
<p><code>max-height</code> 此属性很少使用，可能是为了避免内容太多将高度撑太高影响布局美化统一，这个时候我们设置最大高度限制。比如一个 <code>table tr td</code> 表格对象里装一个图片，而图片高度不确定，如果太高了不想图片撑破 <code>tr td</code> 表格，这个时候通过 <code>max-height</code> 限制图片最大高度是有必要的。</p>
<p><strong>需要注意的是，如果 <code>max</code> 小于 <code>min</code> 时，元素会优先使用 <code>min-height</code>，宽度也是如此。 </strong></p>
<h2 id="支持-height-和-width-的元素"><a href="#支持-height-和-width-的元素" class="headerlink" title="支持 height 和 width 的元素"></a>支持 height 和 width 的元素</h2><p>块级元素支持 <code>height</code> 和 <code>width</code> 属性，而行内元素不支持。此外，替换元素也支持 <code>height</code> 和 <code>width</code> 属性，那么是替换元素呢？</p>
<h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。</p>
<p>比如：<code>&lt;input /&gt; type=&quot;text&quot;</code> 时，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样。</p>
<p>HTML中的 <code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code> 都是替换元素，这些元素都没有实际的内容。</p>
<h3 id="非替换元素"><a href="#非替换元素" class="headerlink" title="非替换元素"></a>非替换元素</h3><p>HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;wanmei.com&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>浏览器将把这段内容直接显示出来。</p>
<h2 id="boder"><a href="#boder" class="headerlink" title="boder"></a>boder</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boder-width</td>
<td>边框宽度</td>
</tr>
<tr>
<td>boder-color</td>
<td>边框颜色</td>
</tr>
<tr>
<td>boder-style</td>
<td>边框样式</td>
</tr>
</tbody>
</table>
<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p><code>padding</code> 属性是指元素内容到元素边框的距离。<code>padding</code> 可以通过四个方向表示对应的内边距：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>padding-left</td>
<td>左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td>右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td>顶内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td>底内边距</td>
</tr>
</tbody>
</table>
<p>它们的值可以是长度值和百分比，但不能是负值。盒子在网页中所占用的空间，不单与 <code>height</code> 和 <code>width</code> 属性有关，还与 <code>padding</code> 属性有关。</p>
<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p><code>margin</code> 属性用于设定元素与元素之间的距离，即外边距，<code>margin</code> 同样有四个方向：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>margin-left</td>
<td>左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td>右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td>顶外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td>底外边距</td>
</tr>
</tbody>
</table>
<p>与 <code>padding</code> 不同的是，<code>margin</code> 的值可以是负数。默认情况下，下面这些元素是存在外边距的，为了不受默认边距的影响，我们经常会去掉他们的边距：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>margin</code> 还有一个特殊的值 <code>auto</code>，这个值会使元素在父元素中水平居中。</p>
<p><strong>需要注意的是，两个元素之间的外边距，不会相加，而是取其中较大的一个，作为彼此的间距。</strong></p>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p><code>display</code> 属性用于设置元素是内联元素还是块级元素，它有以下两个值：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">inline</span>:元素将显示为内联元素，元素前后没有换行</div><div class="line"></div><div class="line"><span class="selector-tag">block</span>:元素将显示为块级元素，元素前后会带有换行</div><div class="line"></div><div class="line"><span class="selector-tag">inline-block</span>:行内块元素，元素呈现为 <span class="selector-tag">inline</span>，但具有 <span class="selector-tag">block</span> 相应的特性</div><div class="line"></div><div class="line"><span class="selector-tag">none</span>:元素不会被显示</div></pre></td></tr></table></figure>
<p>需要注意的是，内联元素和使用 <code>display: inline</code> 设定为内联的元素，<code>width</code> 和 <code>height</code> 无效，水平方向的 <code>margin</code> 和 <code>padding</code> 有效，垂直无效。</p>
<p>块级元素和行内块元素，垂直和水平的 <code>margin</code> 和 <code>padding</code> 均有效。</p>
<h2 id="CSS-交互效果"><a href="#CSS-交互效果" class="headerlink" title="CSS 交互效果"></a>CSS 交互效果</h2><p>之前我们已经了解过，当鼠标移过时可以通过 <code>:hover</code> 伪类捕捉事件并修改元素，那么一个元素的事件如何修改另一个元素呢？如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>display属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">ul</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">li</span> &#123;</div><div class="line">      <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span> &#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">      <span class="attribute">display</span>: inline;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>家电<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>冰箱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>空调<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，<code>li</code> 标签默认隐藏，当鼠标移动到 <code>ul</code> 上面时，<code>li</code> 标签会以行内元素显示。</p>
<p><strong>需要注意的是，这种事件只能修改自己的子元素，兄弟元素和父级元素无法通过这种方式修改。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网页中，元素可以视作可以产生矩形的框，这些框会影响元素之间的距离，元素内容的距离等。盒子模型的概念是将网页视作一个个盒子，每个盒子用来放网页中的各种元素。比如图片，文字等元素，都可以视为盒子，这些盒子可以用更大的盒子 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 进行嵌套。将这些盒子进行嵌套，叠加，排列，最后就成为了网页。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png&quot; alt=&quot;盒子模型&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 列表样式</title>
    <link href="http://yoursite.com/2017/06/12/CSS%20%E5%88%97%E8%A1%A8%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/06/12/CSS 列表样式/</id>
    <published>2017-06-11T17:21:00.000Z</published>
    <updated>2017-07-14T13:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>list-style-type</code> 用于设定<strong>列表项</strong>的标记样式，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>ul 值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无标记</td>
</tr>
<tr>
<td>disc</td>
<td>默认值，实心圆点</td>
</tr>
<tr>
<td>circle</td>
<td>空心的圆点</td>
</tr>
<tr>
<td>square</td>
<td>实心的方块</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>ol 值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无标记</td>
</tr>
<tr>
<td>decimal</td>
<td>默认，阿拉伯数字</td>
</tr>
<tr>
<td>lower-roman</td>
<td>小写罗马数字</td>
</tr>
<tr>
<td>upper-roman</td>
<td>大写罗马数字</td>
</tr>
<tr>
<td>lower-alpha</td>
<td>小写英文字母</td>
</tr>
<tr>
<td>upper-alpha</td>
<td>大写英文字母</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style media="screen"&gt;</div><div class="line">ul li &#123;</div><div class="line">  list-style-type: none;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>除了默认的几种样式，我们还可以使用图片来设定列表项的标记。</p>
<h2 id="list-style-image"><a href="#list-style-image" class="headerlink" title="list-style-image"></a>list-style-image</h2><p><code>list-style-image</code> 的值可以是 <code>url(...)</code> 和 <code>none</code>。</p>
<h2 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h2><p><code>list-style-position</code> 用以设定列表项标记图片的位置，常用属性有以下几种：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">inside</span>:列表项标记放置在文本以内，且环绕文本根据标记对齐。</div><div class="line"></div><div class="line"><span class="selector-tag">outside</span>:默认值，列表项放置在文本外，且环绕文本不根据标记对齐。</div></pre></td></tr></table></figure>
<p>两者的区别是，<code>inside</code> 标记图片会占用列表项文字的文字，没有宽度限制，且列表项文字如果换行，以标记图片对齐；<code>outside</code> 标记图书使用预留位置，有宽度限制，列表项文字如果换行，以文字对齐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;list-style-type&lt;/code&gt; 用于设定&lt;strong&gt;列表项&lt;/strong&gt;的标记样式，有以下几个常用的值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ul 值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disc&lt;/td&gt;
&lt;td&gt;默认值，实心圆点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;circle&lt;/td&gt;
&lt;td&gt;空心的圆点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;square&lt;/td&gt;
&lt;td&gt;实心的方块&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ol 值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;td&gt;默认，阿拉伯数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower-roman&lt;/td&gt;
&lt;td&gt;小写罗马数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upper-roman&lt;/td&gt;
&lt;td&gt;大写罗马数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower-alpha&lt;/td&gt;
&lt;td&gt;小写英文字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upper-alpha&lt;/td&gt;
&lt;td&gt;大写英文字母&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 背景</title>
    <link href="http://yoursite.com/2017/06/11/CSS%20%E8%83%8C%E6%99%AF/"/>
    <id>http://yoursite.com/2017/06/11/CSS 背景/</id>
    <published>2017-06-10T17:21:00.000Z</published>
    <updated>2017-07-14T13:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-color</td>
<td>元素的背景颜色</td>
</tr>
<tr>
<td>background-image</td>
<td>元素的背景图片</td>
</tr>
<tr>
<td>background-position</td>
<td>背景图片的起始位置</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景图片是否固定</td>
</tr>
<tr>
<td>background-repeat</td>
<td>背景图片是否重复及如何重复</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h2><p>背景颜色的值可以是颜色的英文名，Hex 和 RGB。<code>background-color</code> 的作用区域包括内容，内边距 <code>padding</code> 和边框，不包括外边距 <code>margin</code>。</p>
<p><code>background-color</code> 有一个特殊的值 <code>transparent</code> ，它是全透明黑色的标识，类似 <code>rgba(0,0,0,0)</code>。当我们不希望元素有背景颜色，且不希望浏览器的设置影响到元素的背景颜色，可以通过 <code>transparent</code> 设定。</p>
<blockquote>
<p>应该是类似 iOS 中 <code>color = clear</code>，背景色是透明的。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>background-color<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">border-width</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">border-style</span>: dashed;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    background-color</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><p>用于设定元素的背景图片，<code>background-image</code> 覆盖的位置与 <code>background-color</code> 一致，默认左上角是起始位置，并在水平和垂直方向上重复。<code>background-image</code> 的值可以是绝对地址，也可以是相对地址，语法是 <code>url(...)</code> ，或者是 <code>none</code>，同时设定背景颜色和图片时，图片会覆盖背景颜色。</p>
<h2 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h2><p>背景图片的重复方式使用 <code>background-repeat</code> 标记，它的值有以下几个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>repeat</td>
<td>重复</td>
</tr>
<tr>
<td>no-repeat</td>
<td>不重复</td>
</tr>
<tr>
<td>repeat-x</td>
<td>x 轴重复</td>
</tr>
<tr>
<td>repeat-y</td>
<td>y 轴重复</td>
</tr>
</tbody>
</table>
<h2 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h2><p>用于标记图片的显示方式，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>scroll</td>
<td>默认值，背景图片跟随滚动条滚动。</td>
</tr>
<tr>
<td>fixed</td>
<td>当页面的其余部分滚动时，背景图片不会移动</td>
</tr>
</tbody>
</table>
<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><p><code>background-position</code> 有以下几个常用的值：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">百分比:水平和垂直位置的百分比，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">数值:水平和垂直位置的值，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">top:顶部显示，等同于 x = 0，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">bottom:底部显示，等同于 x = 100%，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">right:左对齐，等同于 y = 0，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">left:右对齐，等同于 y = 100%，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">center:居中对齐，等同于 x = 50%, y = 50%</div></pre></td></tr></table></figure>
<p>另外需要注意的是，当 <code>background-attachment</code> 是 <code>fixed</code> 时，位置是按浏览器窗口计算，当  <code>background-attachment</code> 是 <code>scroll</code> 时，位置是按父元素计算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;background-color&lt;/td&gt;
&lt;td&gt;元素的背景颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-image&lt;/td&gt;
&lt;td&gt;元素的背景图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-position&lt;/td&gt;
&lt;td&gt;背景图片的起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-attachment&lt;/td&gt;
&lt;td&gt;背景图片是否固定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-repeat&lt;/td&gt;
&lt;td&gt;背景图片是否重复及如何重复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode错误 - Apple Mach-O Linker (ld) Error Group</title>
    <link href="http://yoursite.com/2017/06/10/Xcode%E9%94%99%E8%AF%AF%20-%20Apple%20Mach-O%20Linker%20(ld)%20Error%20Group/"/>
    <id>http://yoursite.com/2017/06/10/Xcode错误 - Apple Mach-O Linker (ld) Error Group/</id>
    <published>2017-06-09T18:24:00.000Z</published>
    <updated>2017-07-14T13:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <a href="https://github.com/ZipArchive/ZipArchive" target="_blank" rel="external">ZipArchive</a> 时，Xcode 报错 <code>Apple Mach-O Linker (ld) Error Group</code>，错误原因是类库依赖的框架没有添加，添加缺失的框架即可，在这个例子中我添加了 <code>libe.tbd</code> 后解决。</p>
<blockquote>
<p>Teaching a man (or women) how to fish:</p>
<p>Usually Mach-O Linker Error means you have not included a header file for a function you are using in your code.</p>
<p>Easiest way is to copy that function or method call and paste into Xcode quick search using shift+command+O. This will search all frameworks (and header files), find that function or method call and show you its location (the header in this case):</p>
<p>In this case, this call belongs to the Accelerate framework so on top of your file, enter <code>#import &lt;Accelerate/Accelerate.h&gt;</code>.</p>
<p>When doing quick search, you might have to get rid of leading underscore. In other words, search for vImageBoxConvolve_ARGB8888</p>
<p>Hope this helps</p>
</blockquote>
   <a id="more"></a>
<p>参考链接：</p>
<p><a href="http://stackoverflow.com/questions/17414460/xcode-gives-apple-mach-o-linker-error" target="_blank" rel="external">http://stackoverflow.com/questions/17414460/xcode-gives-apple-mach-o-linker-error</a></p>
<p><a href="http://stackoverflow.com/questions/5329001/apple-mach-o-linker-error-when-compiling-for-device" target="_blank" rel="external">http://stackoverflow.com/questions/5329001/apple-mach-o-linker-error-when-compiling-for-device</a>        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;a href=&quot;https://github.com/ZipArchive/ZipArchive&quot;&gt;ZipArchive&lt;/a&gt; 时，Xcode 报错 &lt;code&gt;Apple Mach-O Linker (ld) Error Group&lt;/code&gt;，错误原因是类库依赖的框架没有添加，添加缺失的框架即可，在这个例子中我添加了 &lt;code&gt;libe.tbd&lt;/code&gt; 后解决。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teaching a man (or women) how to fish:&lt;/p&gt;
&lt;p&gt;Usually Mach-O Linker Error means you have not included a header file for a function you are using in your code.&lt;/p&gt;
&lt;p&gt;Easiest way is to copy that function or method call and paste into Xcode quick search using shift+command+O. This will search all frameworks (and header files), find that function or method call and show you its location (the header in this case):&lt;/p&gt;
&lt;p&gt;In this case, this call belongs to the Accelerate framework so on top of your file, enter &lt;code&gt;#import &amp;lt;Accelerate/Accelerate.h&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When doing quick search, you might have to get rid of leading underscore. In other words, search for vImageBoxConvolve_ARGB8888&lt;/p&gt;
&lt;p&gt;Hope this helps&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Xcode错误" scheme="http://yoursite.com/categories/Xcode%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="Xcode错误" scheme="http://yoursite.com/tags/Xcode%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 文本样式</title>
    <link href="http://yoursite.com/2017/06/09/CSS%20%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/06/09/CSS 文本样式/</id>
    <published>2017-06-08T17:21:00.000Z</published>
    <updated>2017-07-14T13:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>网页是由文字、图片、音视频组成，因此网页的文字很大程度影响网页的美观度，CSS 的常用文字样式属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体</td>
<td>font-family</td>
</tr>
<tr>
<td>字号</td>
<td>font-size</td>
</tr>
<tr>
<td>颜色</td>
<td>font-color</td>
</tr>
<tr>
<td>字重</td>
<td>font-weight</td>
</tr>
<tr>
<td>样式</td>
<td>font-style</td>
</tr>
</tbody>
</table>
<h2 id="font-标签"><a href="#font-标签" class="headerlink" title="font 标签"></a>font 标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"宋体"</span> <span class="attr">size</span>=<span class="string">"20px"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>字体可以通过 <code>&lt;font&gt;</code> 标签设置，但是建议通过 <code>style</code> 标签和属性来设置字体，因为在很多版本中，<code>&lt;font&gt;</code> 标签已被弃用。</p>
<a id="more"></a>
<h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family 字体"></a>font-family 字体</h2><p>定义元素内的字体，包含空格的字体名个中文字体名，需要用英文 <code>&quot;&quot;</code> 包裹，多个字体使用英文 <code>,</code> 隔开，当使用 <code>style</code> 属性声明字体时，使用英文 <code>&#39;&#39;</code> 包裹，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="undefined"></span></div><div class="line">    h1 &#123;</div><div class="line">        font-family: "lucida grande", "lucida sans unicode", lucida, helvetica, "Hiragino Sans GB", "Microsoft YaHei", "WenQuanYi Micro Hei", sans-serif;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-family:'宋体';"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>font-family</code> 的属性值可以是字体名，也可以是字体集，<strong>字体集是一类字体的统称</strong>。</p>
<h2 id="font-size-字号"><a href="#font-size-字号" class="headerlink" title="font-size 字号"></a>font-size 字号</h2><p><code>font-size</code> 用于定义元素内的字体大小，它的值可以相对单位，也可以是绝对单位。绝对单位有以下几种：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>单位</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>英寸</td>
</tr>
<tr>
<td>cm</td>
<td>厘米</td>
</tr>
<tr>
<td>mm</td>
<td>毫米</td>
</tr>
<tr>
<td>pt</td>
<td>磅，印刷的点数，1英寸 = 72磅。</td>
</tr>
<tr>
<td>pc</td>
<td>1pc = 12pt</td>
</tr>
</tbody>
</table>
<p>当没有设置 <code>font-size</code> 时，网页会使用浏览器默认的字体大小，一般是 <code>16px</code>。我们也可以使用绝对值来定义 <code>font-size</code>，可用的绝对值有以下几种：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>对应字号</th>
</tr>
</thead>
<tbody>
<tr>
<td>xx-small</td>
<td>9px</td>
</tr>
<tr>
<td>x-small</td>
<td>11px</td>
</tr>
<tr>
<td>small</td>
<td>13px</td>
</tr>
<tr>
<td>medium</td>
<td>16px</td>
</tr>
<tr>
<td>large</td>
<td>19px</td>
</tr>
<tr>
<td>x-large</td>
<td>23px</td>
</tr>
<tr>
<td>xx-large</td>
<td>28px</td>
</tr>
</tbody>
</table>
<p>绝对单位不会因为设备分辨率或父元素的大小而改变，且根据浏览器和默认设置的不同，展示效果也不一样，因此绝对单位在 <code>font-size</code> 中并不常用。</p>
<p>相对单位有两种单位，<code>px</code> 、 <code>em</code>、 <code>%</code>，相对单位会根据屏幕分辨率的不同，改变自身的大小。其中 <code>em</code> 和 <code>%</code>  都是根据父元素的 <code>font-size</code> 进行计算得出值。<code>2em</code> 也就是父元素字体大小的 2 倍，<code>200%</code> 等同于 <code>2em</code>。</p>
<p>相对单位还有两个特殊的值 <code>smaller</code> 和 <code>larger</code>，它们会根据父元素的 <code>font-size</code> 变大或变小。</p>
<h2 id="color-文字颜色"><a href="#color-文字颜色" class="headerlink" title="color 文字颜色"></a>color 文字颜色</h2><p><code>color</code> 属性用于定义元素内文字的颜色，<code>color</code> 的值可以是英文名、Hex、RGB。</p>
<h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight 字体粗细"></a>font-weight 字体粗细</h2><p><code>font-weight</code> 用于为元素内的文字设置粗细，<code>font-weight</code> 的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal / 400</td>
</tr>
<tr>
<td>粗</td>
<td>bold / 700</td>
</tr>
<tr>
<td>更粗</td>
<td>bolder</td>
</tr>
<tr>
<td>更细</td>
<td>lighter</td>
</tr>
<tr>
<td>数字</td>
<td>100 - 900</td>
</tr>
</tbody>
</table>
<h2 id="font-style-字体样式"><a href="#font-style-字体样式" class="headerlink" title="font-style 字体样式"></a>font-style 字体样式</h2><p>在 HTML 中，我们使用 <code>&lt;em&gt;</code> 和 <code>&lt;i&gt;</code> 标签设置斜体，那么在 CSS 中，如何设置斜体呢？那就是 <code>font-style</code>，它有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal</td>
</tr>
<tr>
<td>斜体</td>
<td>italic</td>
</tr>
<tr>
<td>倾斜</td>
<td>oblique</td>
</tr>
</tbody>
</table>
<h2 id="font-variant-字体变形"><a href="#font-variant-字体变形" class="headerlink" title="font-variant 字体变形"></a>font-variant 字体变形</h2><p>设置元素中文本为小型大写字母，只针对英文有效， <code>font-variant</code> 常用的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal</td>
</tr>
<tr>
<td>小型大写字母</td>
<td>small-caps</td>
</tr>
</tbody>
</table>
<h2 id="text-align-水平对齐"><a href="#text-align-水平对齐" class="headerlink" title="text-align 水平对齐"></a>text-align 水平对齐</h2><p>设置元素内文本的水 平对齐方式，<code>text-align</code> 常用的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左对齐</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>justify</td>
<td>两段对齐</td>
</tr>
</tbody>
</table>
<p><strong>需要注意的是，<code>text-align</code> 只对块级元素有效</strong>。</p>
<h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>设置元素内容的垂直方式，<code>vertical-align</code> 有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseline</td>
<td>基线对齐</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
</tr>
<tr>
<td>super</td>
<td>上标</td>
</tr>
<tr>
<td>top</td>
<td>元素顶部对齐</td>
</tr>
<tr>
<td>text-top</td>
<td>文字顶部对齐</td>
</tr>
<tr>
<td>middle</td>
<td>垂直居中对齐</td>
</tr>
<tr>
<td>bottom</td>
<td>元素底部对齐</td>
</tr>
<tr>
<td>text-bottom</td>
<td>文字底部对齐</td>
</tr>
<tr>
<td>长度</td>
<td>比如 15、-15</td>
</tr>
<tr>
<td>百分比</td>
<td>比如 30%、-30%。</td>
</tr>
</tbody>
</table>
<p><strong><code>vertical-align</code> 对行内元素有效，对块级元素无效</strong>。<code>vertical-align</code> 设定的是行内元素在父级元素中，两条基线的垂直对齐方式。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/CSS%20%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90.jpg" alt="CSS 垂直对齐"></p>
<h2 id="line-height-行高"><a href="#line-height-行高" class="headerlink" title="line-height 行高"></a>line-height 行高</h2><p>用于设定元素中文本的的行高，它的值可以是长度和  <code>%</code>，<code>em</code>。使用长度作为行高，如果 <code>font-size</code> 发生变化，由于 <code>line-height</code> 大于或小于 <code>font-size</code>，会造成页面文字挤压或过于稀疏，这种情况可以使用百分比来设定行高。</p>
<h2 id="word-spacing-和-letter-spacing"><a href="#word-spacing-和-letter-spacing" class="headerlink" title="word-spacing 和 letter-spacing"></a>word-spacing 和 letter-spacing</h2><table>
<thead>
<tr>
<th>字体属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>word-spacing</td>
<td>设定元素内单词之间的间距</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>设定元素内字母之间的间距</td>
</tr>
</tbody>
</table>
<p><code>word-spacing</code> 属性以空格作为单词的依据，将单词之间的间距增加或缩小。</p>
<h2 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h2><p><code>text-transform</code> 用于设定元素内文本的大小写，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>capitalize</td>
<td>首字母大写</td>
</tr>
<tr>
<td>uppercase</td>
<td>大写</td>
</tr>
<tr>
<td>lowercase</td>
<td>小写</td>
</tr>
<tr>
<td>none</td>
<td>默认值</td>
</tr>
</tbody>
</table>
<p><code>text-transform</code> 是以空格区分文本中的单词，如 <code>text-align</code> 这样的单词，在一些浏览器中，可能不会生效。</p>
<h2 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h2><p><code>text-decoration</code> 用以设定元素内文本的装饰，有以下几个常见的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>underline</td>
<td>下划线</td>
</tr>
<tr>
<td>overline</td>
<td>上划线</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线</td>
</tr>
<tr>
<td>blink</td>
<td>闪烁</td>
</tr>
<tr>
<td>none</td>
<td>默认</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网页是由文字、图片、音视频组成，因此网页的文字很大程度影响网页的美观度，CSS 的常用文字样式属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;字体&lt;/td&gt;
&lt;td&gt;font-family&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字号&lt;/td&gt;
&lt;td&gt;font-size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;颜色&lt;/td&gt;
&lt;td&gt;font-color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字重&lt;/td&gt;
&lt;td&gt;font-weight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;样式&lt;/td&gt;
&lt;td&gt;font-style&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;font-标签&quot;&gt;&lt;a href=&quot;#font-标签&quot; class=&quot;headerlink&quot; title=&quot;font 标签&quot;&gt;&lt;/a&gt;font 标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;face&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;宋体&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20px&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字体可以通过 &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 标签设置，但是建议通过 &lt;code&gt;style&lt;/code&gt; 标签和属性来设置字体，因为在很多版本中，&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 标签已被弃用。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 继承和层叠</title>
    <link href="http://yoursite.com/2017/06/07/CSS%20%E7%BB%A7%E6%89%BF%E5%92%8C%E5%B1%82%E5%8F%A0/"/>
    <id>http://yoursite.com/2017/06/07/CSS 继承和层叠/</id>
    <published>2017-06-06T17:21:00.000Z</published>
    <updated>2017-07-13T11:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 中，标签的层级关系就是树，<code>&lt;html&gt;</code> 是根节点。CSS 继承是指从父元素那继承部分 CSS 属性。</p>
<blockquote>
<p>应该类似父类和子类的关系吧，只不过这个类只用来描述 View 的 UI 元素。</p>
</blockquote>
<p>比如下面的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS <span class="tag">&lt;<span class="name">span</span>&gt;</span>继承<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们没有描述 <code>&lt;span&gt;</code>  的样式，<code>继承</code> 两个字也变成红色，用面向对象来理解，应该是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</div><div class="line">	color = red</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Span</span>: <span class="title">P</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> span = <span class="type">Span</span>()</div><div class="line"><span class="built_in">print</span>(span.color)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CSS 的继承关系是比较弱的，子元素不一定会继承父元素所有的属性。</p>
<p>CSS 层叠可以定义多个样式，不冲突时，多个样式可以层叠为一个，冲突时，按照不同样式规则优先级来应用样式。</p>
<blockquote>
<p>CSS 层叠类似子类重写和添加属性吧。CSS 的继承和层叠和面向对象的继承和多态感觉差不多。</p>
</blockquote>
<h2 id="CSS-权值"><a href="#CSS-权值" class="headerlink" title="CSS 权值"></a>CSS 权值</h2><table>
<thead>
<tr>
<th>类型</th>
<th>权值</th>
</tr>
</thead>
<tbody>
<tr>
<td>行内样式</td>
<td>1000</td>
</tr>
<tr>
<td>id 选择器</td>
<td>100</td>
</tr>
<tr>
<td>class 选择器和伪类</td>
<td>10</td>
</tr>
<tr>
<td>标签选择器</td>
<td>1</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>0</td>
</tr>
<tr>
<td>继承</td>
<td>无权值，有任意声明都会被覆盖。</td>
</tr>
</tbody>
</table>
<h3 id="权值计算"><a href="#权值计算" class="headerlink" title="权值计算"></a>权值计算</h3><p>以 <code>#main div.warning h2 {...}</code> 举例：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>符名</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td><code>#main</code></td>
<td>100</td>
</tr>
<tr>
<td>标签</td>
<td><code>div</code></td>
<td>1</td>
</tr>
<tr>
<td>class</td>
<td><code>warning</code></td>
<td>10</td>
</tr>
<tr>
<td>标签</td>
<td><code>h2</code></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>因此它的权值是 112。</p>
<h3 id="比较原则"><a href="#比较原则" class="headerlink" title="比较原则"></a>比较原则</h3><p><code>1,0,0,0 &gt; 0,99,99,99</code>，也就是说从左往右逐个等级比较，前一等级相等才往后比，无论是行间、内部和外部样式，都是按照这个规则来进行比较。而不是直观的 <code>行间 &gt; 内部 &gt; 外部样式</code>，<code>id &gt; class &gt; 元素</code>。之所以有这样的错觉，是因为确实行间为第一等的权重，所以它的权重是最高的，而内部样式可能一般写在了外部样式引用了之后，所以覆盖掉了之前的。</p>
<p>同样权值的样式，后声明的样式会覆盖先声明的样式。</p>
<h2 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">      * &#123;</div><div class="line">        <span class="attribute">color</span>: red <span class="meta">!important</span></div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>!importrtant</code> 关键字可以使样式的权重提升到无限大，通过 <code>!important</code> 声明的样式，会覆盖所有冲突样式。</p>
<h2 id="CSS-优先级"><a href="#CSS-优先级" class="headerlink" title="CSS 优先级"></a>CSS 优先级</h2><p>之前我们学习过，CSS 的优先级 <code>行内样式 &gt; 内部样式 &gt; 外部样式</code> ，其中 <code>&lt;link&gt;</code> 和 <code>@import</code> 的优先级取决于位置的先后，最后定义的优先级最高，也就是就近原则。</p>
<p>那么元素选择器、class 选择器、id 选择器、全局选择器，群组选择器、后代选择器，这几种选择器的优先级又是怎样的呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 选择器优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-id">#green</span> &#123;</div><div class="line">        <span class="attribute">color</span>: green;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.blue</span> &#123;</div><div class="line">        <span class="attribute">color</span>: blue;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>单独使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">      使用标签选择器</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span></div><div class="line">      使用 id 样式</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span></div><div class="line">      使用 class 样式</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span></div><div class="line">      同时引用 class 和 id</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--id选择器 &gt; 标签选择器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--class选择器 &gt; 标签选择器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--id选择器 &gt; class选择器--&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过上面的代码，我们可以得出结论：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id选择器 &gt; class选择器 &gt; 标签选择器</div></pre></td></tr></table></figure>
<blockquote>
<p>我们之前学习过，id 和 HTML 元素是一一对应的，但多个元素可以使用一个 class，一个元素也可以使用多个 class，因此 id 距离元素“更近”。</p>
</blockquote>
<p>一个元素同时继承多个 class 发生冲突时，后定义的 class 会覆盖之前的 class。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 中，标签的层级关系就是树，&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 是根节点。CSS 继承是指从父元素那继承部分 CSS 属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应该类似父类和子类的关系吧，只不过这个类只用来描述 View 的 UI 元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;CSS &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;继承&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们没有描述 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;  的样式，&lt;code&gt;继承&lt;/code&gt; 两个字也变成红色，用面向对象来理解，应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;P&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	color = red&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Span&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;P&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; span = &lt;span class=&quot;type&quot;&gt;Span&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(span.color)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 命名规范</title>
    <link href="http://yoursite.com/2017/06/03/CSS%20%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/06/03/CSS 命名规范/</id>
    <published>2017-06-02T17:21:00.000Z</published>
    <updated>2017-07-14T13:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 样式可以通过 <code>&lt;link&gt;</code> 的方式，提供给多个 HTML 文件使用，这其中有很多的 <code>id</code>、<code>class</code> 的命名，命名的重要性不必多说，那么 CSS 中，怎样的命名才算是规范的呢？有以下几个规则：</p>
<ul>
<li>采用英文字母、数字、以及 <code>-</code> 和 <code>_</code> 命名；</li>
<li>使用小写字母命名，不能以数字、<code>-</code>、<code>_</code> 开头；</li>
<li>尽量使用单词命名，多个单词使用 <code>_</code>、<code>-</code> 进行连接，或使用小驼峰命名；</li>
<li>使用具有具体意义的命名；</li>
</ul>
<p>命名一般使用元素位置所为标记，常用的命名标记有以下几个：</p>
<table>
<thead>
<tr>
<th>结构</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>页头</td>
<td>header</td>
</tr>
<tr>
<td>页尾</td>
<td>footer</td>
</tr>
<tr>
<td>导航</td>
<td>nav</td>
</tr>
<tr>
<td>页面主体</td>
<td>main</td>
</tr>
<tr>
<td>侧栏</td>
<td>sidebar</td>
</tr>
<tr>
<td>栏目</td>
<td>column</td>
</tr>
<tr>
<td>内容</td>
<td>content / container</td>
</tr>
<tr>
<td>容器</td>
<td>container</td>
</tr>
<tr>
<td>左中右</td>
<td>left right center</td>
</tr>
<tr>
<td>页面外围控制</td>
<td>wrapper</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>导航的样式命名有进一步的细分，如下：</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>主导航</td>
<td>mainnav</td>
</tr>
<tr>
<td>子导航</td>
<td>subnav</td>
</tr>
<tr>
<td>顶导航</td>
<td>topnav</td>
</tr>
<tr>
<td>边导航</td>
<td>sidebar</td>
</tr>
<tr>
<td>左导航</td>
<td>leftsidebar</td>
</tr>
<tr>
<td>右导航</td>
<td>rightsidebar</td>
</tr>
<tr>
<td>菜单</td>
<td>menu</td>
</tr>
<tr>
<td>子菜单</td>
<td>submenu</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
</tr>
<tr>
<td>摘要</td>
<td>summary</td>
</tr>
</tbody>
</table>
<p>功能命名如下：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>标志</td>
<td>logo</td>
</tr>
<tr>
<td>广告</td>
<td>banner</td>
</tr>
<tr>
<td>登录</td>
<td>login</td>
</tr>
<tr>
<td>登录条</td>
<td>loginbar</td>
</tr>
<tr>
<td>注册</td>
<td>register</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
</tr>
<tr>
<td>功能区</td>
<td>shop</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 样式可以通过 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 的方式，提供给多个 HTML 文件使用，这其中有很多的 &lt;code&gt;id&lt;/code&gt;、&lt;code&gt;class&lt;/code&gt; 的命名，命名的重要性不必多说，那么 CSS 中，怎样的命名才算是规范的呢？有以下几个规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用英文字母、数字、以及 &lt;code&gt;-&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 命名；&lt;/li&gt;
&lt;li&gt;使用小写字母命名，不能以数字、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;_&lt;/code&gt; 开头；&lt;/li&gt;
&lt;li&gt;尽量使用单词命名，多个单词使用 &lt;code&gt;_&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt; 进行连接，或使用小驼峰命名；&lt;/li&gt;
&lt;li&gt;使用具有具体意义的命名；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名一般使用元素位置所为标记，常用的命名标记有以下几个：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;结构&lt;/th&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;页头&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页尾&lt;/td&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;导航&lt;/td&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页面主体&lt;/td&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;侧栏&lt;/td&gt;
&lt;td&gt;sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;栏目&lt;/td&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内容&lt;/td&gt;
&lt;td&gt;content / container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;容器&lt;/td&gt;
&lt;td&gt;container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;左中右&lt;/td&gt;
&lt;td&gt;left right center&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页面外围控制&lt;/td&gt;
&lt;td&gt;wrapper&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 选择器</title>
    <link href="http://yoursite.com/2017/05/26/CSS%20%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/05/26/CSS 选择器/</id>
    <published>2017-05-25T17:21:00.000Z</published>
    <updated>2017-07-13T12:12:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 常用选择器有 6 种：</p>
<ul>
<li>标签选择器；</li>
<li>类选择器；</li>
<li>id 选择器；</li>
<li>全局选择器；</li>
<li>群组选择器；</li>
<li>后代选择器；</li>
</ul>
<a id="more"></a>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>标签选择器通过 HTML 标签作为选择器：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器通过 <code>class</code> 属性作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.red</span> &#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类选择器还可以通过 HTML 标签进行更细一步的区分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">h1</span><span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">h2</span><span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以自定义一个属性字段，使用类选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-attr">[bc]</span> &#123;</div><div class="line">      <span class="attribute">background</span>: red;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span> <span class="attr">bc</span>=<span class="string">""</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><p>id 选择器通过 <code>id</code> 属性作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-id">#bc</span> &#123;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bc"</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>与 <code>class</code> 属性不同，<code>id</code> 属性和 HTML 元素是一一对应的，没每个 HTML 元素只能有一个 <code>id</code>，一个 <code>id</code> 也只能声明一个元素。</p>
<h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><p>给多个 HTML 标签，类，id 设置同样的样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-id">#bc</span>, <span class="selector-class">.bc</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bc"</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bc"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​                                                    </p>
<h2 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h2><p>全局选择器又称为通配符选择器，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器利用 HTML 标签的层级关系，通过 HTML 标签作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#p1</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.red</span> <span class="selector-tag">a</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>有些状态使用 <code>class</code> 和 <code>id</code> 属性无法准确的表示，因此需要使用伪类。<strong>CSS 伪类用于向某些选择器添加特殊的效果。</strong>伪类最常见的是对于链接的状态处理，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="comment">/* 未访问的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#FF0000</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="comment">/* 已访问的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#00FF00</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="comment">/* 鼠标移动到链接上 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#FF00FF</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="comment">/* 选定的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#0000FF</span></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>链接伪类有顺序的限制，其先后顺序为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:link &gt; :visited &gt; :hover &gt; :active</div></pre></td></tr></table></figure>
<h2 id="hover-和-active"><a href="#hover-和-active" class="headerlink" title=":hover 和 :active"></a>:hover 和 :active</h2><p><code>:hover</code> 用于鼠标经过某个元素时，<code>:active</code> 用于一个元素被激活时，也就是按下鼠标到松开鼠标的这段时间。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">P</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>伪类可以通过类选择器和标签选择器组合使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.tips</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.tips</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 常用选择器有 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标签选择器；&lt;/li&gt;
&lt;li&gt;类选择器；&lt;/li&gt;
&lt;li&gt;id 选择器；&lt;/li&gt;
&lt;li&gt;全局选择器；&lt;/li&gt;
&lt;li&gt;群组选择器；&lt;/li&gt;
&lt;li&gt;后代选择器；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 基础</title>
    <link href="http://yoursite.com/2017/05/22/CSS%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/05/22/CSS 基础/</id>
    <published>2017-05-21T17:21:00.000Z</published>
    <updated>2017-07-13T12:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 规则由两部分组成，<strong>选择器和声明</strong>。<strong>选择器</strong>是用于告知浏览器，要对 HTML 的哪个元素设置样式。<strong>声明</strong>由 <code>key-value</code> 键值对组成，用于描述样式。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/selector.gif" alt=""></p>
<p>CSS 声明总是以 <code>;</code> 结束，声明组以 <code>{}</code> 括起来：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">color</span>:red;</div><div class="line">  <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CSS 位于 HTML 文档的 <code>&lt;head&gt; &lt;style&gt;</code> 标签内，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-tag">p</span> &#123;</div><div class="line">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">          <span class="attribute">color</span>: red;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</div><div class="line">          <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">          <span class="attribute">color</span>: <span class="number">#666666</span>;</div><div class="line">      &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>CSS 层叠样式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>CSS 层叠样式<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>用于定义 HTML 内容在浏览器中显示的样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="Style-标签"><a href="#Style-标签" class="headerlink" title="Style 标签"></a>Style 标签</h2><p><code>&lt;style&gt;</code> 标签用于为 HTML 文档定义样式信息。在 <code>&lt;style&gt;</code> 中，您可以规定在浏览器中如何呈现 HTML 文档。</p>
<p><code>type</code> 属性是必需的，定义 <code>&lt;style&gt;</code> 元素的内容。唯一可能的值是 <code>text/css</code>，<code>&lt;style&gt;</code> 元素位于 <code>&lt;head&gt;</code> 部分中。<code>&lt;style&gt;</code> 标签还有一个可选的属性 <code>media</code>，如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>screen</td>
<td>计算机屏幕（默认值）。</td>
</tr>
<tr>
<td>tty</td>
<td>使用等宽字符网格的媒介，如电传打字机。</td>
</tr>
<tr>
<td>tv</td>
<td>低分辨率、有限的屏幕翻滚能力，如电视。</td>
</tr>
<tr>
<td>projection</td>
<td>放映机。</td>
</tr>
<tr>
<td>handheld</td>
<td>手持设备（小屏幕、有限的带宽）。</td>
</tr>
<tr>
<td>print</td>
<td>打印预览模式 / 打印页。</td>
</tr>
<tr>
<td>braille</td>
<td>盲人用点字法反馈设备。</td>
</tr>
<tr>
<td>aural</td>
<td>语音合成器。</td>
</tr>
<tr>
<td>all</td>
<td>适合所有设备。</td>
</tr>
</tbody>
</table>
<p><code>media</code> 属性用于为不同的媒介类型规定不同的样式。如需在一个 <code>&lt;style&gt;</code> 元素中定义一个以上的媒介类型，请使用逗号分隔的列表：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; media=&quot;screen,projection&quot;&gt;</div></pre></td></tr></table></figure>
<p>所有主流浏览器都支持 <code>media</code> 属性的 <code>screen、print 以及 all</code> 值，<code>Opera</code> 同时支持 <code>handheld</code> 值。</p>
<h2 id="引用-CSS-样式"><a href="#引用-CSS-样式" class="headerlink" title="引用 CSS 样式"></a>引用 CSS 样式</h2><p>引用 CSS 样式有以下四种方法：</p>
<ul>
<li>行内样式，也称为内联样式；</li>
<li>内部样式表，也称为嵌入样式；</li>
<li>外部样式表；</li>
<li>导入式；</li>
</ul>
<h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><p>行内样式是指在开始标签内添加 <code>style</code> 样式属性，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"font-size: 30px; color: blue"</span>&gt;</span>定义 p 标签的内容在浏览器中显示的样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h3><p>内部样式是指 CSS 样式代码写在 <code>&lt;head&gt; &lt;style&gt;</code> 里面。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-tag">p</span> &#123;</div><div class="line">          <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">          <span class="attribute">color</span>: red;</div><div class="line">      &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><p>把 CSS 样式代码写在独立的，扩展名为 <code>.css</code> 的文件，引用方法如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="导入式"><a href="#导入式" class="headerlink" title="导入式"></a>导入式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 样式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      @<span class="keyword">import</span> url(css.css);</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="CSS-文件引入方法区别"><a href="#CSS-文件引入方法区别" class="headerlink" title="CSS 文件引入方法区别"></a>CSS 文件引入方法区别</h2><table>
<thead>
<tr>
<th>类别</th>
<th>引入方法</th>
<th>位置</th>
<th>加载时机</th>
</tr>
</thead>
<tbody>
<tr>
<td>行内样式</td>
<td><code>style</code> 属性</td>
<td>html 文件内</td>
<td>同时</td>
</tr>
<tr>
<td>内部样式</td>
<td><code>&lt;head&gt; &lt;style&gt;</code></td>
<td>html 文件内</td>
<td>同时</td>
</tr>
<tr>
<td>外部样式</td>
<td><code>&lt;head&gt; &lt;link&gt;</code></td>
<td>css 文件</td>
<td>同时</td>
</tr>
<tr>
<td>导入式</td>
<td><code>&lt;head&gt; &lt;style&gt;</code></td>
<td>css 文件</td>
<td>HTML 加载后</td>
</tr>
</tbody>
</table>
<h3 id="CSS-使用方法优先级"><a href="#CSS-使用方法优先级" class="headerlink" title="CSS 使用方法优先级"></a>CSS 使用方法优先级</h3><p>链入外部样式表与内部样式表之间的优先级取决于位置的先后，最后定义的优先级最高，也就是就近原则。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">行内样式 &gt; 内部样式 &gt; 外部样式</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 规则由两部分组成，&lt;strong&gt;选择器和声明&lt;/strong&gt;。&lt;strong&gt;选择器&lt;/strong&gt;是用于告知浏览器，要对 HTML 的哪个元素设置样式。&lt;strong&gt;声明&lt;/strong&gt;由 &lt;code&gt;key-value&lt;/code&gt; 键值对组成，用于描述样式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/selector.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;CSS 声明总是以 &lt;code&gt;;&lt;/code&gt; 结束，声明组以 &lt;code&gt;{}&lt;/code&gt; 括起来：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;text-align&lt;/span&gt;:center;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>HTML - 表单</title>
    <link href="http://yoursite.com/2017/05/12/HTML%20-%20%E8%A1%A8%E5%8D%95/"/>
    <id>http://yoursite.com/2017/05/12/HTML - 表单/</id>
    <published>2017-05-11T18:24:00.000Z</published>
    <updated>2017-07-10T11:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;form&gt;</code> 的常用属性有以下几种：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>aciton</td>
<td>URL</td>
<td>服务器的 URL</td>
</tr>
<tr>
<td>method</td>
<td>GET、POST</td>
<td>HTTP 方法</td>
</tr>
<tr>
<td>name</td>
<td>form_name</td>
<td>表单的名称</td>
</tr>
<tr>
<td>target</td>
<td>blank、self、parent、top</td>
<td>在何处打开 action URL</td>
</tr>
<tr>
<td>enctype</td>
<td>以下</td>
<td>表单数据的编码方式</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//在发送前编码所有字符（默认）</div><div class="line">application/x-www-form-urlencoded</div><div class="line">//不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</div><div class="line">multipart/form-data</div><div class="line">//空格转换为 &quot;+&quot; 加号，但不对特殊字符编码。</div><div class="line">text/plain</div></pre></td></tr></table></figure>
<p>表单常见的元素有以下几种：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;input&gt;</code></td>
<td>表单输入标签</td>
</tr>
<tr>
<td><code>&lt;select&gt;</code></td>
<td>菜单和列表标签</td>
</tr>
<tr>
<td><code>&lt;option&gt;</code></td>
<td>菜单和列表项目标签</td>
</tr>
<tr>
<td><code>&lt;textarea&gt;</code></td>
<td>文字域标签</td>
</tr>
<tr>
<td><code>&lt;optgroup&gt;</code></td>
<td>菜单和列表项目分组标签</td>
</tr>
</tbody>
</table>
   <a id="more"></a>
<h2 id="input-标签"><a href="#input-标签" class="headerlink" title="input 标签"></a>input 标签</h2><p>多数情况下被用到的表单标签是输入标签 <code>&lt;input&gt;</code>，<code>&lt;input&gt;</code> 是单标记标签，输入类型是由类型属性 <code>type</code> 定义的，大多数经常被用到的输入类型如下：</p>
<table>
<thead>
<tr>
<th>type 属性值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>text</td>
<td>文本域</td>
</tr>
<tr>
<td>password</td>
<td>密码域</td>
</tr>
<tr>
<td>file</td>
<td>文件域</td>
</tr>
<tr>
<td>checkbox</td>
<td>复现域</td>
</tr>
<tr>
<td>radio</td>
<td>单选域</td>
</tr>
<tr>
<td>button</td>
<td>按钮域</td>
</tr>
<tr>
<td>submit</td>
<td>提交域</td>
</tr>
<tr>
<td>reset</td>
<td>重置域</td>
</tr>
<tr>
<td>hidden</td>
<td>隐藏域</td>
</tr>
<tr>
<td>image</td>
<td>图像域</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    姓名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></div><div class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"paw"</span>&gt;</span></div><div class="line">    提交：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="text-password-单行文本域"><a href="#text-password-单行文本域" class="headerlink" title="text password 单行文本域"></a>text password 单行文本域</h3><p>文字域有以下几个常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>value 的 key</td>
</tr>
<tr>
<td>maxlength</td>
<td>可输入的最大字符数</td>
</tr>
<tr>
<td>size</td>
<td>文本框宽度，以字符数为单位。缺省值是 20</td>
</tr>
<tr>
<td>value</td>
<td>文本框的默认文本</td>
</tr>
<tr>
<td>placeholder</td>
<td>占位符，无文本输入时显示</td>
</tr>
</tbody>
</table>
<blockquote>
<p>maxlength 这个属性要比 iOS 优越啊，UITextField 如果需要限制长度要重写代理方法，还要考虑删除字符、输入法拼音已满但汉字还还打出来等情况。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>注册信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">color</span>=<span class="string">"#336699"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">bgcolor</span>=<span class="string">"#f2f2f2"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                姓名：</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span> <span class="attr">size</span>=<span class="string">"25"</span> <span class="attr">maxlength</span>=<span class="string">"6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                邮箱：</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"@163.com"</span> <span class="attr">placeholder</span>=<span class="string">""</span> <span class="attr">size</span>=<span class="string">"25"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                密码：</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"paw"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span> <span class="attr">size</span>=<span class="string">"25"</span> <span class="attr">maxlength</span>=<span class="string">"6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                确认密码：</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"paw_confirm"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"请再输入密码"</span> <span class="attr">size</span>=<span class="string">"25"</span> <span class="attr">maxlength</span>=<span class="string">"6"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="radio-checkbox-单选和复选"><a href="#radio-checkbox-单选和复选" class="headerlink" title="radio checkbox 单选和复选"></a>radio checkbox 单选和复选</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>value 的 key，相同 name 的 radio，只能选中一个</td>
</tr>
<tr>
<td>value</td>
<td>选项代表的值</td>
</tr>
<tr>
<td>checked</td>
<td>设置此项为选中</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"men"</span>&gt;</span></div><div class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"women"</span>&gt;</span></div><div class="line">保密<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"secret"</span> <span class="attr">checked</span>&gt;</span></div><div class="line"></div><div class="line">读书<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby1"</span> <span class="attr">value</span>=<span class="string">"read_book"</span> <span class="attr">checked</span>&gt;</span></div><div class="line">跳舞<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby2"</span> <span class="attr">value</span>=<span class="string">"dance"</span>&gt;</span></div><div class="line">唱歌<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby3"</span> <span class="attr">value</span>=<span class="string">"sing"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="button-submit-reset-按钮"><a href="#button-submit-reset-按钮" class="headerlink" title="button submit reset 按钮"></a>button submit reset 按钮</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>按钮的标题</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"来点我"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">value</span>=<span class="string">"reset"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="image-图像"><a href="#image-图像" class="headerlink" title="image 图像"></a>image 图像</h3><p><code>image</code> 可以设置一张图片作为按钮，其他方面与 <code>submit</code> 相同。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span> <span class="attr">name</span>=<span class="string">"image_button"</span> <span class="attr">src</span>=<span class="string">"image_url"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="hidden-隐藏"><a href="#hidden-隐藏" class="headerlink" title="hidden 隐藏"></a>hidden 隐藏</h3><p><code>hidden</code> 标签用于隐藏，主要用于希望将数据提交给服务器，但又不希望用户感知到时。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hiddent"</span> <span class="attr">name</span>=<span class="string">"hiddent"</span> <span class="attr">value</span>=<span class="string">"这是一个用户注册信息"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="select-option-列表和菜单"><a href="#select-option-列表和菜单" class="headerlink" title="select option 列表和菜单"></a>select option 列表和菜单</h2><p><code>&lt;select&gt; 和 &lt;option&gt;</code> 标签用于弹出列表，<code>&lt;select&gt;</code> 是列表，<code>&lt;option&gt;</code> 是列表项。</p>
<p><code>&lt;select&gt;</code> 的常用属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>value 的 key</td>
</tr>
<tr>
<td>multiple</td>
<td>开启 <code>shift</code> 多选</td>
</tr>
<tr>
<td>size</td>
<td>弹出框显示多少项，==1 时弹窗显示，&gt;1 时滚动显示</td>
</tr>
</tbody>
</table>
<p><code>&lt;option&gt;</code> 常用的属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>value</td>
<td>选项代表的值</td>
</tr>
<tr>
<td>selected</td>
<td>设置此项为选中</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">size</span>=<span class="string">"4"</span> <span class="attr">multiple</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"default"</span>&gt;</span>---请选择---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"guangzhou"</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shenzhen"</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"hangzhou"</span> <span class="attr">selected</span>=<span class="string">""</span>&gt;</span>杭州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="optgroup-可选项分组"><a href="#optgroup-可选项分组" class="headerlink" title="optgroup 可选项分组"></a>optgroup 可选项分组</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"default"</span>&gt;</span>---请选择---<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"北方"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"beijing"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">"南方"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类似 iOS 中 <code>section</code> 和 <code>row</code> 的 UI 关系。</p>
<h2 id="textarea-多行文本域"><a href="#textarea-多行文本域" class="headerlink" title="textarea 多行文本域"></a>textarea 多行文本域</h2><p>单行文本域只能输入一行的内容，多行文本域可以输入多行文本。</p>
<blockquote>
<p>类似 iOS 中 UITextField 和 UITextView 的 UI 区别。</p>
</blockquote>
<p><code>&lt;textarea&gt;</code> 常用的属性有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>value 的 key</td>
</tr>
<tr>
<td>placeholder</td>
<td>占位符</td>
</tr>
<tr>
<td>rows</td>
<td>可看行数</td>
</tr>
<tr>
<td>cols</td>
<td>可见宽度</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"detail"</span> <span class="attr">rows</span>=<span class="string">"4"</span> <span class="attr">placeholder</span>=<span class="string">"请填写内容"</span> <span class="attr">cols</span>=<span class="string">"50"</span>&gt;</span></div><div class="line">        default value</div><div class="line">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 的常用属性有以下几种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;aciton&lt;/td&gt;
&lt;td&gt;URL&lt;/td&gt;
&lt;td&gt;服务器的 URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;method&lt;/td&gt;
&lt;td&gt;GET、POST&lt;/td&gt;
&lt;td&gt;HTTP 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td&gt;form_name&lt;/td&gt;
&lt;td&gt;表单的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;target&lt;/td&gt;
&lt;td&gt;blank、self、parent、top&lt;/td&gt;
&lt;td&gt;在何处打开 action URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enctype&lt;/td&gt;
&lt;td&gt;以下&lt;/td&gt;
&lt;td&gt;表单数据的编码方式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//在发送前编码所有字符（默认）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;application/x-www-form-urlencoded&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;multipart/form-data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//空格转换为 &amp;quot;+&amp;quot; 加号，但不对特殊字符编码。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;text/plain&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表单常见的元素有以下几种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表单输入标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;菜单和列表标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;菜单和列表项目标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;文字域标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;optgroup&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;菜单和列表项目分组标签&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML - 表格</title>
    <link href="http://yoursite.com/2017/05/09/HTML%20-%20%E8%A1%A8%E6%A0%BC/"/>
    <id>http://yoursite.com/2017/05/09/HTML - 表格/</id>
    <published>2017-05-08T18:24:00.000Z</published>
    <updated>2017-07-10T11:46:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 表格主要由以下标签组成：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;table&gt;</code></td>
<td>定义表格</td>
</tr>
<tr>
<td><code>&lt;th&gt;</code></td>
<td>定义表格的表头</td>
</tr>
<tr>
<td><code>&lt;tr&gt;</code></td>
<td>定义表格的行</td>
</tr>
<tr>
<td><code>&lt;td&gt;</code></td>
<td>定义表格单元</td>
</tr>
<tr>
<td><code>&lt;caption&gt;</code></td>
<td>定义表格标题</td>
</tr>
<tr>
<td><code>&lt;colgroup&gt;</code></td>
<td>定义表格列的组</td>
</tr>
<tr>
<td><code>&lt;col&gt;</code></td>
<td>定义用于表格列的属性</td>
</tr>
</tbody>
</table>
<p>代码演示如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--创建两行三列的表格--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>前端工程师平均工资<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>上半年<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>下半年<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
   <a id="more"></a>
<h2 id="表格结构标签"><a href="#表格结构标签" class="headerlink" title="表格结构标签"></a>表格结构标签</h2><p>在 HTML 中，表格的加载时完成后再显示，当表格的内容和结构比较复杂时，这会影响页面打开的速度。这种情况需要借助表格的结构进行优化，通过结构的划分，表格可以分几次加载和显示。</p>
<table>
<thead>
<tr>
<th>结构</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&lt;thead&gt;</code></td>
<td>定义表格的页眉，主要用于放标题之类的内容</td>
</tr>
<tr>
<td><code>&lt;tbody&gt;</code></td>
<td>定义表格的主体，主要用于存放数据主体</td>
</tr>
<tr>
<td><code>&lt;tfoot&gt;</code></td>
<td>定义表格的页脚，主要用于存放表格的脚注</td>
</tr>
</tbody>
</table>
<p><code>&lt;thead&gt; &lt;tbody&gt; &lt;tfoot&gt;</code> 永远是依次展示，和代码的顺序无关，其常用属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>align</td>
<td>left、center、right、justify、char</td>
<td>单元格内容水平对齐</td>
</tr>
<tr>
<td>valign</td>
<td>top、middle、bottom、baseline</td>
<td>单元格内容垂直对齐</td>
</tr>
</tbody>
</table>
<p>代码演示如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--创建两行三列的表格--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">width</span>=<span class="string">"50%"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">caption</span>&gt;</span>前端工程师平均工资<span class="tag">&lt;/<span class="name">caption</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>城市<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>上半年<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>下半年<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2015<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2016<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>合计<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="table-常用属性"><a href="#table-常用属性" class="headerlink" title="table 常用属性"></a>table 常用属性</h2><p><img src="http://oboehz2ag.bkt.clouddn.com/HTML-Table-%E5%B1%9E%E6%80%A7.png" alt="HTML-Table-属性"></p>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>border</td>
<td>像素和百分比</td>
<td>表格边框的宽度</td>
</tr>
<tr>
<td>width</td>
<td>像素</td>
<td>表格宽度，支持像素和百分比</td>
</tr>
<tr>
<td>align</td>
<td>right、left、center</td>
<td>表格对齐方式</td>
</tr>
<tr>
<td>bgcolor</td>
<td>RGB、Hex、英文名</td>
<td>表格背景颜色</td>
</tr>
<tr>
<td>cell-padding</td>
<td>像素和百分比</td>
<td>单元格内边距</td>
</tr>
<tr>
<td>cell-spacing</td>
<td>像素和百分比</td>
<td>单元格外边距</td>
</tr>
<tr>
<td>frame</td>
<td>属性值</td>
<td>表格外边框显示方式</td>
</tr>
<tr>
<td>rules</td>
<td>属性值</td>
<td>表格内边框显示方式</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>不显示外侧边框。</td>
</tr>
<tr>
<td>above</td>
<td>显示上部的外侧边框。</td>
</tr>
<tr>
<td>below</td>
<td>显示下部的外侧边框。</td>
</tr>
<tr>
<td>hsides</td>
<td>显示上部和下部的外侧边框。</td>
</tr>
<tr>
<td>vsides</td>
<td>显示左边和右边的外侧边框。</td>
</tr>
<tr>
<td>lhs</td>
<td>显示左边的外侧边框。</td>
</tr>
<tr>
<td>rhs</td>
<td>显示右边的外侧边框。</td>
</tr>
<tr>
<td>box</td>
<td>在所有四个边上显示外侧边框。</td>
</tr>
<tr>
<td>border</td>
<td>在所有四个边上显示外侧边框。</td>
</tr>
</tbody>
</table>
<p><code>frame</code> 属性有以下几个值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>不显示外侧边框</td>
</tr>
<tr>
<td>above</td>
<td>显示上部的外侧边框</td>
</tr>
<tr>
<td>below</td>
<td>显示下部的外侧边框</td>
</tr>
<tr>
<td>hsides</td>
<td>显示上部和下部的外侧边框</td>
</tr>
<tr>
<td>vsides</td>
<td>显示左边和右边的外侧边框</td>
</tr>
<tr>
<td>lhs</td>
<td>显示左边的外侧边框</td>
</tr>
<tr>
<td>rhs</td>
<td>显示右边的外侧边框</td>
</tr>
<tr>
<td>box</td>
<td>在所有四个边上显示外侧边框</td>
</tr>
<tr>
<td>border</td>
<td>在所有四个边上显示外侧边框</td>
</tr>
</tbody>
</table>
<p><code>rules</code> 属性有以下几个值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>没有线条</td>
</tr>
<tr>
<td>groups</td>
<td>位于行组和列组之间的线条</td>
</tr>
<tr>
<td>rows</td>
<td>位于行之间的线条</td>
</tr>
<tr>
<td>cols</td>
<td>位于列之间的线条</td>
</tr>
<tr>
<td>all</td>
<td>位于行和列之间的线条</td>
</tr>
</tbody>
</table>
<h2 id="tr-常用属性"><a href="#tr-常用属性" class="headerlink" title="tr 常用属性"></a>tr 常用属性</h2><table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>align</td>
<td>left、center、right、justify、char</td>
<td>行内容水平对齐</td>
</tr>
<tr>
<td>valign</td>
<td>top、middle、bottom、baseline</td>
<td>行内容垂直对齐</td>
</tr>
<tr>
<td>bgcolor</td>
<td>RGB、Hex、英文名</td>
<td>行的颜色</td>
</tr>
</tbody>
</table>
<h2 id="colspan-rowspan-跨行跨列"><a href="#colspan-rowspan-跨行跨列" class="headerlink" title="colspan rowspan 跨行跨列"></a>colspan rowspan 跨行跨列</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">bgcolor</span>=<span class="string">"pink"</span> <span class="attr">cellpadding</span>=<span class="string">"10"</span> <span class="attr">rules</span>=<span class="string">"rows"</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">frame</span>=<span class="string">"vsides"</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>2<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>3<span class="tag">&lt;/<span class="name">th</span>&gt;</span> <span class="tag">&lt;<span class="name">th</span>&gt;</span>4<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">"2"</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">td</span>&gt;</span>data<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用 <code>&lt;colspan&gt; &lt;rowspan&gt;</code> 时，需特别注意，要去除被覆盖的单元格，否则会造成单元格数量错误。</strong></p>
<h2 id="表格嵌套"><a href="#表格嵌套" class="headerlink" title="表格嵌套"></a>表格嵌套</h2><p><strong>当表结构很复杂时，有时会用到表格的嵌套，表格嵌套需有完整的表格结构，且必须在 <code>&lt;td&gt;</code> 标签内。</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span><span class="attr">s</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>2014<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>上半年<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>下半年<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>8000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>9000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>12000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="表格布局"><a href="#表格布局" class="headerlink" title="表格布局"></a>表格布局</h2><p>在使用表格布局时，要尽量少使用表格嵌套和跨行跨列，过多的使用会让维护成本变高。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--网页头部内容--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>使用表格进行网页布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content - Type"</span> <span class="attr">content</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">bgcolor</span>=<span class="string">"#f2f2f2"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"80"</span> <span class="attr">bgcolor</span>=<span class="string">"#14191e"</span>&gt;</span><span class="comment">&lt;!--页头--&gt;</span>		</div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"10"</span>&gt;</span><span class="comment">&lt;!--上空行--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--主体内容--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">width</span>=<span class="string">"1024"</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"240"</span> <span class="attr">valign</span>=<span class="string">"top"</span>&gt;</span><span class="comment">&lt;!--主体内容左侧--&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></div><div class="line">								<span class="tag">&lt;<span class="name">tbody</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">bgcolor</span>=<span class="string">"#ffffff"</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">									<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">										<span class="tag">&lt;<span class="name">td</span> <span class="attr">height</span>=<span class="string">"60"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">									<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">								<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></div><div class="line">							<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"20"</span>&gt;</span><span class="comment">&lt;!--主体内容空隙--&gt;</span></div><div class="line"></div><div class="line">						<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">						<span class="tag">&lt;<span class="name">td</span> <span class="attr">width</span>=<span class="string">"764"</span> <span class="attr">bgcolor</span>=<span class="string">"#ffffff"</span>&gt;</span><span class="comment">&lt;!--主体内容右侧--&gt;</span></div><div class="line">							<span class="tag">&lt;<span class="name">p</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">						<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">					<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"10"</span>&gt;</span><span class="comment">&lt;!--下空行--&gt;</span>	 </div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">tr</span> <span class="attr">height</span>=<span class="string">"150"</span> <span class="attr">bgcolor</span>=<span class="string">"#14191e"</span>&gt;</span><span class="comment">&lt;!--页尾--&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 表格主要由以下标签组成：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格的表头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格的行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格单元&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;colgroup&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义表格列的组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;col&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义用于表格列的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;代码演示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--创建两行三列的表格--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;border&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;50%&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;caption&lt;/span&gt;&amp;gt;&lt;/span&gt;前端工程师平均工资&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;caption&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;城市&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2014&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2014&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2015&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2016&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;城市&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;上半年&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;下半年&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2015&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;2016&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;th&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;北京&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;上海&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;合计&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;data&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML - 网页结构</title>
    <link href="http://yoursite.com/2017/05/03/HTML%20-%20%E7%BD%91%E9%A1%B5%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/05/03/HTML - 网页结构/</id>
    <published>2017-05-02T18:24:00.000Z</published>
    <updated>2017-07-10T11:40:46.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>&lt;div&gt;</code> 和 <code>&lt;span&gt;</code> 可以将 HTML 元素组合起来，大多数 HTML 元素被定义为块级元素或内联元素。块级元素在浏览器显示时，通常会以新行来开始和结束，例如以下标签：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--标题--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--段落--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>		</div><div class="line"><span class="comment">&lt;!--无序列表--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>	</div><div class="line"><span class="comment">&lt;!--表格--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>内联元素在显示时通常不会以新行开始，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--加粗--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>		</div><div class="line"><span class="comment">&lt;!--单元格--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>	</div><div class="line"><span class="comment">&lt;!--超链接和锚点--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>		</div><div class="line"><span class="comment">&lt;!--图片--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span></div></pre></td></tr></table></figure>
   <a id="more"></a>
<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p><code>&lt;div&gt;</code> 可用于组合其他 HTML 元素的容器。<code>&lt;div&gt;</code> 元素没有特定的含义，除此之外，由于它属于块级元素，浏览器会在其前后显示折行。如果与 <code>CSS</code> 一同使用，<code>&lt;div&gt;</code> 元素可用于对大的内容块设置样式属性。</p>
<p><code>&lt;div&gt;</code> 元素的另一个常见的用途是文档布局。它取代了使用表格定义布局的老式方法。使用 <code>&lt;table&gt;</code> 元素进行文档布局不是表格的正确用法。<code>&lt;table&gt;</code> 元素的作用是显示表格化的数据。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--div标签--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--div用了三行--&gt;</span></div></pre></td></tr></table></figure>
<h2 id="内联元素"><a href="#内联元素" class="headerlink" title="内联元素"></a>内联元素</h2><p><code>&lt;span&gt;</code> 可用作文本的容器。<code>&lt;span&gt;</code> 元素也没有特定的含义。当与 <code>CSS</code> 一同使用时，<code>&lt;span&gt;</code> 元素可用于为部分文本设置样式属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--span标签--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://images.apple.com/v/home/di/images/row-promos/iphone-7_large.jpg"</span> <span class="attr">width</span>=<span class="string">"200"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--span 用了一行--&gt;</span></div></pre></td></tr></table></figure>
<h2 id="标签嵌套规则"><a href="#标签嵌套规则" class="headerlink" title="标签嵌套规则"></a>标签嵌套规则</h2><p><strong>块级元素可以包含行内元素和某些块级元素</strong>，其中 <code>&lt;div&gt;</code> 元素可以包括几乎所有的 HTML 元素。<strong>行内元素不能包含块级元素</strong>，只能包含其他的行内元素。<code>&lt;p&gt;</code> 标签虽然是块级元素，但是他不能包含其他的块级元素，块级元素与块级元素并列，行内元素和行内元素并列。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--正确，h1 和 p 都是块级元素，因此可以在同一层级--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> 				</div><div class="line"><span class="comment">&lt;!--正确，span 和 a 都是行内元素，因此可以在同一层级--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>		</div><div class="line"><span class="comment">&lt;!--错误，h1 是块级元素，span 是行内元素，因此不能在同一层级--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 可以将 HTML 元素组合起来，大多数 HTML 元素被定义为块级元素或内联元素。块级元素在浏览器显示时，通常会以新行来开始和结束，例如以下标签：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--标题--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--段落--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--无序列表--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--表格--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;table&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;内联元素在显示时通常不会以新行开始，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--加粗--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--单元格--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;td&lt;/span&gt;&amp;gt;&lt;/span&gt;	&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--超链接和锚点--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;		&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--图片--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML - 基本元素</title>
    <link href="http://yoursite.com/2017/05/02/HTML%20-%20%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0/"/>
    <id>http://yoursite.com/2017/05/02/HTML - 基本元素/</id>
    <published>2017-05-01T18:24:00.000Z</published>
    <updated>2017-07-10T11:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 主要由三大部分组成：</p>
<ul>
<li>头部信息，即 <code>&lt;head&gt;</code> 标签；</li>
<li>网页内容，即 <code>&lt;body&gt;</code> 标签；</li>
<li>HTML 文件，即 <code>&lt;html&gt;</code> 标签；</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">网页主体内容</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>HTML 是由一个个元素组成，元素就是一个一个的标签，例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上这些都是 HTML 元素。</p>
   <a id="more"></a>
<h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><p><strong>属性为 HTML 元素提供附加信息。</strong>HTML 标签可以拥有属性。属性提供了有关 HTML 元素的更多的信息。</p>
<p>属性总是以名称/值对的形式出现，属性总是在 HTML 元素的<strong>开始标签</strong>中规定。</p>
<p>属性值应该始终被包括在引号内。双引号是最常用的，不过使用单引号也没有问题。</p>
<p>在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></div><div class="line">网页主体内容</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上面的 <code>bgcolor=&quot;red&quot;</code> 就是一个 HTML 属性。</p>
<h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello html!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>/*p是段落*/</div><div class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span> <span class="comment">&lt;!--hr是水平线--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h2><p>建立符合标准的网页，需要所有网页中的内容在浏览器中正确一致的显示，我们需要告诉浏览器你要使用 HTML 或者 XML 的哪个版本。所以我们需要声明 <code>&lt;!DOCTYPE&gt;</code> 类型。</p>
<p><code>&lt;!DOCTYPE&gt;</code> 必须放在 HTML 文档的第一行；</p>
<p><code>&lt;!DOCTYPE&gt;</code> 声明不是 HTML 的标签；</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>HELLO,everyone.This is my first page!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="网页编码"><a href="#网页编码" class="headerlink" title="网页编码"></a>网页编码</h2><p>有时我们编写的网页会出现中文乱码的情况，这是因为我们没有告诉浏览器我们使用的语言和编码形式。这种情况可以在 <code>&lt;head&gt;&lt;/head&gt;</code> 中使用 <code>&lt;meta/&gt;</code> 标签设定网页的编码形式。</p>
<p>国内常用的编码形式是 <code>UTF-8</code> 和 <code>GB2312</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--网页头部内容--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>文字和段落标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content - Type"</span> <span class="attr">content</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--网页主体内容--&gt;</span></div><div class="line">	超文本</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="文本和段落"><a href="#文本和段落" class="headerlink" title="文本和段落"></a>文本和段落</h2><p>HTML 中对文本的层次处理大致是使用下面的几种标签：</p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>标题</td>
<td><code>&lt;h1&gt;&lt;/h1&gt; ~ &lt;h6&gt;&lt;/h6&gt;</code></td>
</tr>
<tr>
<td>段落</td>
<td><code>&lt;p&gt;&lt;/p&gt;</code></td>
</tr>
<tr>
<td>换行</td>
<td><code>&lt;br/&gt;</code></td>
</tr>
<tr>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
</tr>
<tr>
<td>与编辑器中相同的格式</td>
<td><code>&lt;pre&gt;&lt;/pre&gt;</code></td>
</tr>
</tbody>
</table>
<p>上面我们学到，标签就是元素，元素可以有属性来提供附加信息，文本处理方面也有一个重要的属性，也就是对齐属性。对齐的 key 是 <code>align</code>，有以下几个 value：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左对齐</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>justify</td>
<td>对行进行伸展，这样每行都可以有相等的长度。</td>
</tr>
</tbody>
</table>
<h2 id="修饰符和特殊符号"><a href="#修饰符和特殊符号" class="headerlink" title="修饰符和特殊符号"></a>修饰符和特殊符号</h2><p>HTML 中常用的修饰符号有：</p>
<table>
<thead>
<tr>
<th>标签名</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>水平线</td>
<td><code>&lt;hr/&gt;</code></td>
</tr>
<tr>
<td>斜体</td>
<td><code>&lt;i&gt;&lt;/i&gt; &lt;em&gt;&lt;/em&gt;</code></td>
</tr>
<tr>
<td>加粗</td>
<td><code>&lt;b&gt;&lt;/b&gt; &lt;strong&gt;&lt;/strong&gt;</code></td>
</tr>
<tr>
<td>下标</td>
<td><code>&lt;sub&gt;</code></td>
</tr>
<tr>
<td>上标</td>
<td><code>&lt;sup&gt;</code></td>
</tr>
<tr>
<td>下划线</td>
<td><code>&lt;ins&gt;</code></td>
</tr>
<tr>
<td>删除线</td>
<td><code>&lt;del&gt;</code></td>
</tr>
</tbody>
</table>
<p>水平线有以下几种常用属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>水平线宽度，可以是像素或百分比。</td>
</tr>
<tr>
<td>color</td>
<td>水平线颜色。</td>
</tr>
<tr>
<td>align</td>
<td>水平线居中对齐。</td>
</tr>
<tr>
<td>noshade</td>
<td>水平线无阴影。</td>
</tr>
</tbody>
</table>
<p>常用的特殊符号有：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>显示结果</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&amp;lt;</code></td>
<td>&lt;</td>
<td>小于号或显示标记</td>
</tr>
<tr>
<td><code>&amp;gt;</code></td>
<td>&gt;</td>
<td>大于号或显示标记</td>
</tr>
<tr>
<td><code>&amp;reg;</code></td>
<td>®</td>
<td>已注册</td>
</tr>
<tr>
<td><code>&amp;copy;</code></td>
<td>©</td>
<td>版权</td>
</tr>
<tr>
<td><code>&amp;trade;</code></td>
<td>™</td>
<td>商标</td>
</tr>
<tr>
<td><code>&amp;nbsp;</code></td>
<td>Space</td>
<td>不断行的空白</td>
</tr>
</tbody>
</table>
<h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><p>HTML 列表分为有序列表和无序列表，无序列表使用 <code>&lt;ul&gt;&lt;/ul&gt;</code> 包裹，列表项使用 <code>&lt;li&gt;&lt;/li&gt;</code> 包裹，无序列表中经常用的是属性是 <code>type</code>，代表列表项前面的符号，有圆形、方形、空心圆几种：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--网页头部内容--&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>文字和段落标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content - Type"</span> <span class="attr">content</span>=<span class="string">"text/html"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">bgcolor</span>=<span class="string">"gray"</span>&gt;</span></div><div class="line">	<span class="comment">&lt;!--网页主体内容--&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"square"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"circle"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>春<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>夏<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>秋<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>冬<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有序列表使用 <code>&lt;ol&gt;&lt;/ol&gt;</code> 包裹，列表项同样使用 <code>&lt;li&gt;&lt;/li&gt;</code> 包裹，有序列表中的 <code>type</code> 有以下几个值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>阿拉伯数字排序。</td>
</tr>
<tr>
<td>a</td>
<td>小写英文字母排序。</td>
</tr>
<tr>
<td>A</td>
<td>大写英文字母排序。</td>
</tr>
<tr>
<td>i</td>
<td>小写罗马数字排序。</td>
</tr>
<tr>
<td>I</td>
<td>大写罗马数字排序。</td>
</tr>
</tbody>
</table>
<h2 id="HTML-路径"><a href="#HTML-路径" class="headerlink" title="HTML 路径"></a>HTML 路径</h2><p>HTML 的路径分为相对路径和绝对路径，绝对路径是以本地的盘符或网络主机开始的路径，相对路径是资源文件相对于网页的路径，相对路径有以下几种描述：</p>
<table>
<thead>
<tr>
<th>路径</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>同级目录</td>
<td>filename 或  ./filename</td>
</tr>
<tr>
<td>上级目录</td>
<td>../filename</td>
</tr>
<tr>
<td>下级目录</td>
<td>foldername/filename</td>
</tr>
<tr>
<td>上级目录的上级目录</td>
<td>../../filename</td>
</tr>
<tr>
<td>下级目录的下级目录</td>
<td>foldername/foldername/filename</td>
</tr>
</tbody>
</table>
<h2 id="图像和超链接"><a href="#图像和超链接" class="headerlink" title="图像和超链接"></a>图像和超链接</h2><p>HTML 中显示一张图片使用 <code>&lt;img src=&quot;&quot; alt=&quot;&quot; .../&gt;</code> 标签，<code>&lt;img/&gt;</code> 标签有以以下几个常用属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>src</td>
<td>图片 url</td>
</tr>
<tr>
<td>alt</td>
<td>图片无法显示时的代替文字</td>
</tr>
<tr>
<td>height</td>
<td>像素或百分比</td>
</tr>
<tr>
<td>width</td>
<td>像素或百分比</td>
</tr>
</tbody>
</table>
<p>超链接标签的语语法是 <code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code>，<code>href</code> 可以是内部标签，也可以是外部标签。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"baidu.com"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.png"</span> <span class="attr">width</span>=<span class="string">"60%"</span> <span class="attr">atl</span>=<span class="string">"example"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;a&gt;&lt;/a&gt;</code> 的常用属性有以下几种：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>href</td>
<td>链接地址或 <code>#锚点名</code> 或空链接 <code>#</code>。</td>
</tr>
<tr>
<td>target</td>
<td>链接的目标窗口，有 <code>self、blank、top、parent</code> 等值。</td>
</tr>
<tr>
<td>title</td>
<td>链接提示文字。</td>
</tr>
<tr>
<td>name</td>
<td>链接命名，一般用于锚点。</td>
</tr>
</tbody>
</table>
<h3 id="打开另一个网页中的锚点"><a href="#打开另一个网页中的锚点" class="headerlink" title="打开另一个网页中的锚点"></a>打开另一个网页中的锚点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">页面A</div><div class="line">&lt;a href=&quot;页面B#锚点名&quot;&gt;&lt;/a&gt;</div><div class="line">页面B</div><div class="line">&lt;a name=&quot;锚点名&quot;&gt;&lt;/a&gt;</div></pre></td></tr></table></figure>
<h3 id="邮件链接"><a href="#邮件链接" class="headerlink" title="邮件链接"></a>邮件链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:邮箱地址"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>mailto:name@email.com</td>
<td>向 email 地址发邮件</td>
</tr>
<tr>
<td>cc=name@email.com</td>
<td>抄送邮件</td>
</tr>
<tr>
<td>bcc=name@email.com</td>
<td>暗送邮件</td>
</tr>
<tr>
<td>subject=subject text</td>
<td>email 的题目</td>
</tr>
<tr>
<td>body=body text</td>
<td>email 的内容</td>
</tr>
<tr>
<td>?</td>
<td>和浏览器地址操作一样，第一个参数符号是？</td>
</tr>
<tr>
<td>&amp;</td>
<td>其他参数符号是&amp;</td>
</tr>
</tbody>
</table>
<h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../file.zip"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 主要由三大部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头部信息，即 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 标签；&lt;/li&gt;
&lt;li&gt;网页内容，即 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 标签；&lt;/li&gt;
&lt;li&gt;HTML 文件，即 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 标签；&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;标题&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;网页主体内容&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;HTML 是由一个个元素组成，元素就是一个一个的标签，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hr&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上这些都是 HTML 元素。&lt;/p&gt;
    
    </summary>
    
      <category term="HTML" scheme="http://yoursite.com/categories/HTML/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>iOS事件 - 响应者链和事件分发</title>
    <link href="http://yoursite.com/2017/04/08/iOS%E4%BA%8B%E4%BB%B6%20-%20%E5%93%8D%E5%BA%94%E8%80%85%E9%93%BE%E5%92%8C%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    <id>http://yoursite.com/2017/04/08/iOS事件 - 响应者链和事件分发/</id>
    <published>2017-04-07T18:24:00.000Z</published>
    <updated>2017-07-08T11:54:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>响应者对象就是可以响应事件并对事件作出处理。在 iOS 中，存在 <code>UIResponder</code> 类，它定义了响应者对象的所有方法。<code>UIApplication</code>、<code>UIView</code> 等类都继承了 <code>UIResponder</code> 类，<code>UIWindow</code> 和 <code>UIKit</code> 中的控件因为继承了 <code>UIView</code>，所以也间接继承了 <code>UIResponder</code> 类，这些类的实例都可以当作响应者。</p>
<p>当前接受触摸的响应者对象被称为第一响应者，即表示当前该对象正在与用户交互，它是响应者链的开端。</p>
<p>响应者链表示一系列的响应者对象。事件被交由第一响应者对象处理，如果第一响应者不处理，事件被沿着响应者链向上传递，交给下一个响应者。</p>
<p>一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件被交由它处理，如果它不处理，事件就会被传递给它的视图控制器对象(如果存在)，然后是它的父视图对象(如果存在)，以此类推，直到顶层视图。</p>
<p>接下来会沿着顶层视图(<code>top view</code>)到窗口(<code>UIWindow</code>)再到程序(<code>UIApplication</code>)。如果整个过程都没有响应这个事件，该事件就被丢弃。</p>
<p>一般情况下，在响应者链中只要由对象处理事件，事件就停止传递。但有时候可以在视图的响应方法中根据一些条件判断来决定是否需要继续传递事件。</p>
<a id="more"></a>
<h2 id="事件分发"><a href="#事件分发" class="headerlink" title="事件分发"></a>事件分发</h2><p>视图对触摸事件是否需要作处回应可以通过设置视图的 <code>userInteractionEnabled</code> 属性。默认状态为 YES，如果设置为 NO，可以阻止视图接收和分发触摸事件。除此之外，当视图被隐藏或者透明也不会接收事件。</p>
<p>不过这个属性只对视图有效，如果想要整个程序都不响应事件，可以调用 <code>UIApplication</code> 的 <code>beginIngnoringInteractionEvents</code> 方法来完全停止事件接收和分发。通过 <code>endIngnoringInteractionEvents</code> 方法来恢复让程序接收和分发事件。</p>
<p>如果要让视图接收多点触摸，需要设置它的 <code>multipleTouchEnabled</code> 属性为 YES，默认状态下这个属性值为NO，即视图默认不接收多点触摸，整个 iOS 触摸事件从产生到寂灭大致如下图：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/uitouchflow.png" alt="img"></p>
<h3 id="起始阶段"><a href="#起始阶段" class="headerlink" title="起始阶段"></a>起始阶段</h3><ol>
<li>CPU 处于睡眠状态，等待事件发生；</li>
<li>手指触摸屏幕</li>
</ol>
<h3 id="系统响应阶段"><a href="#系统响应阶段" class="headerlink" title="系统响应阶段"></a>系统响应阶段</h3><ol>
<li>屏幕硬件感应到输入，并将感应到的事件传递给输入输出驱动 <code>IOKit</code>；</li>
<li><code>IOKit.framework</code> 封装整个触摸事件为 <code>IOHIDEvent</code> 对象；</li>
<li><code>IOKit.framework</code> 通过 IPC 将事件转发给 <code>SpringBoard.app</code>；</li>
</ol>
<blockquote>
<p><code>SpringBoard.app</code> 就是 iOS 的系统桌面，当触摸事件发生时，也只有负责管理桌面的 <code>SpringBoard.app</code> 才知道如何正确的响应。因为触摸发生时，有可能用户正在桌面翻页找 App，也有可能正处于在微信中刷朋友圈。</p>
</blockquote>
<p>以上是系统层的响应，系统感应到外界的输入，并将相应的输入封装成比较概括的 <a href="http://iphonedevwiki.net/index.php/IOHIDFamily" target="_blank" rel="external"><code>IOHIDEvent</code></a> 对象，然后 <code>UIKit</code> 通过 <code>IOHIDEvent</code> 的类型，判断出相应事件应该由 <a href="http://iphonedevwiki.net/index.php/`SpringBoard.app`" target="_blank" rel="external"><code>SpringBoard .app</code></a> 处理，直接通过 <code>Mach Port(IPC进程间通信)</code> 转发给 <code>SpringBoard.app</code>。</p>
<h3 id="桌面响应阶段"><a href="#桌面响应阶段" class="headerlink" title="桌面响应阶段"></a>桌面响应阶段</h3><p><code>SpringBoard.app</code> 主线程 <code>Runloop</code> 收到 <a href="https://developer.apple.com/reference/`IOKit`" target="_blank" rel="external"><code>IOKit.framework</code></a> 转发来的消息苏醒，并触发对应 <code>Mach Port</code> 的 <code>Source1</code> 回调 <code>__IOHIDEventSystemClientQueueCallback()</code>。</p>
<p>如果 <code>SpringBoard.app</code> 监测到有 App 在前台，即 xxxx.app，<code>SpringBoard.app</code> 通过 <code>Mach Port(IPC进程间通信)</code> 转发给 xxxx.app，如果 <code>SpringBoard.app</code> 监测到监测无前台 App，则 <code>SpringBoard.app</code> 进入 App 内部响应阶段的第二段，即触发 <code>Source0</code> 回调。</p>
<h4 id="Source1-事件响应"><a href="#Source1-事件响应" class="headerlink" title="Source1 事件响应"></a>Source1 事件响应</h4><p>苹果注册了一个 <code>Source1</code> 用来接收系统事件，其回调函数为 <code>__IOHIDEventSystemClientQueueCallback()</code>。</p>
<p>当一个硬件事件，如触摸/锁屏/摇晃等发生后，首先由 <code>IOKit.framework</code> 生成一个 <code>IOHIDEvent</code> 事件并由 <code>SpringBoard</code> 接收。<code>SpringBoard</code> 只接收按键(锁屏/静音等)，触摸，加速，距离传感器等几种 Event，随后用 <code>Mach Port</code> 转发给需要的 App 进程。随后苹果注册的那个 <code>Source1</code> 就会触发回调，并调用 <code>_UIApplicationHandleEventQueue()</code> 进行应用内部的分发。</p>
<p><code>_UIApplicationHandleEventQueue()</code> 会把 <code>IOHIDEvent</code> 处理并包装成 <code>UIEvent</code> 进行处理或分发，其中包括识别 UIGesture，处理屏幕旋转，发送给 <code>UIWindow</code> 等。通常事件比如 <code>UIButton</code> 点击、<code>touchesBegin/Move/End/Cancel</code> 事件都是在这个回调中完成的。</p>
<h4 id="Source0-手势识别"><a href="#Source0-手势识别" class="headerlink" title="Source0 手势识别"></a>Source0 手势识别</h4><p>当上面的 <code>_UIApplicationHandleEventQueue()</code> 识别了一个手势时，其首先会调用 <code>Cancel</code> 将当前的 <code>touchesBegin/Move/End</code> 系列回调打断。随后系统将对应的 <code>UIGestureRecognizer</code> 标记为待处理。</p>
<p>苹果注册了一个 <code>Observer</code> 监测 <code>BeforeWaiting (Loop即将进入休眠)</code> 事件，这个 <code>Observer</code> 的回调函数是 <code>_UIGestureRecognizerUpdateObserver()</code>，其内部会获取所有刚被标记为待处理的 <code>GestureRecognizer</code>，并执行 <code>GestureRecognizer</code> 的回调。</p>
<p>当有 <code>UIGestureRecognizer</code> 的变化(创建/销毁/状态改变)时，这个回调都会进行相应处理。</p>
<h3 id="App内部响应阶段"><a href="#App内部响应阶段" class="headerlink" title="App内部响应阶段"></a>App内部响应阶段</h3><ol>
<li>前台 App 主线程 <code>Runloop</code> 收到 <code>SpringBoard.app</code> 转发来的消息苏醒，并触发对应 <code>Mach Port</code> 的 <code>Source1</code> 回调 <code>__IOHIDEventSystemClientQueueCallback()</code> ；</li>
<li><code>Source1</code> 回调内部触发 <code>Source0</code> 回调 <code>__UIApplicationHandleEventQueue()</code> ；</li>
<li><code>Soucre0</code> 回调内部，封装 <code>IOHIDEvent</code> 为 <code>UIEvent</code> ；</li>
<li>平时开发熟悉的触摸事件响应链从这开始了；</li>
<li>通过递归调用<code>UIView</code>层级的 <code>hitTest(_:with:)</code> ，结合 <code>point(inside:with:)</code> 找到 <code>UIEvent</code> 中每一个 <code>UITouch</code> 所属的 <code>UIView</code>，其实是想找到离触摸事件点最近的那个<code>UIView</code>。</li>
<li>这个过程是从 <code>UIView</code> 层级的最顶层往最底层递归查询，但这不是 <code>UIResponder</code> 响应链，事件响应是在 <code>UIEvent</code> 中每一个 <code>UITouch</code> 所属的 <code>UIView</code> 都确定之后方才开始。</li>
</ol>
<p>但需要注意，以下三种情况 <code>UIView</code> 的 <code>hitTest(_:with:)</code> 不会被调用，也导致其子 <code>UIView</code> 的 <code>hitTest(_:with:)</code> 不会被调用，而之后响应事件是下向上传递的，这直接导致以下三种情况的 <code>UIView</code> 及其子 <code>UIView</code> 不接收任何触摸事件：</p>
<ol>
<li>userInteractionEnabled = NO</li>
<li>hidden = YES</li>
<li>alpha = 0.0~0.01之间</li>
</ol>
<blockquote>
<p>UIImageView 的 userInteractionEnabled 默认为NO，因此 UIImageView 以及它的子控件默认是不接收触摸事件的。</p>
</blockquote>
<p>当把断点打在某个 <code>UIView</code> <code>hitTest(_:with:)</code> 中时，对应的调用堆栈如下：<br><img src="http://oboehz2ag.bkt.clouddn.com/calltraceoftouching.png" alt="img"></p>
<ol>
<li><p>根据围绕 <code>UITouch</code> 所属的 <code>UIView</code> 及其父视图 <code>UIView</code> 的 <code>UIGestureRecognizer</code>，来确定一个 <code>UITouch</code> 的 <code>UIGestureRecognizer</code>；</p>
</li>
<li><p><code>UITouch</code> 所属的 <code>UIView</code> 和 <code>gestureRecognizers</code> 收到此 <code>UITouch</code> 和相应的 <code>UIEvent</code>，并按照 <code>UITouch</code> 所处的状态调用四大 <code>UITouch</code> 方法中的一个，事件响应开始；</p>
</li>
<li><p>对于 <code>UIView</code> 收到的 <code>UITouch</code> 事件，四大 <code>UITouch</code> 事件都是如此，则会按照 <code>UIResponder</code> 响应链一直往上传递，直到某个 <code>UIResponder</code> 因为主动响应触摸事件，切断了响应链，即不调用下一个 <code>UIResponder</code> 的响应方法，如果一直没有 <code>UIResponder</code> 做响应处理，则这些 <code>UITouch</code> 到达最后的响应者即 <code>UIApplication</code> 后，就被吃掉消失。</p>
</li>
<li><p>如果在事件响应过程中，有 <code>UIGestureRecognizer</code> 成功识别，则此 <code>UIGestureRecognizer</code> 将独自占有所需要的 <code>UITouch</code>，这些 <code>UITouch</code> 所属的 <code>UIView</code> 及其他的 <code>UIGestureRecognizer</code> 的 <code>touchesCancelled(_:with:)</code> 方法将调用。</p>
<p>如果在手势的代理中设置可以同时识别两个手势，则允许同时识别的手势均可以收到所需要的 <code>UITouch</code>事件，但与识别成功的 <code>UIGestureRecognizer</code> 无关的 <code>UITouch</code> 则会继续按照上述传递逻辑传递。也即允许两个手势同时识别，只要所占有的 <code>UITouch</code> 不相同。</p>
</li>
<li><p>如果 <code>UIGestureRecognizer</code> 识别成功，则调用相应的 action，处理对应的逻辑。如果某个 <code>UIResponder</code> 主动响应了触摸事件，则根据其本身的响应逻辑处理对应的业务，<code>UIControl</code> 都是主动响应并切断 <code>UITouch</code> 的向上传递的。</p>
</li>
<li><p><code>UITouch</code> 事件流动完毕，整个系统重新进入睡眠等待下一个事件。</p>
</li>
</ol>
<h2 id="响应者链"><a href="#响应者链" class="headerlink" title="响应者链"></a>响应者链</h2><p>通常，一个 iOS 应用中，在一块屏幕上通常有很多的 UI 控件，也就是有很多的 View，那么当一个事件发生时，如何来确定是哪个 View 响应了这个事件呢，接下来我们就一起来看看。</p>
<h3 id="寻找hit-test-view"><a href="#寻找hit-test-view" class="headerlink" title="寻找hit-test view"></a>寻找<code>hit-test view</code></h3><p>什么是 <code>hit-test view</code> 呢？简单来说就是你触发事件所在的那个 View，寻找 <code>hit-test view</code> 的过程就叫做 <code>Hit-Testing</code>。</p>
<p>发生触摸事件后，系统会将该事件加入到一个由 <code>UIApplication</code> 管理的事件队列中，为什么是队列而不是栈呢？因为队列是先进先出，触摸的处理也是顺序执行的。</p>
<p><code>UIApplication</code> 会从事件队列中取出最前面的事件，并将事件分发下去以便处理，通常，先发送事件给应用程序的主窗口 <code>keyWindow</code>，主窗口会在视图层次结构中找到一个最合适的视图来处理触摸事件，这也是整个事件处理过程的第一步。找到合适的视图控件后，就会调用视图控件的 <code>touches</code> 方法来作具体的事件处理：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">touchesBegan…</div><div class="line">touchesMoved…</div><div class="line">touchedEnded…</div></pre></td></tr></table></figure>
<p>那么响应链是如何找到最合适的控件来处理事件的呢？</p>
<ol>
<li>自己是否能接收触摸事件；</li>
<li>触摸点是否在自己身上；</li>
<li>从后往前遍历子控件数组，重复前面的两个步骤；</li>
<li>如果没有符合条件的子控件，那么就自己最适合处理；</li>
</ol>
<p>下面是 <code>hitTest</code> 实现的伪代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//调用时机：只要时间传递到此控件，就会执行 hitTest 方法</span></div><div class="line"><span class="comment">//作用:  寻找最合适的 view 给你</span></div><div class="line"><span class="comment">//UIApplication -&gt; [UIWindow hitTest:withEvent:] 寻找最合适的view告诉系统</span></div><div class="line"><span class="comment">//point:当前手指触摸的点</span></div><div class="line"><span class="comment">//point:是方法调用者坐标系上的点</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">hitTest</span><span class="params">(<span class="number">_</span> point: CGPoint, with event: `UIEvent`?)</span></span> -&gt; `<span class="type">UIView</span>`? &#123;</div><div class="line">    <span class="comment">//1.保证开启交互，如未开启，没有合适的控件</span></div><div class="line">    <span class="keyword">guard</span> isUserInteractionEnabled == <span class="literal">true</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.保证未隐藏，如隐藏，没有合适的控件</span></div><div class="line">    <span class="keyword">guard</span> isHidden == <span class="literal">false</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//3.保证透明度大于 0.01，如 &lt;= 0.01，没有合适的控件</span></div><div class="line">    <span class="keyword">guard</span> alpha &gt; <span class="number">0.01</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//4.保证触摸点在自己的视图内，如不在，没有合适的控件</span></div><div class="line">    <span class="keyword">guard</span> <span class="keyword">self</span>.point(inside: point, with: event) == <span class="literal">true</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//5.便利控件下的子控件，如有更合适的子控件，返回</span></div><div class="line">    <span class="keyword">for</span> subView <span class="keyword">in</span> <span class="keyword">self</span>.subviews &#123;</div><div class="line">        <span class="keyword">let</span> subPoint = <span class="keyword">self</span>.convert(point, to: subView)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> fitView = subView.hitTest(subPoint, with: event) &#123;</div><div class="line">            <span class="keyword">return</span> fitView</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//6. 如没有更合适的子控件，返回自身</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在查找最合适的 View 的过程中用到了两个最重要的方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (<span class="type">UIView</span> *)hitTest:(<span class="type">CGPoint</span>)point withEvent:(<span class="type">UIEvent</span> *)event</div><div class="line">- (<span class="type">BOOL</span>)pointInside:(<span class="type">CGPoint</span>)point withEvent:(<span class="type">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<h3 id="hitTest-withEvent"><a href="#hitTest-withEvent" class="headerlink" title="hitTest:withEvent:"></a>hitTest:withEvent:</h3><p>只要事件一传递给一个控件，这个控件就会调用自己的 <code>hitTest:withEvent:</code> 方法，用于寻找并返回最合适的 View， <strong>它不管这个控件能不能处理事件也不管点是否在 View 上，事件都会先传给这 View 再调用这个 View 的 <code>hitTest:withEvent:</code> 方法。不管点击哪里，最合适的 View 都是 hitTest 返回的那个 View。</strong></p>
<p>利用这个特性可以拦截事件的处理：</p>
<blockquote>
<p>事件传递给谁就会调用这个 View 的 <code>hitTest:withEvent:</code> 方法，如果返回 <code>nil</code>，那么该方法的控件本身和子控件不是最合适的 View，那么最合适的 View 就是该控件的父控件。</p>
</blockquote>
<p>如果想让 A 成为最合适的 View 就重写 A 的父控件 B 的 <code>hitTest:withEvent:</code> 方法，或者自己的 <code>hitTest:withEvent:</code> 方法返回 <code>self</code>，建议采用第一种。</p>
<h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><ul>
<li><p>谁都不能处理事件，窗口也不能处理。</p>
<blockquote>
<p>重写 window 的 <code>hitTest：withEvent：</code> 方法返回 <code>nil</code> </p>
</blockquote>
</li>
<li><p>只能由窗口处理事件。</p>
<blockquote>
<p>控制器的 view 的 <code>hitTest：withEvent：</code> 方法返回 <code>nil</code></p>
<p>或者 window 的 <code>hitTest：withEvent：</code> 方法返回 <code>self</code></p>
</blockquote>
</li>
<li><p>返回 <code>nil</code> 的含义：</p>
<blockquote>
<p>调用当前 <code>hitTest：withEvent：</code> 方法 <code>return nil</code> 的意思是 View 不是合适的 View，子控件也不是合适的 View。如果同级的兄弟控件也没有合适的 View，那么最合适的 View 就是父控件。</p>
</blockquote>
</li>
</ul>
<h3 id="pointInside-withEvent"><a href="#pointInside-withEvent" class="headerlink" title="pointInside:withEvent"></a>pointInside:withEvent</h3><p><code>pointInside:withEvent:</code> 方法判断点在不在当前 View 上(方法调用者的坐标系上)如果返回 YES，代表点在方法调用者的坐标系上；</p>
<p>返回 NO 代表点不在方法调用者的坐标系上，那么方法调用者也就不能处理事件。我们可以重写这个方法，主动拦截事件的传递：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//作用:判断下传入过来的点在不在方法调用者的坐标系上</span></div><div class="line"><span class="comment">// point:是方法调用者坐标系上的点</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">point</span><span class="params">(inside point: CGPoint, with event: `UIEvent`?)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="响应者对象-Responsder-Object"><a href="#响应者对象-Responsder-Object" class="headerlink" title="响应者对象(Responsder Object)"></a>响应者对象(Responsder Object)</h3><p>响应者对象是能够响应并且处理事件的对象，<code>UIResponder</code> 是所有响应者对象的父类，包括 <code>UIApplication</code>、<code>UIView</code> 和 <code>UIViewController</code> 都是 <code>UIResponder</code> 的子类。也就意味着所有的 View 和 <code>ViewController</code> 都是响应者对象。</p>
<h3 id="第一响应者-First-Responder"><a href="#第一响应者-First-Responder" class="headerlink" title="第一响应者(First Responder)"></a>第一响应者(First Responder)</h3><p>第一响应者是第一个接收事件的 View 对象，我们在 Xcode 的 Interface Builder 画视图时，可以看到视图结构中就有 First Responder。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/firstresponder.png" alt="img"></p>
<p>这里的 First Responder 就是 <code>UIApplication</code> 了。另外，我们可以控制一个 View 让其成为 First Responder，通过实现 <code>canBecomeFirstResponder</code> 方法并返回 YES 可以使当前 View 成为第一响应者，或者调用 View 的 <code>becomeFirstResponder</code> 方法也可以，例如当 <code>UITextField</code> 调用该方法时会弹出键盘进行输入，此时输入框控件就是第一响应者。</p>
<h3 id="事件传递机制"><a href="#事件传递机制" class="headerlink" title="事件传递机制"></a>事件传递机制</h3><p>如上所说，如果 <code>hit-test view</code> 不能处理当前事件，那么事件将会沿着响应者链(Responder Chain)进行传递，直到遇到能处理该事件的响应者(Responsder Object)。通过下图，我们来看看两种不同情况下得事件传递机制。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/responderchain.png" alt="img"></p>
<p>左边的情况，接收事件的 <code>initial view</code> 如果不能处理该事件并且她不是顶层的 View，则事件会往它的父 View 进行传递。<code>initial view</code> 的父 View 获取事件后如果仍不能处理，则继续往上传递，循环这个过程。如果顶层的 View 还是不能处理这个事件的话，则会将事件传递给它们的 <code>ViewController</code>，如果 <code>ViewController</code> 也不能处理，则传递给 <code>UIWindow</code>，此时 <code>Window</code> 不能处理的话就将事件传递给 <code>UIApplication</code>，最后如果连 <code>Application</code> 也不能处理，则废弃该事件。</p>
<p>右边图的流程唯一不同就在于，如果当前的 <code>ViewController</code> 是有层级关系的，那么当子 <code>ViewController</code> 不能处理事件时，它会将事件继续往上传递，直到传递到其 <code>Root ViewController</code>，后面的流程就跟之前分析的一样了。</p>
<p>这就是事件响应者链的传递机制，通过这些内容，我们可以更深入的了解事件在 iOS 中得传递机制，对我们在实际开发中更好的理解事件操作的原理有很大的帮助，也对我们实现复杂布局进行事件处理时增添了多一份的理解。</p>
<h3 id="事件传递的完整过程"><a href="#事件传递的完整过程" class="headerlink" title="事件传递的完整过程"></a>事件传递的完整过程</h3><ol>
<li>先将事件对象由上往下传递(由父控件传递给子控件)，找到最合适的控件来处理这个事件；</li>
<li>调用最合适控件的 <code>touches…</code> 方法；</li>
<li>如果调用了 <code>super touches…</code> 就会将事件顺着响应者链条往上传递，传递给上一个响应者；</li>
<li>接着就会调用上一个响应者的 <code>touches….</code> 方法；</li>
</ol>
<h3 id="判断上一个响应者"><a href="#判断上一个响应者" class="headerlink" title="判断上一个响应者"></a>判断上一个响应者</h3><ol>
<li>如果当前这个 View 是控制器的 View，那么控制器就是上一个响应者；</li>
<li>如果当前这个 View 不是控制器的 View，那么父控件就是上一个响应者；</li>
</ol>
<h2 id="UIResponder"><a href="#UIResponder" class="headerlink" title="UIResponder"></a>UIResponder</h2><p>如果你观察一下 <code>UIView</code> 的子类，可以发现 3 个基类: <code>reponders</code> (响应者)，<code>views</code> (视图)和 <code>controls</code> (控件)。我们快速重温一下它们之间发生了什么。</p>
<p><code>UIResponder</code> 是 <code>UIView</code> 的父类。<code>responder</code> 能够处理触摸、手势、远程控制等事件。之所以它是一个单独的类而没有合并到 <code>UIView</code> 中，是因为 <code>UIResponder</code> 有更多的子类，最明显的就是 <code>UIApplication</code> 和 <code>UIViewController</code>。通过重写 <code>UIResponder</code> 的方法，可以决定一个类是否可以成为第一响应者，例如当前输入焦点元素。</p>
<p>iOS 中要响应事件都必须继承 <code>UIResponder</code>，且是对象，我们称之为响应者对象。 继承 <code>UIResponder</code> 的有：</p>
<ul>
<li><code>UIApplication</code></li>
<li><code>UIViewController</code></li>
<li><code>UIView</code></li>
</ul>
<p>当触摸或运动传感器等交互行为发生时，它们被发送给第一响应者，通常是一个视图。如果第一响应者没有处理，则该行为沿着响应链到达视图控制器，如果行为仍然没有被处理，则继续传递给应用。如果想监测晃动手势，可以根据需要在这 3 层中的任意位置处理。</p>
<p><code>UIResponder</code> 还允许自定义输入方法，从 <code>inputAccessoryView</code> 向键盘添加辅助视图到使用 <code>inputView</code> 提供一个完全自定义的键盘，<code>UIResponder</code> 内部提供了以下方法来处理事件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一根或者多根手指开始触摸 view，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesBegan:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//一根或者多根手指在 view 上移动，系统会自动调用 view 的下面方法(随着手指的移动，会持续调用该方法)</span></div><div class="line">- (void)touchesMoved:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//一根或者多根手指离开 view，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesEnded:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//触摸结束前，某个系统事件(例如电话呼入)会打断触摸过程，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesCancelled:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"></div><div class="line"><span class="comment">//加速计事件</span></div><div class="line">- (void)motionBegan:(<span class="type">UIEventSubtype</span>)motion withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (void)motionEnded:(<span class="type">UIEventSubtype</span>)motion withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (void)motionCancelled:(<span class="type">UIEventSubtype</span>)motion withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"></div><div class="line"><span class="comment">//远程控制事件</span></div><div class="line">- (void)remoteControlReceivedWithEvent:(<span class="type">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<h2 id="UIControl"><a href="#UIControl" class="headerlink" title="UIControl"></a>UIControl</h2><p><code>UIControl</code> 建立在视图上，增加了更多的交互支持。最重要的是，它增加了 <code>target / action</code> 模式。看一下具体的子类，我们可以看一下按钮，日期选择器，文本框等等。创建交互控件时，你通常想要子类化一个 <code>UIControl</code>。</p>
<p>一些常见的像 <code>bar buttons</code> 虽然也支持 <code>target / action</code>，和 <code>text view</code> 其实并不是 <code>UIControl</code>。</p>
<p><code>UIControl</code> 是控制对象，继承于 <code>UIView</code>，如传达用户意图的应用程序按钮和滑块的基类。你不能使用 <code>UIControl</code> 的类直接实例化控件。相反，它定义了它的所有子类的通用接口和行为结构</p>
<blockquote>
<p><code>UIControl</code> 主要包括触摸事件、加速事件、远程事件这几种。</p>
</blockquote>
<h3 id="UIControl-的常用属性"><a href="#UIControl-的常用属性" class="headerlink" title="UIControl 的常用属性"></a>UIControl 的常用属性</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控件默认是启用的。要禁用控件，可以将 enabled 属性设置为 NO，这将导致控件忽略任何触摸事件。被禁用后，控件还可以用不同的方式显示自己，比如变成灰色不可用。虽然是由控件的子类完成的，这个属性却存在于 `UIControl` 中。</span></div><div class="line"><span class="type">BOOL</span> enabled;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当用户选中控件时，`UIControl` 类会将其 selected 属性设置为 YES。子类有时使用这个属性来让控件选择自身，或者来表现不同的行为方式。</span></div><div class="line"><span class="type">BOOL</span> selected;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">BOOL</span> highlighted;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控件如何在垂直方向上布置自身的内容。</span></div><div class="line"><span class="type">UIControlContentVerticalAlignment</span> contentVerticalAlignment;    </div><div class="line"><span class="type">UIControlContentVerticalAlignmentCenter</span> <span class="comment">//居中</span></div><div class="line"><span class="type">UIControlContentVerticalAlignmentTop</span>    <span class="comment">//居顶</span></div><div class="line"><span class="type">UIControlContentVerticalAlignmentBottom</span> <span class="comment">//居下</span></div><div class="line"><span class="type">UIControlContentVerticalAlignmentFill</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//控件如何在水平方向上布置自身的内容</span></div><div class="line"><span class="type">UIControlContentHorizontalAlignment</span> contentHorizontalAlignment;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// `UIControl`状态(只读)</span></div><div class="line"><span class="type">UIControlState</span> state;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//只读</span></div><div class="line"><span class="type">BOOL</span> tracking;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是否touchInside(只读)</span></div><div class="line"><span class="type">BOOL</span> touchInside;</div></pre></td></tr></table></figure>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件通知。UIControl类提供了一个标准机制，来进行事件登记和接收。这令你可以指定你的控件在发生特定事件时，通知代理类的一个方法。</span></div><div class="line">- (<span class="type">BOOL</span>)beginTrackingWithTouch:(<span class="type">UITouch</span> *)touch withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (<span class="type">BOOL</span>)continueTrackingWithTouch:(<span class="type">UITouch</span> *)touch withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (void)endTrackingWithTouch:(<span class="type">UITouch</span> *)touch withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (void)cancelTrackingWithEvent:(<span class="type">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册一个事件</span></div><div class="line">- (void)addTarget:(id)target action:(<span class="type">SEL</span>)action forControlEvents:(<span class="type">UIControlEvents</span>)controlEvents;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//移除事件通知。要删除一个或多个事件的相应动作，可以使用`UIControl`类的removeTarget方法。使用nil值就可以将给定事件目标的所有动作删除</span></div><div class="line">- (void)removeTarget:(id)target action:(<span class="type">SEL</span>)action forControlEvents:(<span class="type">UIControlEvents</span>)controlEvents;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//取得关于一个控件所有指定动作的列表，可以使用allTargets方法。这个方法返回一个NSSet，其中包含事件的完整列表</span></div><div class="line">- (<span class="type">NSSet</span>*)allTargets;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取关于一个控件所有事件的列表</span></div><div class="line">- (<span class="type">UIControlEvents</span>)allControlEvents;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取针对某一特定事件目标的全部动作列表</span></div><div class="line">- (<span class="type">NSArray</span> *)actionsForTarget:(id)target forControlEvent:(<span class="type">UIControlEvents</span>)controlEvent;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果设计了一个自定义控件类，可以使用sendActionsForControlEvent方法，为基本的`UIControl`事件或自己的自定义事件发送通知。例如，如果你的控件值正在发生变化，就可以发送相应通知，通过控件的代码可以指定时间目标，这个通知将被传播到这些指定的目标。</span></div><div class="line">- (void)sendAction:(<span class="type">SEL</span>)action to:(id)target forEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line">- (void)sendActionsForControlEvents:(<span class="type">UIControlEvents</span>)controlEvents;</div></pre></td></tr></table></figure>
<h2 id="UIGestureRescognizer"><a href="#UIGestureRescognizer" class="headerlink" title="UIGestureRescognizer"></a>UIGestureRescognizer</h2><p><code>UIGestureRescognizer</code> 是一类手势识别器对象，它可以附属在你指定的 View 上，并且为其设定指定的手势操作，例如是点击、滑动或者是拖拽。当触控事件发生时，设置了<code>Gesture Recognizer`s` 的 View 会先通过识别器去拦截触控事件，如果该触控事件是事先为 View 设定的触控监听事件，那么</code>Gesture Recognizer<code>s</code> 将会发送动作消息给目标处理对象，目标处理对象则对这次触控事件进行处理，先看看如下流程图。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/actiontarget.png" alt="img"></p>
<p>在 iOS 中，View 就是我们在屏幕上看到的各种 UI 控件，当一个触控事件发生时，<code>Gesture Recognizer`s` 会先获取到指定的事件，然后发送 `action message` 给目标对象 `target`，目标对象就是 `ViewController`，在 `ViewController` 中通过事件方法完成对该事件的处理。</code>Gesture Recognizer<code>s</code> 能设置诸如单击、滑动、拖拽等事件，通过 <code>Action-Target</code> 这种设计模式，好处是能动态为 View 添加各种事件监听，而不用去实现一个 View 的子类去完成这些功能。</p>
<h3 id="常用手势识别类"><a href="#常用手势识别类" class="headerlink" title="常用手势识别类"></a>常用手势识别类</h3><p>在 <code>UIKit</code> 框架中，系统为我们事先定义好了一些常用的手势识别器，包括点击、双指缩放、拖拽、滑动、旋转以及长按，通过这些手势识别器我们可以构造丰富的操作方式。</p>
<table>
<thead>
<tr>
<th>子类</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>UITapGestureRecognizer</td>
<td>敲击</td>
</tr>
<tr>
<td>UIPinchGestureRecognizer</td>
<td>捏合，用于缩放</td>
</tr>
<tr>
<td>UIPanGestureRecognizer</td>
<td>拖拽</td>
</tr>
<tr>
<td>UISwipeGestureRecognizer</td>
<td>轻扫</td>
</tr>
<tr>
<td>UIRotationGestureRecognizer</td>
<td>旋转</td>
</tr>
<tr>
<td>UILongPressGestureRecognizer</td>
<td>长按</td>
</tr>
</tbody>
</table>
<p>在上表中可以看到，<code>UIKit</code> 框架中已经提供了诸如 <code>UITapGestureRecognizer</code> 在内的六种手势识别器，如果你需要实现自定义的手势识别器，也可以通过继承 <code>UIGestureRecognizer</code> 类并重写其中的方法来完成，这里我们就不详细讨论了。</p>
<p>每一个 <code>Gesture Recognizer</code> 关联一个 View，但是一个 View 可以关联多个 <code>Gesture Recognizer</code>，因为一个 View可能还能响应多种触控操作方式。当一个触控事件发生时，<code>Gesture Recognizer</code> 接收一个动作消息要先于 View 本身，结果就是 <code>Gesture Recognizer</code> 作为 View 处理触控事件的代表，或者叫代理。当 <code>Gesture Recognizer</code> 接收到指定的事件时，它就会发送一条 <code>action message</code> 给 <code>ViewController</code> 并处理。</p>
<h3 id="UIGestureRescognizer-常用属性和方法："><a href="#UIGestureRescognizer-常用属性和方法：" class="headerlink" title="UIGestureRescognizer 常用属性和方法："></a>UIGestureRescognizer 常用属性和方法：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">@interface <span class="type">UIGestureRecognizer</span> : <span class="type">NSObject</span></div><div class="line">  </div><div class="line"><span class="comment">//创建一个手势对象并添加触发事件</span></div><div class="line">- (instancetype)initWithTarget:(nullable id)target action:(nullable <span class="type">SEL</span>)action <span class="type">NS_DESIGNATED_INITIALIZER</span>; </div><div class="line"></div><div class="line"><span class="comment">//给一个手势对象添加监听事件</span></div><div class="line">- (void)addTarget:(id)target action:(<span class="type">SEL</span>)action;  </div><div class="line"></div><div class="line"><span class="comment">//移除一个手势的监听事件</span></div><div class="line">- (void)removeTarget:(nullable id)target action:(nullable <span class="type">SEL</span>)action; </div><div class="line"></div><div class="line"><span class="comment">//设置能识别到手势的最少的轻触次数(默认为1)</span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span>  numberOfTapsRequired;     </div><div class="line"></div><div class="line"><span class="comment">//设置能识别到手势的最少的手指的个数(默认为1) </span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span>  numberOfTouchesRequired;  </div><div class="line"></div><div class="line"><span class="comment">//获取当前手势状态</span></div><div class="line">@property(nonatomic,readonly) <span class="type">UIGestureRecognizerState</span> state;  </div><div class="line"></div><div class="line"><span class="comment">//委托</span></div><div class="line">@property(nullable,nonatomic,<span class="keyword">weak</span>) id &lt;<span class="type">UIGestureRecognizerDelegate</span>&gt; delegate; </div><div class="line"></div><div class="line"><span class="comment">//手势识别是否可用</span></div><div class="line">@property(nonatomic, getter=isEnabled) <span class="type">BOOL</span> enabled;  </div><div class="line"></div><div class="line"><span class="comment">//获取手势触摸的View视图 只读</span></div><div class="line">@property(nullable, nonatomic,readonly) <span class="type">UIView</span> *view;  </div><div class="line"></div><div class="line"><span class="comment">/*是否取消触摸控件的响应</span></div><div class="line">默认为YES，这种情况下当手势识别器识别到触摸之后，会发送touchesCancelled</div><div class="line">给触摸到的控件以取消控件view对touch的响应，这个时候只有手势识别器响应touch，</div><div class="line">当设置成NO时，手势识别器识别到触摸之后不会发送touchesCancelled给控件，</div><div class="line">这个时候手势识别器和控件view均响应touch。</div><div class="line">注意：手势识别和触摸事件是同时存在的，只是因为touchesCancelled导致触摸事件失效。*/</div><div class="line">@property(nonatomic) <span class="type">BOOL</span> cancelsTouchesInView;    </div><div class="line"></div><div class="line"><span class="comment">/*是否延迟发送触摸事件给触摸到的控件</span></div><div class="line">默认是NO，这种情况下当发生一个触摸时，手势识别器先捕捉到到触摸，</div><div class="line">然后发给触摸到的控件，两者各自做出响应。</div><div class="line">如果设置为YES，手势识别器在识别的过程中(注意是识别过程)，不会将触摸发给触摸到的控件，即控件不会有任何触摸事件。</div><div class="line">只有在识别失败之后才会将触摸事件发给触摸到的控件，这种情况下控件view的响应会延迟约0.15ms。*/</div><div class="line">@property(nonatomic) <span class="type">BOOL</span> delaysTouchesBegan;     </div><div class="line">  </div><div class="line"><span class="comment">//如果触摸识别失败是否立即结束本次手势识别的触摸事件</span></div><div class="line">@property(nonatomic) <span class="type">BOOL</span> delaysTouchesEnded;        </div><div class="line"></div><div class="line"><span class="comment">/*指定一个手势需要另一个手势执行失败才会执行，同时触发多个手势使用其中一个手势的解决办法</span></div><div class="line">有时手势是相关联的，如单机和双击，点击和长按，点下去瞬间可能只会识别到单击无法识别其他，</div><div class="line">该方法可以指定某一个手势，即便自己已经满足条件了，也不会立刻触发，会等到该指定的手势确定失败之后才触发</div><div class="line">*/</div><div class="line">- (void)requireGestureRecognizerToFail:(<span class="type">UIGestureRecognizer</span> *)otherGestureRecognizer;</div><div class="line"></div><div class="line"><span class="comment">//获取当前触摸在指定视图上的点</span></div><div class="line">- (<span class="type">CGPoint</span>)locationInView:(nullable <span class="type">UIView</span>*)view;                               </div><div class="line"></div><div class="line"><span class="comment">//获取触摸手指数</span></div><div class="line">- (<span class="type">NSUInteger</span>)numberOfTouches;   </div><div class="line"></div><div class="line"><span class="comment">//多指触摸的触摸点相对于指定视图的位置</span></div><div class="line">- (<span class="type">CGPoint</span>)locationOfTouch:(<span class="type">NSUInteger</span>)touchIndex inView:(nullable <span class="type">UIView</span>*)view; </div><div class="line">@end</div><div class="line"> </div><div class="line"><span class="comment">//代理方法</span></div><div class="line">@<span class="class"><span class="keyword">protocol</span> <span class="title">UIGestureRecognizerDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line">  </div><div class="line">@<span class="title">optional</span></div><div class="line">//开始进行手势识别时调用的方法，返回<span class="title">NO</span>则结束识别，不再触发手势，用处：可以在控件指定的位置使用手势识别</div><div class="line">- (<span class="title">BOOL</span>)<span class="title">gestureRecognizerShouldBegin</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">gestureRecognizer</span>;</div><div class="line"></div><div class="line">/*是否支持多手势触发，返回<span class="title">YES</span>，则可以多个手势一起触发方法，返回<span class="title">NO</span>则为互斥。</div><div class="line">是否允许多个手势识别器共同识别，一个控件的手势识别后是否阻断手势识别继续向下传播。</div><div class="line">默认返回<span class="title">NO</span>，如果为<span class="title">YES</span>，响应者链上层对象触发手势识别后，如果下层对象也添加了手势并成功识别也会继续执行，</div><div class="line">否则上层对象识别后则不再继续传播*/</div><div class="line">- (<span class="title">BOOL</span>)<span class="title">gestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">gestureRecognizer</span> <span class="title">shouldRecognizeSimultaneouslyWithGestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">otherGestureRecognizer</span>;</div><div class="line"></div><div class="line">//这个方法返回<span class="title">YES</span>，第一个手势和第二个互斥时，第一个会失效</div><div class="line">- (<span class="title">BOOL</span>)<span class="title">gestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">gestureRecognizer</span> <span class="title">shouldRequireFailureOfGestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">otherGestureRecognizer</span>;</div><div class="line"></div><div class="line">//这个方法返回<span class="title">YES</span>，第一个和第二个互斥时，第二个会失效</div><div class="line">- (<span class="title">BOOL</span>)<span class="title">gestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">gestureRecognizer</span> <span class="title">shouldBeRequiredToFailByGestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">otherGestureRecognizer</span>;</div><div class="line"></div><div class="line">/*手指触摸屏幕后回调的方法，返回<span class="title">NO</span>则不再进行手势识别，方法触发等</div><div class="line">此方法在<span class="title">window</span>对象在有触摸事件发生时，调用`<span class="title">Gesture</span> <span class="title">Recognizer</span>`的</div><div class="line"><span class="title">touchesBegan</span>:<span class="title">withEvent</span>:方法之前调用。</div><div class="line">如果返回<span class="title">NO</span>,则`<span class="title">Gesture</span> <span class="title">Recognizer</span>`不会看到此触摸事件。(默认情况下为<span class="title">YES</span>)*/</div><div class="line">- (<span class="title">BOOL</span>)<span class="title">gestureRecognizer</span>:(<span class="title">UIGestureRecognizer</span> *)<span class="title">gestureRecognizer</span> <span class="title">shouldReceiveTouch</span>:(<span class="title">UITouch</span> *)<span class="title">touch</span>;</div><div class="line"></div><div class="line">@<span class="title">end</span></div></pre></td></tr></table></figure>
<h3 id="UILongPressGestureRecognizer-常用属性和方法"><a href="#UILongPressGestureRecognizer-常用属性和方法" class="headerlink" title="UILongPressGestureRecognizer 常用属性和方法"></a>UILongPressGestureRecognizer 常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@interface <span class="type">UILongPressGestureRecognizer</span> : <span class="type">UIGestureRecognizer</span></div><div class="line"><span class="comment">//设置能识别到手势的最少的轻触次数(默认为1)</span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span> numberOfTapsRequired;     </div><div class="line"><span class="comment">//设置能识别到手势的最少的手指的个数(默认为1) </span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span> numberOfTouchesRequired;   </div><div class="line"><span class="comment">//设置能识别到长按手势的最短的长按时间，单位：秒，默认为0.5</span></div><div class="line">@property (nonatomic) <span class="type">CFTimeInterval</span> minimumPressDuration; </div><div class="line"><span class="comment">//设置长按时允许移动的最大距离，单位：像素，默认为10像素</span></div><div class="line">@property (nonatomic) <span class="type">CGFloat</span> allowableMovement;           </div><div class="line">@end</div><div class="line">  </div><div class="line"><span class="type">UILongPressGestureRecognizer</span> *longPress = [[<span class="type">UILongPressGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:@selector(longPressAction:)];</div><div class="line"><span class="comment">//设置能识别到长按手势的最小的长按时间</span></div><div class="line">longPress.minimumPressDuration = <span class="number">0.5</span>;</div><div class="line"><span class="comment">//"容错的范围"</span></div><div class="line">longPress.allowableMovement  = <span class="number">10</span>;</div><div class="line"><span class="comment">//把长按手势添加到对应的控件中</span></div><div class="line">[<span class="keyword">self</span>.imgView addGestureRecognizer:longPress];</div></pre></td></tr></table></figure>
<h3 id="UISwipeGestureRecognizer-常用属性和方法"><a href="#UISwipeGestureRecognizer-常用属性和方法" class="headerlink" title="UISwipeGestureRecognizer 常用属性和方法"></a>UISwipeGestureRecognizer 常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">typedef <span class="type">NS_OPTIONS</span>(<span class="type">NSUInteger</span>, <span class="type">UISwipeGestureRecognizerDirection</span>) &#123;</div><div class="line">    <span class="type">UISwipeGestureRecognizerDirectionRight</span> = <span class="number">1</span> &lt;&lt; <span class="number">0</span>,  <span class="comment">//向右滑</span></div><div class="line">    <span class="type">UISwipeGestureRecognizerDirectionLeft</span>  = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,  <span class="comment">//向左滑</span></div><div class="line">    <span class="type">UISwipeGestureRecognizerDirectionUp</span>    = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,  <span class="comment">//向上滑</span></div><div class="line">    <span class="type">UISwipeGestureRecognizerDirectionDown</span>  = <span class="number">1</span> &lt;&lt; <span class="number">3</span>  <span class="comment">//向下滑</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface <span class="type">UISwipeGestureRecognizer</span> : <span class="type">UIGestureRecognizer</span>`</div><div class="line"><span class="comment">//最少触摸手指个数，默认为1</span></div><div class="line">@property(nonatomic) <span class="type">NSUInteger</span> numberOfTouchesRequired; </div><div class="line"><span class="comment">//设置轻扫手势支持的方向，默认为向右滑</span></div><div class="line">@property(nonatomic) <span class="type">UISwipeGestureRecognizerDirection</span> direction;               </div><div class="line">@end</div></pre></td></tr></table></figure>
<h3 id="UIRotationGestureRecognizer-常用属性和方法"><a href="#UIRotationGestureRecognizer-常用属性和方法" class="headerlink" title="UIRotationGestureRecognizer 常用属性和方法"></a>UIRotationGestureRecognizer 常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">@interface <span class="type">UIRotationGestureRecognizer</span> : <span class="type">UIGestureRecognizer</span></div><div class="line"><span class="comment">//旋转的角度</span></div><div class="line">@property (nonatomic) <span class="type">CGFloat</span> rotation;  </div><div class="line"><span class="comment">//旋转速度，单位：度/秒、         </span></div><div class="line">@property (nonatomic,readonly) <span class="type">CGFloat</span> velocity;           </div><div class="line">@end</div><div class="line"></div><div class="line"><span class="comment">//为图片框添加一个旋转手势</span></div><div class="line"><span class="type">UIRotationGestureRecognizer</span> *rotation = [[<span class="type">UIRotationGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:@selector(rotateAction:)];rotation.delegate = <span class="keyword">self</span>;</div><div class="line">[<span class="keyword">self</span>.imgView addGestureRecognizer:rotation];</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//旋转手势的监听方法</span></div><div class="line">- (void)rotateAction:(<span class="type">UIRotationGestureRecognizer</span> *)recognizer &#123;</div><div class="line"><span class="comment">//在原来的基础上, 累加多少度</span></div><div class="line">recognizer.view.transform = <span class="type">CGAffineTransformRotate</span>(recognizer.view.transform, recognizer.rotation);</div><div class="line"><span class="comment">//每次旋转完毕后将rotation的值, 恢复到0的位置.recognizer.rotation = 0;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="UIPanGestureRecognizer-常用属性和方法"><a href="#UIPanGestureRecognizer-常用属性和方法" class="headerlink" title="UIPanGestureRecognizer 常用属性和方法"></a>UIPanGestureRecognizer 常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@interface <span class="type">UIPanGestureRecognizer</span> : <span class="type">UIGestureRecognizer</span></div><div class="line"><span class="comment">//设置触发拖拽最少手指数，默认为1</span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span> minimumNumberOfTouches;   </div><div class="line"><span class="comment">//设置触发拖拽最多手指数，默认为 UINT_MAX 无限大</span></div><div class="line">@property (nonatomic) <span class="type">NSUInteger</span> maximumNumberOfTouches;   </div><div class="line"><span class="comment">//获取当前拖拽位置</span></div><div class="line">- (<span class="type">CGPoint</span>)translationInView:(nullable <span class="type">UIView</span> *)view;                        </div><div class="line"><span class="comment">//设置当前拖拽位置</span></div><div class="line">- (void)setTranslation:(<span class="type">CGPoint</span>)translation inView:(nullable <span class="type">UIView</span> *)view;</div><div class="line"><span class="comment">//设置拖拽速度，单位：像素/秒</span></div><div class="line">- (<span class="type">CGPoint</span>)velocityInView:(nullable <span class="type">UIView</span> *)view;                          </div><div class="line">@end</div><div class="line">  </div><div class="line"><span class="type">UIPanGestureRecognizer</span> *pan = [[<span class="type">UIPanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:@selector(panAction:)];</div><div class="line">[<span class="keyword">self</span>.imgView addGestureRecognizer:pan];</div><div class="line"></div><div class="line"><span class="comment">//拖拽手势的监听方法</span></div><div class="line">- (void)panAction:(<span class="type">UIPanGestureRecognizer</span> *)recognizer &#123;</div><div class="line">  <span class="comment">//获取手指拖拽的时候, 平移的值</span></div><div class="line">  <span class="type">CGPoint</span> translation = [recognizer translationInView:recognizer.view];</div><div class="line">  <span class="comment">//让当前控件做响应的平移</span></div><div class="line">  recognizer.view.transform = <span class="type">CGAffineTransformTranslate</span>(recognizer.view.transform, translation.x, translation.y);</div><div class="line">  <span class="comment">//每次平移手势识别完毕后, 让平移的值不要累加</span></div><div class="line">  [recognizer setTranslation:<span class="type">CGPointZero</span> inView:recognizer.view];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="连续和不连续动作"><a href="#连续和不连续动作" class="headerlink" title="连续和不连续动作"></a>连续和不连续动作</h3><p>触控动作同时分为连续动作和不连续动作，连续动作例如滑动和拖拽，它会持续一小段时间，而不连续动作例如单击，它瞬间就会完成，在这两类事件的处理上又稍有不同。</p>
<p>对于不连续动作，<code>Gesture Recognizer</code> 只会给 <code>ViewContoller</code> 发送一个单一的动作消息，而对于连续动作，<code>Gesture Recognizer</code> 会发送多条动作消息给 <code>ViewContoller</code>，直到所有的事件都结束。</p>
<p>为一个 View 添加 <code>GestureRecognizer</code> 有两种方式，一种是通过 <code>InterfaceBuilder</code> 实现，另一种就是通过代码实现，我们看看通过代码来如何实现。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化手势</span></div><div class="line"><span class="keyword">let</span> tap = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(<span class="keyword">self</span>.doSomeThing(tap:)))</div><div class="line"><span class="comment">//指定操作为点击 1 次</span></div><div class="line">tap.numberOfTapsRequired = <span class="number">1</span></div><div class="line"><span class="comment">//需要 2 根手指同时点击</span></div><div class="line">tap.numberOfTouchesRequired = <span class="number">2</span></div><div class="line"><span class="comment">//为当前 View 添加 GestureRecognizer</span></div><div class="line">view.addGestureRecognizer(tap</div></pre></td></tr></table></figure>
<p>在事件处理过程中，这两种方式所处的状态又各有不同，首先，所有的触控事件最开始都是处于可用状态 <code>Possible</code>，对应 <code>UIKit</code> 里面的 <code>UIGestureRecognizerStatePossible</code> 类，如果是不连续动作事件，则状态只会从 <code>Possible</code> 转变为已识别状态 <code>Recognized</code> 或者是失败状态 <code>Failed</code>。例如一次成功的单击动作，就对应了 <code>Possible-Recognized</code> 这个过程。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/possiblerecognized%20.png" alt="img"></p>
<p>手势识别有以下几种状态：</p>
<table>
<thead>
<tr>
<th>枚举值</th>
<th>定义</th>
</tr>
</thead>
<tbody>
<tr>
<td>UIGestureRecognizerStatePossible</td>
<td>没有触摸事件发生，所有手势识别的默认状态</td>
</tr>
<tr>
<td>UIGestureRecognizerStateBegan</td>
<td>一个手势已经开始但尚未改变或者完成时</td>
</tr>
<tr>
<td>UIGestureRecognizerStateChanged</td>
<td>手势状态改变</td>
</tr>
<tr>
<td>UIGestureRecognizerStateEnded</td>
<td>手势完成</td>
</tr>
<tr>
<td>UIGestureRecognizerStateCancelled</td>
<td>手势取消，恢复至Possible状态</td>
</tr>
<tr>
<td>UIGestureRecognizerStateFailed</td>
<td>手势失败，恢复至Possible状态</td>
</tr>
</tbody>
</table>
<p>如果是连续动作事件，如果事件没有失败并且连续动作的第一个动作被 <code>Recognized</code>，则从 <code>Possible</code> 状态转移到 <code>Began</code> 状态，这里表示连续动作的开始，接着会转变为 <code>Changed</code> 状态，在这个状态下会不断循环的处理连续动作，直到动作执行完成变转变为 <code>Recognized</code> 已识别状态，最终该动作会处于完成状态 <code>Ended</code>，另外，连续动作事件的处理状态会从 <code>Changed</code> 状态转变为 <code>Canceled</code> 状态，原因是识别器认为当前的动作已经不匹配当初对事件的设定了。</p>
<h2 id="UITouch-amp-UIEvent"><a href="#UITouch-amp-UIEvent" class="headerlink" title="UITouch &amp; UIEvent"></a>UITouch &amp; UIEvent</h2><p>在屏幕上的每一次动作事件都是一次 <code>Touch</code>，在 iOS 中用 <code>UITouch</code> 对象表示每一次的触控，多个 <code>Touch</code> 组成一次 <code>Event</code>，用 <code>UIEvent</code> 来表示一次事件对象。目前 iOS 设备支持的多点操作手指数最多是 5，下图展示了一个 <code>UIEvent</code> 对象与多个 <code>UITouch</code> 对象之间的关系。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/uitouch.png" alt="img"></p>
<p><strong>当用户触摸屏幕后，就会产生相应的事件，所有相关的 <code>UITouch</code> 对象都被包装在事件中，被程序交由特定的对象来处理。<code>UITouch</code> 对象直接包括触摸的详细信息，比如触摸的位置、时间、阶段。</strong></p>
<p>当手指移动时，系统会更新同一个 <code>UITouch</code> 对象，使之能够一直保存该手指在的触摸位置，当手指离开屏幕时，系统会销毁相应的 <code>UITouch</code> 对象。</p>
<h3 id="UITouch-的常用属性和方法"><a href="#UITouch-的常用属性和方法" class="headerlink" title="UITouch 的常用属性和方法"></a>UITouch 的常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//触摸事件在屏幕上有一个周期</span></div><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">UITouchPhase</span>) &#123;</div><div class="line">    <span class="type">UITouchPhaseBegan</span>,           <span class="comment">//开始触摸  </span></div><div class="line">    <span class="type">UITouchPhaseMoved</span>,           <span class="comment">//移动    </span></div><div class="line">    <span class="type">UITouchPhaseStationary</span>,      <span class="comment">//停留</span></div><div class="line">    <span class="type">UITouchPhaseEnded</span>,           <span class="comment">//触摸结束</span></div><div class="line">    <span class="type">UITouchPhaseCancelled</span>,       <span class="comment">//触摸中断</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//检测是否支持3DTouch</span></div><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">UIForceTouchCapability</span>) &#123;</div><div class="line">    <span class="type">UIForceTouchCapabilityUnknown</span> = <span class="number">0</span>,  <span class="comment">//3D Touch检测失败</span></div><div class="line">    <span class="type">UIForceTouchCapabilityUnavailable</span> = <span class="number">1</span>,  <span class="comment">//3D Touch不可用</span></div><div class="line">    <span class="type">UIForceTouchCapabilityAvailable</span> = <span class="number">2</span>  <span class="comment">//3D Touch可用</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface <span class="type">UITouch</span> : <span class="type">NSObject</span></div><div class="line"></div><div class="line"><span class="comment">//触摸产生或变化的时间戳 只读</span></div><div class="line">@property(nonatomic,readonly) <span class="type">NSTimeInterval</span>      timestamp;</div><div class="line"><span class="comment">//触摸周期内的各个状态</span></div><div class="line">@property(nonatomic,readonly) <span class="type">UITouchPhase</span>        phase;</div><div class="line"><span class="comment">//短时间内点击的次数 只读</span></div><div class="line">@property(nonatomic,readonly) <span class="type">NSUInteger</span>          tapCount;   </div><div class="line"></div><div class="line"><span class="comment">//获取手指与屏幕的接触半径 IOS8以后可用 只读</span></div><div class="line">@property(nonatomic,readonly) <span class="type">CGFloat</span> majorRadius <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">8_0</span>);</div><div class="line"><span class="comment">//获取手指与屏幕的接触半径的误差 IOS8以后可用 只读</span></div><div class="line">@property(nonatomic,readonly) <span class="type">CGFloat</span> majorRadiusTolerance <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">8_0</span>);</div><div class="line"></div><div class="line"><span class="comment">//触摸时所在的窗口 只读</span></div><div class="line">@property(nullable,nonatomic,readonly,strong) <span class="type">UIWindow</span> *window;</div><div class="line"><span class="comment">//触摸时所在视图</span></div><div class="line">@property(nullable,nonatomic,readonly,strong) <span class="type">UIView</span> *view;</div><div class="line"><span class="comment">//获取触摸手势</span></div><div class="line">@property(nullable,nonatomic,readonly,copy)   <span class="type">NSArray</span> &lt;<span class="type">UIGestureRecognizer</span> *&gt;  *gestureRecognizers </div><div class="line"></div><div class="line"><span class="comment">//取得在指定视图的位置</span></div><div class="line"><span class="comment">//返回值表示触摸在view上的位置</span></div><div class="line"><span class="comment">//这里返回的位置是针对view的坐标系的(以view的左上角为原点(0,0))</span></div><div class="line"><span class="comment">//调用时传入的view参数为nil的话，返回的是触摸点在`UIWindow`的位置</span></div><div class="line">- (<span class="type">CGPoint</span>)locationInView:(nullable <span class="type">UIView</span> *)view;</div><div class="line"><span class="comment">//该方法记录了前一个触摸点的位置</span></div><div class="line">- (<span class="type">CGPoint</span>)previousLocationInView:(nullable <span class="type">UIView</span> *)view;</div><div class="line"></div><div class="line"><span class="comment">//获取触摸压力值，一般的压力感应值为1.0 IOS9 只读</span></div><div class="line">@property(nonatomic,readonly) <span class="type">CGFloat</span> force <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">9_0</span>);</div><div class="line"></div><div class="line"><span class="comment">//获取最大触摸压力值</span></div><div class="line">@property(nonatomic,readonly) <span class="type">CGFloat</span> maximumPossibleForce <span class="type">NS_AVAILABLE_IOS</span>(<span class="number">9_0</span>);</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>当手指接触到屏幕，不管是单点触摸还是多点触摸，事件都会开始，直到用户所有的手指都离开屏幕。期间所有的 <code>UITouch</code> 对象都被包含在 <code>UIEvent</code> 事件对象中，由程序分发给处理者，事件记录了这个周期中所有触摸对象状态的变化。</p>
<p>只要屏幕被触摸，系统就会报若干个触摸的信息封装到 <code>UIEvent</code> 对象中发送给程序，由管理程序 <code>UIApplication</code> 对象将事件分发。一般来说，事件将被发给主窗口，然后传给第一响应者对象处理。</p>
<p>在上述过程中，完成了一次双指缩放的事件动作，每一次手指状态的变化都对应事件动作处理过程中得一个阶段。通过 <code>Began-Moved-Ended</code> 这几个阶段的 <code>Touch</code> 共同构成了一次事件 <code>Event</code>。在事件响应对象 <code>UIResponder</code> 中有对应的方法来分别处理这几个阶段的事件。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一根或者多根手指开始触摸 view，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesBegan:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//一根或者多根手指在 view 上移动，系统会自动调用 view 的下面方法(随着手指的移动，会持续调用该方法)</span></div><div class="line">- (void)touchesMoved:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//一根或者多根手指离开 view，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesEnded:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div><div class="line"><span class="comment">//触摸结束前，某个系统事件(例如电话呼入)会打断触摸过程，系统会自动调用 view 的下面方法</span></div><div class="line">- (void)touchesCancelled:(<span class="type">NSSet</span> *)touches withEvent:(<span class="type">UIEvent</span> *)event;</div></pre></td></tr></table></figure>
<p>4 个触摸事件处理方法中，都有 <code>NSSet *touches</code> 和 <code>UIEvent *event</code> 两个参数，一次完整的触摸过程中，只会产生一个事件对象，4 个触摸方法都是同一个 <code>event</code> 参数。</p>
<p>如果两根手指同时触摸一个 View，那么 View 只会调用一次 <code>touchesBegan:withEvent:</code> 方法，<code>touches</code> 参数中装着 2 个 <code>UITouch</code> 对象。</p>
<p>如果这两根手指一前一后分开触摸同一个 View，那么 View 会分别调用 2 次 <code>touchesBegan:withEvent:</code> 方法，并且每次调用时的 <code>touches</code> 参数中只包含一个 <code>UITouch</code> 对象。根据 <code>touches</code> 中 <code>UITouch</code> 的个数可以判断出是单点触摸还是多点触摸。</p>
<h3 id="UIEvent-常用属性和方法"><a href="#UIEvent-常用属性和方法" class="headerlink" title="UIEvent 常用属性和方法"></a>UIEvent 常用属性和方法</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//事件类型</span></div><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">UIEventType</span>) &#123;</div><div class="line">    <span class="type">UIEventTypeTouches</span>,<span class="comment">//触控</span></div><div class="line">    <span class="type">UIEventTypeMotion</span>, <span class="comment">//加速感应器</span></div><div class="line">    <span class="type">UIEventTypeRemoteControl</span>,<span class="comment">//远程操作</span></div><div class="line">    <span class="type">UIEventTypePresses</span> <span class="comment">//3D touch</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//触摸事件的类型</span></div><div class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">UIEventSubtype</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="type">UIEventSubtypeNone</span>                              = <span class="number">0</span>,</div><div class="line">    <span class="comment">//摇晃 </span></div><div class="line">    <span class="type">UIEventSubtypeMotionShake</span>                       = <span class="number">1</span>,</div><div class="line">   	<span class="comment">//播放</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlPlay</span>                 = <span class="number">100</span>,</div><div class="line">   	<span class="comment">//暂停</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlPause</span>                = <span class="number">101</span>,</div><div class="line">    <span class="comment">//停止</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlStop</span>                 = <span class="number">102</span>,</div><div class="line">    <span class="comment">//播放和暂停切换 </span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlTogglePlayPause</span>      = <span class="number">103</span>,</div><div class="line">    <span class="comment">//下一首</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlNextTrack</span>            = <span class="number">104</span>,</div><div class="line">    <span class="comment">//上一首</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlPreviousTrack</span>        = <span class="number">105</span>,</div><div class="line">    <span class="comment">//开始后退 </span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlBeginSeekingBackward</span> = <span class="number">106</span>,</div><div class="line">    <span class="comment">//结束后退 </span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlEndSeekingBackward</span>   = <span class="number">107</span>,</div><div class="line">    <span class="comment">//开始快进 </span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlBeginSeekingForward</span>  = <span class="number">108</span>,</div><div class="line">    <span class="comment">//结束快进</span></div><div class="line">    <span class="type">UIEventSubtypeRemoteControlEndSeekingForward</span>    = <span class="number">109</span>,</div><div class="line">&#125;;</div><div class="line"></div><div class="line">@interface <span class="type">UIEvent</span> : <span class="type">NSObject</span></div><div class="line"><span class="comment">//事件类型</span></div><div class="line">@property(nonatomic,readonly) <span class="type">UIEventType</span>   </div><div class="line"><span class="comment">//触摸事件的类型</span></div><div class="line">@property(nonatomic,readonly) <span class="type">UIEventSubtype</span>  </div><div class="line"></div><div class="line"><span class="comment">//事件的时间戳</span></div><div class="line">@property(nonatomic,readonly) <span class="type">NSTimeInterval</span>  timestamp;</div><div class="line"></div><div class="line"><span class="comment">//所有的触摸 </span></div><div class="line">- (nullable <span class="type">NSSet</span> &lt;<span class="type">UITouch</span> *&gt; *)allTouches;</div><div class="line"><span class="comment">//获得`UIWindow`的触摸</span></div><div class="line">- (nullable <span class="type">NSSet</span> &lt;<span class="type">UITouch</span> *&gt; *)touchesForWindow:(<span class="type">UIWindow</span> *)window;</div><div class="line"><span class="comment">//获得`UIView`的触摸  </span></div><div class="line">- (nullable <span class="type">NSSet</span> &lt;<span class="type">UITouch</span> *&gt; *)touchesForView:(<span class="type">UIView</span> *)view;</div><div class="line"><span class="comment">//获得事件中特定手势的触摸</span></div><div class="line">- (nullable <span class="type">NSSet</span> &lt;<span class="type">UITouch</span> *&gt; *)touchesForGestureRecognizer:(<span class="type">UIGestureRecognizer</span> *)gesture ;</div><div class="line"><span class="comment">//会将丢失的触摸放到一个新的 `UIEvent` 数组中，你可以用 coalescedTouchesForTouch(_:) 方法来访问</span></div><div class="line">- (nullable <span class="type">NSArray</span> &lt;<span class="type">UITouch</span> *&gt; *)coalescedTouchesForTouch:(<span class="type">UITouch</span> *)touch;</div><div class="line"><span class="comment">//辅助`UITouch`的触摸，预测发生了一系列主要的触摸事件。这些预测可能不完全匹配的触摸的真正的行为，因为它的移动，所以他们应该被解释为一个估计。</span></div><div class="line">- (nullable <span class="type">NSArray</span> &lt;<span class="type">UITouch</span> *&gt; *)predictedTouchesForTouch:(<span class="type">UITouch</span> *)touch;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p><code>UIEvent</code> 是代表 iOS 系统中的一个事件，一个事件包含一个或多个的 <code>UITouch</code>；<code>UIEvent</code> 分为三类：</p>
<ol>
<li><code>UIEventTypeTouches</code> 触摸事件，通过触摸、手势进行触发，例如手指点击、缩放；</li>
<li><code>UIEventTypeMotion</code> 运动事件，通过加速器进行触发，例如手机晃动；</li>
<li><code>UIEventTypeRemoteControl</code> 远程控制事件，通过其他远程设备触发，例如耳机控制按钮；</li>
</ol>
<p>触摸对象的事件类型包括一个或多个触摸，触摸与某一事件联系在一起。一个触摸是被一个 <code>UITouch</code> 对象调用的。当一个事件触发了，系统将会把它传递给合适的响应对象并通过 <code>UIEvent</code> 对象发出一个消息。</p>
<p>调用 <code>UIResponder</code> 方法如 <code>touchesBegan:withEvent:</code>，响应对象可以分配触摸事件到合适的触摸类型并适当的控制他们。<code>UIEvent</code> 中的方法可以让你获取全部的触摸事件 <code>allTouches</code> 或者给定的视图或者窗口 <code>touchesForView: 或者 touchesForWindow:</code>，它可以分辨从响应对象传递过来的事件对象发生的时间 <code>timestamp</code>。</p>
<p>一个 <code>UIEvent</code> 对象贯穿在多点触摸事件的序列中，<code>UIKit</code> 重用同一个 <code>UIEvent</code> 实例来分配每一个事件到应用程序。你不需要保持一个事件对象或者任何从事件对象返回的对象。如果你需要保存事件对象然后传递到另外一个对象，你需要从 <code>UITouch</code> 或者 <code>UIEvent</code> 中复制信息。</p>
<p>你可以通过类型属性和子类型属性，获取事件类型和事件的子类型。<code>UIEvent</code> 定义了事件的类型为触摸，摇晃和遥控事件，它也定义了摇晃事件的子类型，以及为遥控事件定义了一系列的子类型。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>iOS触摸事件的流动：<a href="http://shellhue.github.io/2017/03/04/FlowOfUITouch/" target="_blank" rel="external">http://shellhue.github.io/2017/03/04/FlowOfUITouch/</a></p>
<p>iOS事件的传递与响应：<a href="http://blog.csdn.net/yongyinmg/article/details/19616527" target="_blank" rel="external">http://blog.csdn.net/yongyinmg/article/details/19616527</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;响应者对象就是可以响应事件并对事件作出处理。在 iOS 中，存在 &lt;code&gt;UIResponder&lt;/code&gt; 类，它定义了响应者对象的所有方法。&lt;code&gt;UIApplication&lt;/code&gt;、&lt;code&gt;UIView&lt;/code&gt; 等类都继承了 &lt;code&gt;UIResponder&lt;/code&gt; 类，&lt;code&gt;UIWindow&lt;/code&gt; 和 &lt;code&gt;UIKit&lt;/code&gt; 中的控件因为继承了 &lt;code&gt;UIView&lt;/code&gt;，所以也间接继承了 &lt;code&gt;UIResponder&lt;/code&gt; 类，这些类的实例都可以当作响应者。&lt;/p&gt;
&lt;p&gt;当前接受触摸的响应者对象被称为第一响应者，即表示当前该对象正在与用户交互，它是响应者链的开端。&lt;/p&gt;
&lt;p&gt;响应者链表示一系列的响应者对象。事件被交由第一响应者对象处理，如果第一响应者不处理，事件被沿着响应者链向上传递，交给下一个响应者。&lt;/p&gt;
&lt;p&gt;一般来说，第一响应者是个视图对象或者其子类对象，当其被触摸后事件被交由它处理，如果它不处理，事件就会被传递给它的视图控制器对象(如果存在)，然后是它的父视图对象(如果存在)，以此类推，直到顶层视图。&lt;/p&gt;
&lt;p&gt;接下来会沿着顶层视图(&lt;code&gt;top view&lt;/code&gt;)到窗口(&lt;code&gt;UIWindow&lt;/code&gt;)再到程序(&lt;code&gt;UIApplication&lt;/code&gt;)。如果整个过程都没有响应这个事件，该事件就被丢弃。&lt;/p&gt;
&lt;p&gt;一般情况下，在响应者链中只要由对象处理事件，事件就停止传递。但有时候可以在视图的响应方法中根据一些条件判断来决定是否需要继续传递事件。&lt;/p&gt;
    
    </summary>
    
      <category term="响应链" scheme="http://yoursite.com/categories/%E5%93%8D%E5%BA%94%E9%93%BE/"/>
    
    
      <category term="事件" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="Aciton-Target" scheme="http://yoursite.com/tags/Aciton-Target/"/>
    
      <category term="事件分发" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
      <category term="事件拦截" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E6%8B%A6%E6%88%AA/"/>
    
  </entry>
  
  <entry>
    <title>iOS开发 - 利用Runtime优化归解档 </title>
    <link href="http://yoursite.com/2017/01/24/iOS%E5%BC%80%E5%8F%91%20-%20%E5%88%A9%E7%94%A8Runtime%E4%BC%98%E5%8C%96%E5%BD%92%E8%A7%A3%E6%A1%A3%20/"/>
    <id>http://yoursite.com/2017/01/24/iOS开发 - 利用Runtime优化归解档 /</id>
    <published>2017-01-23T20:43:00.000Z</published>
    <updated>2017-01-24T15:25:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Runtime 是 iOS 开发中的知名黑魔法，充分体现了 Objective - C 的动态运行时特性，Swift 是一门静态语言，这意味着代码编译时即确定了其实际调用的方法和类型，所以纯粹的 Swift 类和对象没有办法使用 Runtime，更不存在 Method swizzling，但是呢，Swift 是兼容 Objective - C 的，继承自 NSObject 的类，也就具有了运行时的消息机制。</p>
<p>纯粹的 Swift 类，也可以通过添加 <code>@objc</code> 修饰符， <code>@objc</code> 关键字只需要对那些不是继承自 <code>NSObject</code> 的类型进行，如果 class 是继承自 <code>NSObject</code> 的话，Swift 会默认自动为所有的非 private 的类和成员加上 <code>@objc</code>。</p>
<p> <code>@objc</code> 修饰符主要用于需要暴露给 Objective-C 使用的任何地方 (包括类，属性和方法等) ，以支持其动态派发和运行时机制。</p>
<p>添加 <code>@objc</code> 修饰符并不意味着这个方法或者属性会变成动态派发，Swift 依然可能会将其优化为静态调用。如果需要施展一些像 Method swizzling 或者运行时再决定实现这样的 “黑魔法” 的时候，我们就必须用到 <code>dynamic</code> 修饰符了。 <code>dynamic</code> 修饰符会隐式的添加 <code>@objc</code> 进行修饰。</p>
<p>也就是说，需要 Swift 和 Objective 混合开发时，使用 <code>@objc</code> 就可以了，需要 Swift 完全实现运行时机制时，那么必须要添加 <code>dynamic</code> 修饰符。</p>
<p>下面我们通过优化归解档，来了解 Runtime 在 Swift 中的应用：</p>
<a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span>, <span class="title">NSCoding</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> name = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> age = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, age: <span class="type">Int</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">        <span class="keyword">self</span>.age = age</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(with aCoder: NSCoder)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">//属性的个数</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="comment">//获取属性列表，inout属性的个数</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">Person</span>.<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="built_in">count</span> &#123;</div><div class="line">            <span class="comment">//取出属性</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> ivar = ivars?[<span class="type">Int</span>(i)] &#123;</div><div class="line">                <span class="comment">//获取属性名</span></div><div class="line">                <span class="keyword">let</span> key = <span class="type">String</span>(utf8String: ivar_getName(ivar))</div><div class="line">                <span class="comment">//使用KVC获取属性值，并归档</span></div><div class="line">                aCoder.encode(<span class="keyword">self</span>.value(forKey: key!), forKey: key!)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//释放ivars</span></div><div class="line">        free(ivars)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</div><div class="line">        </div><div class="line">        <span class="comment">//属性的个数</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="comment">//获取属性列表，inout属性的个数</span></div><div class="line">        <span class="keyword">let</span> ivars = class_copyIvarList(<span class="type">Person</span>.<span class="keyword">self</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; <span class="built_in">count</span> &#123;</div><div class="line">            <span class="comment">//取出属性</span></div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> ivar = ivars?[<span class="type">Int</span>(i)] &#123;</div><div class="line">                <span class="comment">//获取属性名</span></div><div class="line">                <span class="keyword">let</span> key = <span class="type">String</span>(utf8String: ivar_getName(ivar))</div><div class="line">                <span class="comment">//解档</span></div><div class="line">                <span class="keyword">let</span> value = aDecoder.decodeObject(forKey: key!)</div><div class="line">                <span class="comment">//使用KVC传值</span></div><div class="line">                <span class="keyword">self</span>.setValue(value, forKey: key!)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//释放ivars</span></div><div class="line">        free(ivars)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我们使用归解档，属性很多或者结构很复杂时，会产生很多的重复代码，这时就可以通过 Runtime 来获取类的属性列表，属性名，属性数量等，再通过 KVC 完成取值和赋值，大大简化了这一步骤。</p>
<p>下面是使用方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">save</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> <span class="built_in">max</span> = <span class="type">Person</span>(name: <span class="string">"Max"</span>, age: <span class="number">100</span>)</div><div class="line">    <span class="keyword">let</span> <span class="built_in">min</span> = <span class="type">Person</span>(name: <span class="string">"Min"</span>, age: <span class="number">0</span>)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> result = <span class="type">NSKeyedArchiver</span>.archiveRootObject([<span class="built_in">max</span>, <span class="built_in">min</span>], toFile: filePath!)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"result:"</span>, result, <span class="string">"filePath:"</span>, filePath)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">read</span><span class="params">(<span class="number">_</span> sender: AnyObject)</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> arr = <span class="type">NSKeyedUnarchiver</span>.unarchiveObject(withFile: filePath!) <span class="keyword">as</span>! [<span class="type">Person</span>]</div><div class="line">    <span class="keyword">let</span> <span class="built_in">max</span> = arr.first</div><div class="line">    <span class="keyword">let</span> <span class="built_in">min</span> = arr.last</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(<span class="built_in">max</span>?.name, <span class="built_in">min</span>?.name)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Runtime 还有很多强大的方法，不仅仅是针对 Class，还有 Method、SEL、Protocol等，我们以后再讲。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Runtime 是 iOS 开发中的知名黑魔法，充分体现了 Objective - C 的动态运行时特性，Swift 是一门静态语言，这意味着代码编译时即确定了其实际调用的方法和类型，所以纯粹的 Swift 类和对象没有办法使用 Runtime，更不存在 Method swizzling，但是呢，Swift 是兼容 Objective - C 的，继承自 NSObject 的类，也就具有了运行时的消息机制。&lt;/p&gt;
&lt;p&gt;纯粹的 Swift 类，也可以通过添加 &lt;code&gt;@objc&lt;/code&gt; 修饰符， &lt;code&gt;@objc&lt;/code&gt; 关键字只需要对那些不是继承自 &lt;code&gt;NSObject&lt;/code&gt; 的类型进行，如果 class 是继承自 &lt;code&gt;NSObject&lt;/code&gt; 的话，Swift 会默认自动为所有的非 private 的类和成员加上 &lt;code&gt;@objc&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt; &lt;code&gt;@objc&lt;/code&gt; 修饰符主要用于需要暴露给 Objective-C 使用的任何地方 (包括类，属性和方法等) ，以支持其动态派发和运行时机制。&lt;/p&gt;
&lt;p&gt;添加 &lt;code&gt;@objc&lt;/code&gt; 修饰符并不意味着这个方法或者属性会变成动态派发，Swift 依然可能会将其优化为静态调用。如果需要施展一些像 Method swizzling 或者运行时再决定实现这样的 “黑魔法” 的时候，我们就必须用到 &lt;code&gt;dynamic&lt;/code&gt; 修饰符了。 &lt;code&gt;dynamic&lt;/code&gt; 修饰符会隐式的添加 &lt;code&gt;@objc&lt;/code&gt; 进行修饰。&lt;/p&gt;
&lt;p&gt;也就是说，需要 Swift 和 Objective 混合开发时，使用 &lt;code&gt;@objc&lt;/code&gt; 就可以了，需要 Swift 完全实现运行时机制时，那么必须要添加 &lt;code&gt;dynamic&lt;/code&gt; 修饰符。&lt;/p&gt;
&lt;p&gt;下面我们通过优化归解档，来了解 Runtime 在 Swift 中的应用：&lt;/p&gt;
    
    </summary>
    
      <category term="Runtime" scheme="http://yoursite.com/categories/Runtime/"/>
    
    
      <category term="Runtime" scheme="http://yoursite.com/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式 - KVC内部机制&amp;使用场景</title>
    <link href="http://yoursite.com/2016/12/21/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%20-%20KVC%E5%86%85%E9%83%A8%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/12/21/iOS设计模式 - KVC内部机制/</id>
    <published>2016-12-20T18:24:00.000Z</published>
    <updated>2017-01-24T15:46:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天面试在KVC的问题上有所欠缺，对于底层了解不够，因此写下这篇文章。这篇文章主要是使用KVC对Key的搜索原理，自己写代码来实现KVC。</p>
<p>关于Apple是如何实现KVC这个问题：</p>
<blockquote>
<p>🙃 🙃 我也不知道…… </p>
</blockquote>
<p>因为没有办法打印出调用过的函数，所以KVC背后的一切还是很神秘的，只能通过几个有限的API来猜想，</p>
<p>对于<code>setValue:forKey:</code> ，在setter存在的情况，KVC 会直接发送<code>set&lt;Key&gt;:</code> 消息赋值；</p>
<p>在setter不在的情况下，且<code>accessInstanceVariablesDirectly</code>方法是true的情况下，会按<code>（_&lt;key&gt;, _&lt;isKey&gt;, &lt;key&gt;, is&lt;Key&gt;）</code>的顺序去查找实例变量，检查其是否存在之后通过<code>object_setIvar</code>给它赋值。</p>
<p>如果都没有就调用<code>setValue:forUNdefinedKey:</code>抛出错误。</p>
<p>对于<code>setValue:forKeyPath:</code>，递归地检查keyPath中的属性是否存在，到达目标路径时再调用<code>setValue:forKey:</code> 完成赋值。</p>
<p>大致上我准备按上面的执行顺序进行实现，由于集合、字典和模型、KeyPath的情况比较复杂，所以我只实现了最普通的存值和取值，下面进入正题：</p>
   <a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MyError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">NotExist</span></div><div class="line">    <span class="keyword">case</span> <span class="type">NotNSObjectType</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setMyValue</span><span class="params">(value value: AnyObject?, forKey key: String?)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">        </div><div class="line">        <span class="comment">/**判断Key是否是空值*/</span></div><div class="line">        <span class="keyword">if</span> key!.isEmpty &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MyError</span>.<span class="type">NotExist</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**判断Value是否是空值*/</span></div><div class="line">        <span class="keyword">if</span> value == <span class="literal">nil</span>  &#123;</div><div class="line">            <span class="keyword">self</span>.setMyNilValue(key!)</div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**判断Value是否是NSObject类型*/</span></div><div class="line">        <span class="keyword">if</span> !(value <span class="keyword">is</span> <span class="type">NSObject</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MyError</span>.<span class="type">NotNSObjectType</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**判断是否存在setKey方法，如果有执行这个方法*/</span></div><div class="line">        <span class="keyword">let</span> funcName = <span class="string">"set"</span> + (key?.capitalizedString)! + <span class="string">":"</span></div><div class="line">        </div><div class="line">        <span class="keyword">let</span> selector = <span class="type">NSSelectorFromString</span>(funcName)</div><div class="line">        <span class="comment">//let selector = Selector.init(funcName)</span></div><div class="line">        <span class="comment">//let selector = #selector(Address.setCity(_:))</span></div><div class="line">        <span class="comment">//print(self.respondsToSelector(selector))</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.respondsToSelector(selector)&#123;</div><div class="line">            <span class="keyword">self</span>.performSelector((selector), withObject: value)</div><div class="line">            <span class="comment">//print("执行setKey方法")</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/**判断该类中是否存在 key、_key、iskey成员，如果有给这个成员赋值*/</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> flag: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">        <span class="keyword">let</span> iVars = class_copyIvarList(<span class="keyword">self</span>.<span class="keyword">dynamicType</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">let</span> iVar = iVars[<span class="type">Int</span>(i)]</div><div class="line">            <span class="keyword">let</span> keyName = <span class="type">NSString</span>(<span class="type">CString</span>: ivar_getName(iVar), encoding: <span class="type">NSUTF8StringEncoding</span>)</div><div class="line">            <span class="keyword">if</span> keyName == key! || keyName == <span class="string">"_"</span> + key! || keyName == <span class="string">"is"</span> + key!&#123;</div><div class="line">                flag = <span class="literal">true</span></div><div class="line">                </div><div class="line">                object_setIvar(<span class="keyword">self</span>, iVar, value)</div><div class="line">                <span class="comment">//print("\(self) \(iVar) \(value)")</span></div><div class="line">                <span class="comment">//print("给\(keyName)赋值")</span></div><div class="line">                <span class="keyword">break</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/**如果以上的成员和方法都不存在，调用未找到key的方法*/</span></div><div class="line">        <span class="keyword">if</span> !flag &#123;</div><div class="line">            <span class="keyword">self</span>.setMyValue(value!, forUndefinedKey: key!)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setMyNilValue</span><span class="params">(key: String?)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"无法修改\(key)的值，因为传入的是空值"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">setMyValue</span><span class="params">(value: AnyObject, forUndefinedKey key: String)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"无法将\(key)的值修改为，因为传入的是空值"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myValueForKey</span><span class="params">(key: String?)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">AnyObject</span>? &#123;</div><div class="line">        </div><div class="line">        <span class="comment">/**判断Key是否是空值*/</span></div><div class="line">        <span class="keyword">if</span> key!.isEmpty &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MyError</span>.<span class="type">NotExist</span></div><div class="line">        &#125;</div><div class="line">        <span class="comment">/**判断是否存在getKey方法，如果有执行这个方法*/</span></div><div class="line">        <span class="keyword">let</span> funcName = <span class="string">"get"</span> + (key?.capitalizedString)! + <span class="string">":"</span></div><div class="line">        <span class="keyword">let</span> selector = <span class="type">NSSelectorFromString</span>(funcName)</div><div class="line">        <span class="comment">//let selector = Selector.init(funcName)</span></div><div class="line">        <span class="comment">//let selector = #selector(Address.setCity(_:))</span></div><div class="line">        <span class="comment">//print(self.respondsToSelector(selector))</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.respondsToSelector(selector)&#123;</div><div class="line">            <span class="keyword">let</span> result =  <span class="keyword">self</span>.performSelector(selector)</div><div class="line">            <span class="comment">//print("执行getKey方法")</span></div><div class="line">            <span class="keyword">return</span> result <span class="keyword">as</span>? <span class="type">AnyObject</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/**判断该类中是否存在 key、_key、iskey成员，如果有给这个成员赋值*/</span></div><div class="line">        <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">        <span class="keyword">var</span> flag: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">        <span class="keyword">let</span> iVars = class_copyIvarList(<span class="keyword">self</span>.<span class="keyword">dynamicType</span>, &amp;<span class="built_in">count</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</div><div class="line">            <span class="keyword">let</span> iVar = iVars[<span class="type">Int</span>(i)]</div><div class="line">            <span class="keyword">let</span> keyName = <span class="type">NSString</span>(<span class="type">CString</span>: ivar_getName(iVar), encoding: <span class="type">NSUTF8StringEncoding</span>)</div><div class="line">            <span class="keyword">if</span> keyName == key! || keyName == <span class="string">"_"</span> + key! || keyName == <span class="string">"is"</span> + key!&#123;</div><div class="line">                flag = <span class="literal">true</span></div><div class="line">                <span class="built_in">print</span>(<span class="string">"取出\(keyName)的值"</span>)</div><div class="line">                <span class="comment">//print("\(self) \(iVar) \(value)")</span></div><div class="line">                <span class="keyword">return</span> object_getIvar(<span class="keyword">self</span>, iVar)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">/**如果以上的成员和方法都不存在，调用未找到key的方法*/</span></div><div class="line">        <span class="keyword">if</span> !flag &#123;</div><div class="line">            <span class="keyword">self</span>.myValueForUndefinedKey(key!)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">myValueForUndefinedKey</span><span class="params">(key: String)</span></span> -&gt; <span class="type">AnyObject</span>?&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"无法取出\(key)的值，因为属性不存在"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**执行*/</span></div><div class="line"><span class="keyword">let</span> add = <span class="type">Address</span>()</div><div class="line"></div><div class="line">add._country = <span class="string">"China"</span></div><div class="line">add._province = <span class="string">"HeBei"</span></div><div class="line">add._city = <span class="string">"ShiJiaZhuang"</span></div><div class="line">add._province = <span class="string">"ChangAnQu"</span></div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> add.setMyValue(value: <span class="string">"BeiJing"</span>, forKey: <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">try</span> add.setMyValue(value: <span class="string">"USA"</span>, forKey: <span class="string">"country"</span>)</div><div class="line">    <span class="keyword">try</span> add.setMyValue(value: <span class="string">"South"</span>, forKey: <span class="string">""</span>)</div><div class="line">    <span class="keyword">try</span> add.setMyValue(value: <span class="string">"300169"</span>, forKey: <span class="string">"postCode"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"country:\(add._country) city:\(add._city) province:\(add._province) district\(add._district)"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> <span class="type">MyError</span>.<span class="type">NotExist</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"key是空的"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> <span class="type">MyError</span>.<span class="type">NotNSObjectType</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"value不是NSObject类型"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"传值出错"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">let</span> country = <span class="keyword">try</span> add.myValueForKey(<span class="string">"country"</span>)</div><div class="line">    <span class="keyword">let</span> city = <span class="keyword">try</span> add.myValueForKey(<span class="string">"city"</span>)</div><div class="line">    <span class="built_in">print</span>(<span class="string">"----------------/n \(country) \(city)"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> <span class="type">MyError</span>.<span class="type">NotExist</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"key是空的"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"取值出错"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上是根据KVC执行顺序自定义的一段代码，当然也省略了一些功能，总体上的逻辑还是比较清楚的，但是有一点问题，在使用<code>object_setIvar</code>和<code>object_getIvar</code>这两个runtime函数时，程序会频繁崩溃，而自己对runtime认识不足，以后再完整这段代码吧。</p>
<p>关于KVC，除去存取方法，底层执行顺序，错误处理以外，还有几点需要了解：</p>
<h2 id="Value合法性校验"><a href="#Value合法性校验" class="headerlink" title="Value合法性校验"></a>Value合法性校验</h2><p>KVC提供了校验key对应的value是否合法的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">validateValue</span><span class="params">(ioValue: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey inKey: String)</span></span> <span class="keyword">throws</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">validateValue</span><span class="params">(ioValue: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKeyPath inKeyPath: String)</span></span> <span class="keyword">throws</span></div></pre></td></tr></table></figure>
<p>如果使用这个方法，需要进行重写，它的使用方法如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Address</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> _country: <span class="type">String</span>?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">validateValue</span><span class="params">(ioValue: AutoreleasingUnsafeMutablePointer&lt;AnyObject?&gt;, forKey inKey: String)</span></span> <span class="keyword">throws</span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">let</span> country = ioValue.memory <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">if</span> country == <span class="string">"Janpan"</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="type">MyError</span>.<span class="type">NotExist</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> <span class="type">MyError</span>.<span class="type">Nothing</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**执行*/</span></div><div class="line"><span class="keyword">let</span> add = <span class="type">Address</span>()</div><div class="line"><span class="keyword">var</span> value: <span class="type">AnyObject</span>? = <span class="string">"Janpan"</span></div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="keyword">try</span> add.validateValue(&amp;value, forKey: <span class="string">"_country"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> <span class="type">MyError</span>.<span class="type">NotExist</span> &#123;</div><div class="line">    <span class="built_in">print</span>(<span class="string">"输入有误，请重新输入"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> <span class="type">MyError</span>.<span class="type">Nothing</span> &#123;</div><div class="line">    add.setValue(value, forKey: <span class="string">"_country"</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">catch</span> &#123;&#125;</div><div class="line"><span class="built_in">print</span>(add._country)</div><div class="line"></div><div class="line"><span class="comment">/**当 var value: AnyObject? = "Janpan" 时输出*/</span></div><div class="line">输入有误，请重新输入</div><div class="line"><span class="literal">nil</span></div><div class="line"><span class="comment">/**当 var value: AnyObject? = "Chain" 时输出*/</span></div><div class="line"><span class="type">Optional</span>(<span class="string">"China"</span>)</div></pre></td></tr></table></figure>
<p>这样就实现了先对传入值的合法性进行校验，无误后再进行赋值，如上面的代码，当我们需要验证能不能用KVC设定某个值时，可以将其重写后调用</p>
<blockquote>
<p><code>validateValue: forKey:</code></p>
</blockquote>
<p>这个方法来验证，那么KVC就会直接调用这个方法来返回。<strong>需要注意的是即使重写了该方法，如果我们没有主动进行调用，KVC也不会主动去做验证，所以这个方法需要手动调用。</strong></p>
<h2 id="KVC的应用场景"><a href="#KVC的应用场景" class="headerlink" title="KVC的应用场景"></a>KVC的应用场景</h2><p>作为iOS平台的知名黑魔法，KVC有很多奇特的作用，KVC在iOS开发中是绝不可少的利器，这种基于运行时的编程方式极大地提高了灵活性，简化了代码，它的常见作用有以下几点：</p>
<h2 id="动态的存值和取值"><a href="#动态的存值和取值" class="headerlink" title="动态的存值和取值"></a>动态的存值和取值</h2><p>🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 🙃 </p>
<h2 id="访问和修改私有的成员"><a href="#访问和修改私有的成员" class="headerlink" title="访问和修改私有的成员"></a>访问和修改私有的成员</h2><p>对于类里的私有属性，无论Swift还是Objective-C都是无法直接访问的，但是KVC是可以的。</p>
<h2 id="Model和字典的互相转换"><a href="#Model和字典的互相转换" class="headerlink" title="Model和字典的互相转换"></a>Model和字典的互相转换</h2><p>这是KVC又一个强大之处，只需要很少的代码量即可完成很多功能。</p>
<h2 id="修改控件的内部属性"><a href="#修改控件的内部属性" class="headerlink" title="修改控件的内部属性"></a>修改控件的内部属性</h2><p>这也是iOS开发中必不可少的小技巧。众所周知很多UI控件都由很多内部UI控件组合而成的，但是Apple没有提供这访问这些控件的API，这样我们就无法正常地访问和修改这些控件的样式。</p>
<p>而KVC在大多数情况可下可以解决这个问题。比如个性化UITextField中的placeHolderText，一般情况下可以运用runtime来获取Apple不想开放的属性名：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**执行*/</span></div><div class="line"><span class="keyword">let</span> <span class="built_in">count</span>:<span class="type">UnsafeMutablePointer</span>&lt;<span class="type">UInt32</span>&gt; =  <span class="literal">nil</span></div><div class="line"><span class="keyword">var</span> properties = class_copyIvarList(<span class="type">UITextField</span>.<span class="keyword">self</span>, <span class="built_in">count</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> properties.memory.debugDescription !=  <span class="string">"0x0000000000000000"</span>&#123;</div><div class="line">    <span class="keyword">let</span> t = ivar_getName(properties.memory)</div><div class="line">    <span class="keyword">let</span> n = <span class="type">NSString</span>(<span class="type">CString</span>: t, encoding: <span class="type">NSUTF8StringEncoding</span>)</div><div class="line">    <span class="built_in">print</span>(n)</div><div class="line">    properties = properties.successor()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**输出*/</span></div><div class="line">......</div><div class="line"><span class="type">Optional</span>(_background)</div><div class="line"><span class="type">Optional</span>(_disabledBackground)</div><div class="line"><span class="type">Optional</span>(_clearButtonMode)</div><div class="line"><span class="type">Optional</span>(_leftView)</div><div class="line"><span class="type">Optional</span>(_leftViewMode)</div><div class="line"><span class="type">Optional</span>(_rightView)</div><div class="line"><span class="type">Optional</span>(_rightViewMode)</div><div class="line"><span class="type">Optional</span>(_traits)</div><div class="line"><span class="type">Optional</span>(_nonAtomTraits)</div><div class="line"><span class="type">Optional</span>(_fullFontSize)</div><div class="line"><span class="type">Optional</span>(_padding)</div><div class="line"><span class="type">Optional</span>(_selectionRangeWhenNotEditing)</div><div class="line">......</div></pre></td></tr></table></figure>
<p>可以从里面看到其他还有很多东西可以修改，运用KVC设值可以获得自己想要的效果。</p>
<h2 id="KVC操作集合"><a href="#KVC操作集合" class="headerlink" title="KVC操作集合"></a>KVC操作集合</h2><p>Apple对KVC的<code>valueForKey:</code>方法作了一些特殊的实现，比如说NSArray和NSSet这样的容器类就实现了这些方法，所以可以用KVC很方便地操作集合。</p>
<h3 id="高阶信息传递"><a href="#高阶信息传递" class="headerlink" title="高阶信息传递"></a>高阶信息传递</h3><p>当对容器类使用KVC时，<code>valueForKey:</code>将会被传递给容器中的每一个对象，而不是容器本身进行操作。结果会被添加进返回的容器中，这样，开发者可以很方便的操作集合来返回另一个集合：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**执行*/</span></div><div class="line"><span class="keyword">let</span> arrStr: <span class="type">NSArray</span> = [<span class="string">"english"</span>, <span class="string">"franch"</span>, <span class="string">"chinese"</span>]</div><div class="line"><span class="keyword">let</span> arrCapStr = arrStr.value(forKey: <span class="string">"capitalizedString"</span>)</div><div class="line"><span class="built_in">print</span>(arrCapStr <span class="keyword">as</span>! <span class="type">NSArray</span>)</div><div class="line"></div><div class="line"><span class="keyword">let</span> arrStrLength = arrStr.value(forKeyPath: <span class="string">"capitalizedString.length"</span>)</div><div class="line"><span class="built_in">print</span>(arrStrLength! <span class="keyword">as</span>! <span class="type">NSArray</span>)</div><div class="line"></div><div class="line"><span class="comment">/**输出*/</span></div><div class="line">(</div><div class="line">    <span class="type">English</span>,</div><div class="line">    <span class="type">Franch</span>,</div><div class="line">    <span class="type">Chinese</span></div><div class="line">)</div><div class="line">(</div><div class="line">    <span class="number">7</span>,</div><div class="line">    <span class="number">6</span>,</div><div class="line">    <span class="number">7</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>方法<code>capitalizedString</code>被传递到NSArray中的每一项，这样，NSArray的每一员都会执行<code>capitalizedString</code>并返回一个包含结果的新的NSArray。从打印结果可以看出，所有String都成功以转成了大写。<br>同样如果要执行多个方法也可以用<code>valueForKeyPath:</code>方法。它先会对每一个成员调用 <code>capitalizedString</code>方法，然后再调用length，因为lenth方法返回是一个数字，所以返回结果以NSNumber的形式保存在新数组里。</p>
<h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><p>当然了，KVC除了传值取值，访问和修改私有变量，修改控件属性，操作集合、字典和模型，更重要的就是KVO了。</p>
<h2 id="Demo下载请点击这里"><a href="#Demo下载请点击这里" class="headerlink" title="Demo下载请点击这里"></a>Demo下载请<a href="https://github.com/tianziyao/MyCustomKVC" target="_blank" rel="external">点击这里</a></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天面试在KVC的问题上有所欠缺，对于底层了解不够，因此写下这篇文章。这篇文章主要是使用KVC对Key的搜索原理，自己写代码来实现KVC。&lt;/p&gt;
&lt;p&gt;关于Apple是如何实现KVC这个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🙃 🙃 我也不知道…… &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为没有办法打印出调用过的函数，所以KVC背后的一切还是很神秘的，只能通过几个有限的API来猜想，&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;setValue:forKey:&lt;/code&gt; ，在setter存在的情况，KVC 会直接发送&lt;code&gt;set&amp;lt;Key&amp;gt;:&lt;/code&gt; 消息赋值；&lt;/p&gt;
&lt;p&gt;在setter不在的情况下，且&lt;code&gt;accessInstanceVariablesDirectly&lt;/code&gt;方法是true的情况下，会按&lt;code&gt;（_&amp;lt;key&amp;gt;, _&amp;lt;isKey&amp;gt;, &amp;lt;key&amp;gt;, is&amp;lt;Key&amp;gt;）&lt;/code&gt;的顺序去查找实例变量，检查其是否存在之后通过&lt;code&gt;object_setIvar&lt;/code&gt;给它赋值。&lt;/p&gt;
&lt;p&gt;如果都没有就调用&lt;code&gt;setValue:forUNdefinedKey:&lt;/code&gt;抛出错误。&lt;/p&gt;
&lt;p&gt;对于&lt;code&gt;setValue:forKeyPath:&lt;/code&gt;，递归地检查keyPath中的属性是否存在，到达目标路径时再调用&lt;code&gt;setValue:forKey:&lt;/code&gt; 完成赋值。&lt;/p&gt;
&lt;p&gt;大致上我准备按上面的执行顺序进行实现，由于集合、字典和模型、KeyPath的情况比较复杂，所以我只实现了最普通的存值和取值，下面进入正题：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="KVC" scheme="http://yoursite.com/tags/KVC/"/>
    
  </entry>
  
  <entry>
    <title>Xcode错误 - Plist和转义符「/」</title>
    <link href="http://yoursite.com/2016/11/26/Plist%20%E5%92%8C%E8%BD%AC%E4%B9%89%E7%AC%A6/"/>
    <id>http://yoursite.com/2016/11/26/Plist 和转义符/</id>
    <published>2016-11-25T18:24:00.000Z</published>
    <updated>2017-01-24T15:58:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前两天遇到一个 Plist 和转义符的问题，这个问题我翻了 Google 十几页，但是并没有找到解决的方法，也没有找到关于这个问题的描述，因此我想先记录下来，如果有人和我遇到同样的问题，可以知道结果是怎样的。</p>
<p>当然，由于我的才疏学浅，我没能解决不一定大家都不能解决，如果你有解决的思路，欢迎邮件我啊！</p>
<p><strong>如果不想看过程，可以直接翻到最下面看验证的结果</strong>。</p>
<p>问题是这样的，我创建了一个 Plist 文件，希望用来存储用户的设置选项，遇到的第一个坑是 KVC 不支持 Bool 类型，这个是我没想起了，使用 0 和 1 来替代解决了，现在要讲的是第二个坑。</p>
<p>因为我在项目中使用了字体图标，它类似 Emoji 表情：使用 Unicode 编码，获取特定的图标。在其他的页面中，我使用了全局变量 + UILabel 转 UIImage 的方式，获取并使用字体图标，代码如下：</p>
   <a id="more"></a>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> settingIconCode = <span class="string">"\u&#123;e702&#125;"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">image</span>(<span class="title">withIconCode</span> <span class="title">iconCode</span>: <span class="title">String</span>, <span class="title">fontName</span>: <span class="title">String</span>, <span class="title">size</span>: <span class="title">CGFloat</span>, <span class="title">color</span>: <span class="title">UIColor</span>?) -&gt; <span class="title">UIImage</span>? </span>&#123;</div><div class="line">                </div><div class="line">        <span class="keyword">let</span> imageSize = <span class="type">CGSize</span>(width: size, height: size)</div><div class="line">        <span class="type">UIGraphicsBeginImageContextWithOptions</span>(imageSize, <span class="literal">false</span>, <span class="type">UIScreen</span>.main.scale)</div><div class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: size, height: size))</div><div class="line">        label.font = <span class="type">UIFont</span>(name: fontName, size: size)</div><div class="line">        label.text = iconCode</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (color != <span class="literal">nil</span>) &#123;</div><div class="line">            label.textColor = color</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            label.textColor = <span class="type">UIColor</span>.white</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        label.layer.render(<span class="keyword">in</span>: <span class="type">UIGraphicsGetCurrentContext</span>()!)</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> image = <span class="type">UIGraphicsGetImageFromCurrentImageContext</span>() &#123;</div><div class="line">            <span class="keyword">return</span> image</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"绘制失败"</span>)</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当我写到设置页面时，决定用 Plist 作为本地化存储的方案，因此我创建了一个 Plist 文件，然后每个 Item 包含以下 4 个属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 设置项名称</span></div><div class="line"><span class="keyword">var</span> name: <span class="type">String</span>!</div><div class="line"><span class="comment">/// 设置项图标</span></div><div class="line"><span class="keyword">var</span> iconCode: <span class="type">String</span>!</div><div class="line"><span class="comment">/// 是否显示 Switch 控件</span></div><div class="line"><span class="keyword">var</span> switchHide: <span class="type">String</span>!</div><div class="line"><span class="comment">/// 设置项状态</span></div><div class="line"><span class="keyword">var</span> state: <span class="type">String</span>!</div></pre></td></tr></table></figure>
<p>讲道理这时我已经可以转模型然后在 Cell 里面使用了，但是在我使用上面写的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">image</span>(<span class="title">withIconCode</span> <span class="title">iconCode</span>: <span class="title">String</span>, <span class="title">fontName</span>: <span class="title">String</span>, <span class="title">size</span>: <span class="title">CGFloat</span>, <span class="title">color</span>: <span class="title">UIColor</span>?) -&gt; <span class="title">UIImage</span>?</span></div></pre></td></tr></table></figure>
<p>发现这个方法失效了，返回的是 <code>…</code> 图片，而不是应该获取的字体图标，这个省略号自然是因为超出 <code>UILabel</code> 的显示范围形成的，下面为了叙述方便，我用 <code>\u{e702}</code> 来代入。</p>
<p>之前我的全局变量 <code>settingIconCode</code> ，传入到 <code>imageWithIconCode</code> 方法时没有问题，但是将 <code>\u{e702}</code> 写在 Plist 中赋值给 <code>iconCode</code>，再转为模型后出错，于是我打印了 <code>iconCode</code> 参数，结果和我预期是一样的 <code>\u{e702}</code>，然后我将 <code>iconCode</code> 和 <code>\u{e702}</code> 一起打印，输出结果如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(<span class="string">"\u&#123;e702&#125;"</span>, iconCode)		<span class="comment">//？ \u&#123;e702&#125;</span></div></pre></td></tr></table></figure>
<p>这说明两者虽然都是 String 类型，Value 看起来也一样，但是并不是同一个东西，于是我想到<strong>会不会是因为 <code>\u{e702}</code> 是经过转换的 String，而 <code>iconCode</code> 是单纯的 String？</strong></p>
<p>我们知道，<code>\u{e702}</code> 等同于 <code>U+\e702</code> ，也就是 16 进制的 <code>e702</code> ，因此我在 Plist 中，将 <code>iconCode</code> 修改为 16 进制的 <code>0x1E702</code> ，然后我通过 <code>\u{\(iconCode)}</code> 进行转换，但是出错了， <strong>这里的<code>{}</code> 中不允许使用 <code>\()</code>，因此不能使用字符串拼接</strong>。</p>
<p>于是我放弃了这个方法，回想是不是<strong>对象是不是被修改了</strong>，因此我找到最初读取到 Plist 的地方，打印获取的 Plist 数组：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> settingDicts = <span class="type">NSArray</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"Setting.plist"</span>, ofType: <span class="literal">nil</span>)!)</div><div class="line"><span class="built_in">print</span>(settingDicts?.firstObject)</div></pre></td></tr></table></figure>
<p>我得到的结果是：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Optional</span>(&#123;</div><div class="line">    iconCode = <span class="string">"\\u&#123;e702&#125;"</span>;</div><div class="line">    name = <span class="string">"\U81ea\U52a8\U5b9a\U4f4d\U5230\U6700\U8fd1\U7ad9\U70b9"</span>;</div><div class="line">    state = <span class="number">0</span>;</div><div class="line">    switchHide = <span class="number">1</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>从这里可以看到，打印结果多出了一个  <code>\</code>，因此我猜想，Plist 并不能理解转义符，因此将 <code>\</code> 当做字符来处理，所以  <code>\ = \\</code>，为了验证这个猜想，我又修改了 Value 并打印，得到的结果如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">iconCode = \(iconCode)		<span class="comment">//iconCode = "\\(iconCode)";</span></div><div class="line">iconCode = (iconCode)		<span class="comment">//iconCode = "(iconCode)";</span></div><div class="line">iconCode = \\(iconCode)		<span class="comment">//iconCode = "\\\\(iconCode)";</span></div></pre></td></tr></table></figure>
<p> <strong>因此我们可以得出结论，Plist 并不能理解转义符，因此会将 <code>\</code> 当做字符来处理，而不是当做转义符来处理</strong>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前两天遇到一个 Plist 和转义符的问题，这个问题我翻了 Google 十几页，但是并没有找到解决的方法，也没有找到关于这个问题的描述，因此我想先记录下来，如果有人和我遇到同样的问题，可以知道结果是怎样的。&lt;/p&gt;
&lt;p&gt;当然，由于我的才疏学浅，我没能解决不一定大家都不能解决，如果你有解决的思路，欢迎邮件我啊！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果不想看过程，可以直接翻到最下面看验证的结果&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;问题是这样的，我创建了一个 Plist 文件，希望用来存储用户的设置选项，遇到的第一个坑是 KVC 不支持 Bool 类型，这个是我没想起了，使用 0 和 1 来替代解决了，现在要讲的是第二个坑。&lt;/p&gt;
&lt;p&gt;因为我在项目中使用了字体图标，它类似 Emoji 表情：使用 Unicode 编码，获取特定的图标。在其他的页面中，我使用了全局变量 + UILabel 转 UIImage 的方式，获取并使用字体图标，代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Xcode错误" scheme="http://yoursite.com/categories/Xcode%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="Xcode错误" scheme="http://yoursite.com/tags/Xcode%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
</feed>
