<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iSTian&#39;notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-21T18:08:09.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>iSTian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>转载 - Charles从入门到精通</title>
    <link href="http://yoursite.com/2016/08/20/Charles%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
    <id>http://yoursite.com/2016/08/20/Charles从入门到精通/</id>
    <published>2016-08-19T20:44:00.000Z</published>
    <updated>2016-08-21T18:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.charlesproxy.com/" target="_blank" rel="external">Charles</a> 是在 Mac 下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。</p>
<p>Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。</p>
<p>除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。</p>
<p>Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。</p>
<a id="more"></a>
<p>Charles 主要的功能包括：</p>
<ol>
<li>截取 Http 和 Https 网络封包。</li>
<li>支持重发网络请求，方便后端调试。</li>
<li>支持修改网络请求参数。</li>
<li>支持网络请求的截获并动态修改。</li>
<li>支持模拟慢速网络。</li>
</ol>
<p>Charles 4 新增的主要功能包括：</p>
<ol>
<li>支持 Http 2。</li>
<li>支持 IPv6。</li>
</ol>
<h2 id="安装-Charles"><a href="#安装-Charles" class="headerlink" title="安装 Charles"></a>安装 Charles</h2><p>去 Charles 的官方网站（<a href="http://www.charlesproxy.com/" target="_blank" rel="external">http://www.charlesproxy.com</a>）下载最新版的 Charles 安装包，是一个 dmg 后缀的文件。打开后将 Charles 拖到 Application 目录下即完成安装。</p>
<h2 id="将-Charles-设置成系统代理"><a href="#将-Charles-设置成系统代理" class="headerlink" title="将 Charles 设置成系统代理"></a>将 Charles 设置成系统代理</h2><p>之前提到，Charles 是通过将自己设置成代理服务器来完成封包截取的，所以使用 Charles 的第一步是将其设置成系统的代理服务器。</p>
<p>启动 Charles 后，第一次 Charles 会请求你给它设置系统代理的权限。你可以输入登录密码授予 Charles 该权限。你也可以忽略该请求，然后在需要将 Charles 设置成系统代理时，选择菜单中的 “Proxy” -&gt; “Mac OS X Proxy” 来将 Charles 设置成系统代理。如下所示：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/proxy.png" alt="proxy"></p>
<p>之后，你就可以看到源源不断的网络请求出现在 Charles 的界面中。</p>
<p>需要注意的是，Chrome 和 Firefox 浏览器默认并不使用系统的代理服务器设置，而 Charles 是通过将自己设置成代理服务器来完成封包截取的，所以在默认情况下无法截取 Chrome 和 Firefox 浏览器的网络通讯内容。如果你需要截取的话，在 Chrome 中设置成使用系统的代理服务器设置即可，或者直接将代理服务器设置成 <code>127.0.0.1:8888</code> 也可达到相同效果。</p>
<h2 id="Charles-主界面介绍"><a href="#Charles-主界面介绍" class="headerlink" title="Charles 主界面介绍"></a>Charles 主界面介绍</h2><p>Charles 主要提供两种查看封包的视图，分别名为 “Structure” 和 “Sequence”。</p>
<ol>
<li>Structure 视图将网络请求按访问的域名分类。</li>
<li>Sequence 视图将网络请求按访问的时间排序。</li>
</ol>
<p>大家可以根据具体的需要在这两种视图之前来回切换。请求多了有些时候会看不过来，Charles 提供了一个简单的 Filter 功能，可以输入关键字来快速筛选出 URL 中带指定关键字的网络请求。</p>
<p>对于某一个具体的网络请求，你可以查看其详细的请求内容和响应内容。如果请求内容是 POST 的表单，Charles 会自动帮你将表单进行分项显示。如果响应内容是 JSON 格式的，那么 Charles 可以自动帮你将 JSON 内容格式化，方便你查看。如果响应内容是图片，那么 Charles 可以显示出图片的预览。</p>
<h2 id="过滤网络请求"><a href="#过滤网络请求" class="headerlink" title="过滤网络请求"></a>过滤网络请求</h2><p>通常情况下，我们需要对网络请求进行过滤，只监控向指定目录服务器上发送的请求。对于这种需求，以下几种办法：</p>
<p>方法一：在主界面的中部的 Filter 栏中填入需要过滤出来的关键字。例如我们的服务器的地址是：<code>http://yuantiku.com</code> , 那么只需要在 Filter 栏中填入 yuantiku 即可。</p>
<p>方法二：在 Charles 的菜单栏选择 “Proxy”-&gt;”Recording Settings”，然后选择 Include 栏，选择添加一个项目，然后填入需要监控的协议，主机地址，端口号。这样就可以只截取目标网站的封包了。如下图所示：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/guolv.png" alt="guolv"></p>
<p>通常情况下，我们使用方法一做一些临时性的封包过滤，使用方法二做一些经常性的封包过滤。</p>
<p>方法三：在想过滤的网络请求上右击，选择 “Focus”，之后在 Filter 一栏勾选上 Focussed 一项，如下图所示： <img src="http://oboehz2ag.bkt.clouddn.com/focus.png" alt="focus"></p>
<p>这种方式可以临时性的，快速地过滤出一些没有通过关键字的一类网络请求。</p>
<h2 id="截取-iPhone-上的网络封包"><a href="#截取-iPhone-上的网络封包" class="headerlink" title="截取 iPhone 上的网络封包"></a>截取 iPhone 上的网络封包</h2><p>Charles 通常用来截取本地上的网络封包，但是当我们需要时，我们也可以用来截取其它设备上的网络请求。下面我就以 iPhone 为例，讲解如何进行相应操作。</p>
<h3 id="Charles-上的设置"><a href="#Charles-上的设置" class="headerlink" title="Charles 上的设置"></a>Charles 上的设置</h3><p>要截取 iPhone 上的网络请求，我们首先需要将 Charles 的代理功能打开。在 Charles 的菜单栏上选择 “Proxy”-&gt;”Proxy Settings”，填入代理端口 8888，并且勾上 “Enable transparent HTTP proxying” 就完成了在 Charles 上的设置。如下图所示: <img src="http://oboehz2ag.bkt.clouddn.com/iphone.png" alt="iphone"></p>
<h3 id="iPhone-上的设置"><a href="#iPhone-上的设置" class="headerlink" title="iPhone 上的设置"></a>iPhone 上的设置</h3><p>首先我们需要获取 Charles 运行所在电脑的 IP 地址，Charles 的顶部菜单的 “Help”-&gt;”Local IP Address”，即可在弹出的对话框中看到 IP 地址。</p>
<p>在 iPhone 的 “ 设置 “-&gt;” 无线局域网 “ 中，可以看到当前连接的 wifi 名，通过点击右边的详情键，可以看到当前连接上的 wifi 的详细信息，包括 IP 地址，子网掩码等信息。在其最底部有「HTTP 代理」一项，我们将其切换成手动，然后填上 Charles 运行所在的电脑的 IP，以及端口号 8888，如下图所示： <img src="http://oboehz2ag.bkt.clouddn.com/IMG_1849.PNG" alt="IMG_1849"></p>
<p>设置好之后，我们打开 iPhone 上的任意需要网络通讯的程序，就可以看到 Charles 弹出 iPhone 请求连接的确认菜单，点击 “Allow” 即可完成设置。</p>
<h2 id="截取-Https-通讯信息"><a href="#截取-Https-通讯信息" class="headerlink" title="截取 Https 通讯信息"></a>截取 Https 通讯信息</h2><h3 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h3><p>如果你需要截取分析 Https 协议相关的内容。那么需要安装 Charles 的 CA 证书。具体步骤如下。</p>
<p>首先我们需要在 Mac 电脑上安装证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate”，然后输入系统的帐号密码，即可在 KeyChain 看到添加好的证书。</p>
<p>需要注意的是，即使是安装完证书之后，Charles 默认也并不截取 Https 网络通讯的信息，如果你想对截取某个网站上的所有 Https 网络请求，可以在该请求上右击，选择 SSL proxy，这样，对于该 Host 的所有 SSL 请求可以被截取到了。</p>
<h3 id="截取移动设备中的-Https-通讯信息"><a href="#截取移动设备中的-Https-通讯信息" class="headerlink" title="截取移动设备中的 Https 通讯信息"></a>截取移动设备中的 Https 通讯信息</h3><p>如果我们需要在 iOS 或 Android 机器上截取 Https 协议的通讯内容，还需要在手机上安装相应的证书。点击 Charles 的顶部菜单，选择 “Help” -&gt; “SSL Proxying” -&gt; “Install Charles Root Certificate on a Mobile Device or Remote Browser”，然后就可以看到 Charles 弹出的简单的安装教程。</p>
<p>按照我们之前说的教程，在设备上设置好 Charles 为代理后，在手机浏览器中访问地址：<a href="http://charlesproxy.com/getssl" target="_blank" rel="external">http://charlesproxy.com/getssl</a>，即可打开证书安装的界面，安装完证书后，就可以截取手机上的 Https 通讯内容了。不过同样需要注意，默认情况下 Charles 并不做截取，你还需要在要截取的网络请求上右击，选择 SSL proxy 菜单项。</p>
<h2 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h2><p>在做移动开发的时候，我们常常需要模拟慢速网络或者高延迟的网络，以测试在移动网络下，应用的表现是否正常。Charles 对此需求提供了很好的支持。</p>
<p>在 Charles 的菜单上，选择 “Proxy”-&gt;”Throttle Setting” 项，在之后弹出的对话框中，我们可以勾选上 “Enable Throttling”，并且可以设置 Throttle Preset 的类型。</p>
<p>如果我们只想模拟指定网站的慢速网络，可以再勾选上图中的 “Only for selected hosts” 项，然后在对话框的下半部分设置中增加指定的 hosts 项即可。</p>
<h2 id="修改网络请求内容"><a href="#修改网络请求内容" class="headerlink" title="修改网络请求内容"></a>修改网络请求内容</h2><p>有些时候为了调试服务器的接口，我们需要反复尝试不同参数的网络请求。Charles 可以方便地提供网络请求的修改和重发功能。只需要在以往的网络请求上点击右键，选择 “Edit”，即可创建一个可编辑的网络请求。如下所示：</p>
<p>我们可以修改该请求的任何信息，包括 URL 地址、端口、参数等，之后点击 “Execute” 即可发送该修改后的网络请求。Charles 支持我们多次修改和发送该请求，这对于我们和服务器端调试接口非常方便。</p>
<h2 id="给服务器做压力测试"><a href="#给服务器做压力测试" class="headerlink" title="给服务器做压力测试"></a>给服务器做压力测试</h2><p>我们可以使用 Charles 的 Repeat 功能来简单地测试服务器的并发处理能力，方法如下。</p>
<p>我们在想打压的网络请求上（POST 或 GET 请求均可）右击，然后选择 「Repeat Advanced」菜单项，如下所示：</p>
<p>接着我们就可以在弹出的对话框中，选择打压的并发线程数以及打压次数，确定之后，即可开始打压。</p>
<p>悄悄说一句，一些写得很弱的投票网站，也可以用这个办法来快速投票。当然，我也拿 Charles 的 Repeat 功能给一些诈骗的钓鱼网站喂了不少垃圾数据，上次不小心还把一个钓鱼网站的数据库打挂了，嗯，请叫我雷锋。</p>
<h2 id="修改服务器返回内容"><a href="#修改服务器返回内容" class="headerlink" title="修改服务器返回内容"></a>修改服务器返回内容</h2><p>有些时候我们想让服务器返回一些指定的内容，方便我们调试一些特殊情况。例如列表页面为空的情况，数据异常的情况，部分耗时的网络请求超时的情况等。如果没有 Charles，要服务器配合构造相应的数据显得会比较麻烦。这个时候，使用 Charles 相关的功能就可以满足我们的需求。</p>
<p>根据具体的需求，Charles 提供了 Map 功能、 Rewrite 功能以及 Breakpoints 功能，都可以达到修改服务器返回内容的目的。这三者在功能上的差异是：</p>
<ol>
<li>Map 功能适合长期地将某一些请求重定向到另一个网络地址或本地文件。</li>
<li>Rewrite 功能适合对网络请求进行一些正则替换。</li>
<li>Breakpoints 功能适合做一些临时性的修改。</li>
</ol>
<h3 id="Map-功能"><a href="#Map-功能" class="headerlink" title="Map 功能"></a>Map 功能</h3><p>Charles 的 Map 功能分 Map Remote 和 Map Local 两种，顾名思义，Map Remote 是将指定的网络请求重定向到另一个网址请求地址，Map Local 是将指定的网络请求重定向到本地文件。</p>
<p>在 Charles 的菜单中，选择 “Tools”-&gt;”Map Remote” 或 “Map Local” 即可进入到相应功能的设置页面。</p>
<p>对于 Map Remote 功能，我们需要分别填写网络重定向的源地址和目的地址，对于不需要限制的条件，可以留空。下图是一个示例，我将所有 <code>ytk1.yuanku.ws</code>（测试服务器）的请求重定向到了 <code>www.yuantiku.com</code>（线上服务器）。</p>
<p>对于 Map Local 功能，我们需要填写的重定向的源地址和本地的目标文件。对于有一些复杂的网络请求结果，我们可以先使用 Charles 提供的 “Save Response…” 功能，将请求结果保存到本地，然后稍加修改，成为我们的目标映射文件。</p>
<p>下图是一个示例，我将一个指定的网络请求通过 Map Local 功能映射到了本地的一个经过修改的文件中。</p>
<p>Map Local 在使用的时候，有一个潜在的问题，就是其返回的 Http Response Header 与正常的请求并不一样。这个时候如果客户端校验了 Http Response Header 中的部分内容，就会使得该功能失效。解决办法是同时使用 Map Local 以下面提到的 Rewrite 功能，将相关的 Http 头 Rewrite 成我们希望的内容。</p>
<h3 id="Rewrite-功能"><a href="#Rewrite-功能" class="headerlink" title="Rewrite 功能"></a>Rewrite 功能</h3><p>Rewrite 功能功能适合对某一类网络请求进行一些正则替换，以达到修改结果的目的。</p>
<p>例如，我们的客户端有一个 API 请求是获得用户昵称，而我当前的昵称是 “tangqiaoboy”，如下所示：</p>
<p>我们想试着直接修改网络返回值，将 tangqiaoboy 换成成 iosboy。于是我们启用 Rewrite 功能，然后设置如下的规则：</p>
<p>完成设置之后，我们就可以从 Charles 中看到，之后的 API 获得的昵称被自动 Rewrite 成了 iosboy。</p>
<h3 id="Breakpoints-功能"><a href="#Breakpoints-功能" class="headerlink" title="Breakpoints 功能"></a>Breakpoints 功能</h3><p>上面提供的 Rewrite 功能最适合做批量和长期的替换，但是很多时候，我们只是想临时修改一次网络请求结果，这个时候，使用 Rewrite 功能虽然也可以达到目的，但是过于麻烦，对于临时性的修改，我们最好使用 Breakpoints 功能。</p>
<p>Breakpoints 功能类似我们在 Xcode 中设置的断点一样，当指定的网络请求发生时，Charles 会截获该请求，这个时候，我们可以在 Charles 中临时修改网络请求的返回内容。</p>
<p>下图是我们临时修改获取用户信息的 API，将用户的昵称进行了更改，修改完成后点击 “Execute” 则可以让网络请求继续进行。</p>
<p>需要注意的是，使用 Breakpoints 功能将网络请求截获并修改过程中，整个网络请求的计时并不会暂停，所以长时间的暂停可能导致客户端的请求超时。</p>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p>Charles 的反向代理功能允许我们将本地的端口映射到远程的另一个端口上。例如，在下图中，我将本机的 61234 端口映射到了远程（www.yuantiku.com）的80端口上了。这样，当我访问本地的 61234 端口时，实际返回的内容会由 www.yuantiku.com 的 80 端口提供。</p>
<h2 id="设置外部代理，解决与翻墙软件的冲突"><a href="#设置外部代理，解决与翻墙软件的冲突" class="headerlink" title="设置外部代理，解决与翻墙软件的冲突"></a>设置外部代理，解决与翻墙软件的冲突</h2><p>Charles 的原理是把自己设置成系统的代理服务器，但是在中国，由于工作需要，我们常常需要使用 Google 搜索，所以大部分程序员都有自己的翻墙软件，而这些软件的基本原理，也是把自己设置成系统的代理服务器，来做到透明的翻墙。</p>
<p>为了使得两者能够和平共处，我们可以在 Charles 的 <code>External Proxy Settings</code> 中，设置翻墙的代理端口以及相关信息。同时，我们也要关闭相关翻墙软件的自动设置，使其不主动修改系统代理，避免 Charles 失效。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 Charles 软件，我们可以很方便地在日常开发中，截取和调试网络请求内容，分析封包协议以及模拟慢速网络。用好 Charles 可以极大的方便我们对于带有网络请求的 App 的开发和调试。</p>
<p>愿本文帮助大家成为 Charles 的专家，祝大家玩得开心～</p>
<p>转载自：<a href="http://blog.devtang.com/2015/11/14/charles-introduction/" target="_blank" rel="external">http://blog.devtang.com/2015/11/14/charles-introduction/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://www.charlesproxy.com/&quot;&gt;Charles&lt;/a&gt; 是在 Mac 下常用的网络封包截取工具，在做移动开发时，我们为了调试与服务器端的网络通讯协议，常常需要截取网络封包来分析。&lt;/p&gt;
&lt;p&gt;Charles 通过将自己设置成系统的网络访问代理服务器，使得所有的网络访问请求都通过它来完成，从而实现了网络封包的截取和分析。&lt;/p&gt;
&lt;p&gt;除了在做移动开发中调试端口外，Charles 也可以用于分析第三方应用的通讯协议。配合 Charles 的 SSL 功能，Charles 还可以分析 Https 协议。&lt;/p&gt;
&lt;p&gt;Charles 是收费软件，可以免费试用 30 天。试用期过后，未付费的用户仍然可以继续使用，但是每次使用时间不能超过 30 分钟，并且启动时将会有 10 秒种的延时。因此，该付费方案对广大用户还是相当友好的，即使你长期不付费，也能使用完整的软件功能。只是当你需要长时间进行封包调试时，会因为 Charles 强制关闭而遇到影响。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="截取封包" scheme="http://yoursite.com/tags/%E6%88%AA%E5%8F%96%E5%B0%81%E5%8C%85/"/>
    
      <category term="HTTP请求" scheme="http://yoursite.com/tags/HTTP%E8%AF%B7%E6%B1%82/"/>
    
      <category term="HTTP响应" scheme="http://yoursite.com/tags/HTTP%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议 - DNS解析</title>
    <link href="http://yoursite.com/2016/08/19/DNS%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2016/08/19/DNS解析/</id>
    <published>2016-08-18T20:44:00.000Z</published>
    <updated>2016-08-21T18:08:22.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DNS域名系统"><a href="#DNS域名系统" class="headerlink" title="DNS域名系统"></a>DNS域名系统</h3><p>域名系统（英文：Domain Name System，缩写：DNS）是因特网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。如果要了解DNS，首先要了解一下几个概念：</p>
<h4 id="根域"><a href="#根域" class="headerlink" title="根域"></a>根域</h4><p>根域名服务器（英语：root name server）是互联网域名解析系统（DNS）中最高级别的域名服务器，负责返回顶级域名的权威域名服务器的地址。截至2014年10月，全球有504台根服务器，被编号为A到M共13个标号。编号相同的根服务器使用同一个IP，504台根服务器总共只使用13个IP。</p>
<a id="more"></a>
<p>中国大陆在北京有三台编号为L的镜像，编号为F、I、J的镜像各一台，共6台；香港有编号为D、J的镜像各2台，编号为A、F、I、L的镜像各一台，共8台；台湾则有编号为F、I、J各一台，共3台。</p>
<p>全球13组根域名服务器以英文字母A到M依序命名，域名格式为“字母.root-servers.org”。其中有11个是以<strong>任播</strong>技术在全球多个地点设立镜像站。</p>
<h4 id="顶级域"><a href="#顶级域" class="headerlink" title="顶级域"></a>顶级域</h4><p>根域下来就是顶级域或者叫一级域，一种互联网刚兴起时的按照行业性质划分的 <code>.com</code> <code>.net</code> 等通用顶级域，一种是按国家划分的如 <code>.cn</code> <code>.jp</code> 等国家和地区顶级域，每个域都会有域名服务器，也叫权威域名服务器。</p>
<p>目前正在使用的通用顶级域有：</p>
<blockquote>
<p>.com - 供商业机构使用，但无限制<br>.info - 供资讯性网站使用，但无限制<br>.net - 原供网络服务供应商使用，现无限制<br>.org - 原供不属于其他通用顶级域类别的组织使用，现无限制<br>.biz - 供商业使用<br>.name - 供家庭及个人使用<br>.pro - 供部分专业使用<br>.aero - 供航空运输业使用<br>.asia - 供亚太地区的公司、组织及个人使用<br>.cat - 供加泰罗尼亚语/文化使用<br>.coop - 供联合会 (cooperatives)使用<br>.edu - 供教育机构使用<br>.gov - 供美国政府及其属下机构使用<br>.int - 供由条约而成立的国际性机构使用<br>.jobs - 供求职相关网站使用<br>.mil - 供美国军事机构使用<br>.mobi - 供手提电话等装置网站使用<br>.museum - 供博物馆使用<br>.post - 供邮政服务使用<br>.tel - 供连接电话网络与互联网的服务使用<br>.travel - 供旅行社、航空公司、酒店及旅游协会等机构使用<br>.xxx - 供色情网站使用</p>
</blockquote>
<p>举例来说，<code>baidu.com</code> 就是一个顶级域名，但 <code>www.baidu.com</code> 却不是顶级域名，它是在 <code>baidu.com</code> 这个顶级域里的一台叫做 <code>www</code> 的主机。</p>
<h4 id="域名服务器"><a href="#域名服务器" class="headerlink" title="域名服务器"></a>域名服务器</h4><p>能提供域名解析的服务器，上面的记录类型可以是A（address）记录，NS记录（name server），MX（mail），CNAME等。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>主机（A）记录是名称解析的重要记录，它用于将特定的主机名映射到对应主机的IP地址上。你可以在DNS服务器中手动创建或通过DNS客户端动态更新来创建。</td>
</tr>
<tr>
<td>CNAME</td>
<td>此记录用于将某个别名指向到某个主机（A）记录上，从而无需为某个需要新名字解析的主机额外创建A记录。</td>
</tr>
<tr>
<td>MX</td>
<td>此记录列出了负责接收发到域中的电子邮件的主机 ，通常用于邮件的收发。</td>
</tr>
<tr>
<td>NS</td>
<td>此记录指定负责此DNS区域的权威名称服务器。</td>
</tr>
</tbody>
</table>
<p>A记录又称IP指向，用户可以在此设置子域名并指向到自己的目标主机地址上，从而实现通过域名找到服务器。指向的目标主机地址类型只能使用IP地址； </p>
<p>CNAME 通常称别名指向。您可以为一个主机设置别名。比如设置 <code>cname.parser.com</code>，用来指向一个主机 <code>www.server.com</code> 那么以后就可以用 <code>cname.parser.com</code> 来代替访问 <code>www.server.com</code> 了。</p>
<p><strong>CNAME的目标主机地址只能使用主机名，不能使用IP地址；主机名前不能有任何其他前缀，如：<code>http://</code> 等是不被允许的；A记录优先于CNAME记录。即如果一个主机地址同时存在A记录和CNAME记录，则CNAME记录不生效。  </strong></p>
<p>MX记录是指邮件交换记录。用于将以该域名为结尾的电子邮件指向对应的邮件服务器以进行处理。如用户所用的邮件是以域名mail.com为结尾的，则需要在管理界面中添加该域名的MX记录来处理所有以@mail.com结尾的邮件。MX记录可以使用主机名或IP地址。</p>
<p>NS记录是指解析服务器记录。用来表明由哪台服务器对该域名进行解析。这里的NS记录只对子域名生效。</p>
<p>例如用户希望由 <code>12.34.56.78</code> 这台服务器解析 <code>news.mydomain.com</code> ，则需要设置 <code>news.mydomain.com</code> 的NS记录。</p>
<h4 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h4><p>上面讲到互联网都是通过URL来发布和请求资源的，而URL中的域名需要解析成IP地址才能与远程主机建立连接，如何将域名解析成IP地址就属于DNS解析的工作范畴，这个过程大体大体由一张图可以表示：</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/dnsjiexie.png" alt=""></p>
<p>以 <code>www.baidu.com</code> 为例，现在我的计算机要向本地DNS发起请求查询 <code>www.baidu.com</code> 这个域名了，本地DNS可能是ISP提供的，也可能是我自己设置的。</p>
<p>当本地DNS拿到请求后，先检查一下自己的缓存中有没有这个地址，有的话就直接返回。这个时候拿到的ip地址，会被标记为<strong>非权威服务器的应答</strong>。</p>
<p>如果缓存中没有的话，本地DNS会从<strong>配置文件</strong>里面读取13个根域名服务器的地址，然后向其中一台发起请求。</p>
<p>根域名服务器拿到这个请求后，知道他是com.这个顶级域名下的，所以就会返回com域中的NS记录，一般来说是13台主机名和IP。</p>
<p>然后本地DNS向其中一台再次发起请求，com顶级域的服务器发现这个请求是baidu.com这个域的，我一查发现了这个域的NS，那我就返回给你，你再去查。</p>
<p>本地DNS再次向baidu.com这个域的权威服务器发起请求，baidu.com收到之后，查了下有www的这台主机，就把这个IP返回给我了，</p>
<p>最后本地DNS拿到了之后，将其返回给了客户端，并且把这个保存在高速缓存中。</p>
<p>下面我们用Din工具来看一些这个过程：</p>
<p>在命令行中输入：<code>dig +trace www.baidu.com</code> 。</p>
<p>首先我的计算机本地DNS读取了13个根域：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.			447119	IN	NS	m.root-servers.net.</div><div class="line">.			447119	IN	NS	d.root-servers.net.</div><div class="line">.			447119	IN	NS	b.root-servers.net.</div><div class="line">.			447119	IN	NS	e.root-servers.net.</div><div class="line">.			447119	IN	NS	c.root-servers.net.</div><div class="line">.			447119	IN	NS	k.root-servers.net.</div><div class="line">.			447119	IN	NS	g.root-servers.net.</div><div class="line">.			447119	IN	NS	h.root-servers.net.</div><div class="line">.			447119	IN	NS	j.root-servers.net.</div><div class="line">.			447119	IN	NS	a.root-servers.net.</div><div class="line">.			447119	IN	NS	f.root-servers.net.</div><div class="line">.			447119	IN	NS	i.root-servers.net.</div><div class="line">.			447119	IN	NS	l.root-servers.net.</div><div class="line">;; Received 228 bytes from 192.168.199.1#53(192.168.199.1) in 402 ms</div></pre></td></tr></table></figure>
<p>然后向其中一个根域发送了解析请求，根域返回com.顶级域的服务器IP（未显示）和名称，com.域的一台服务器返回了baidu.com域的服务器IP（未显示）和名称，向百度的顶级域服务器 <code>199.7.83.42</code> 请求 <code>www.baidu.com</code> ，它发现这个www的别名是 <code>www.a.shifen.com</code>，和两个主机地址 <code>61.135.169.121 / 61.135.169.125</code> 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">www.baidu.com.		934	IN	CNAME	www.a.shifen.com.</div><div class="line">www.a.shifen.com.	62	IN	A	61.135.169.121</div><div class="line">www.a.shifen.com.	62	IN	A	61.135.169.125</div><div class="line">;; Received 90 bytes from 199.7.83.42#53(199.7.83.42) in 26 ms</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DNS域名系统&quot;&gt;&lt;a href=&quot;#DNS域名系统&quot; class=&quot;headerlink&quot; title=&quot;DNS域名系统&quot;&gt;&lt;/a&gt;DNS域名系统&lt;/h3&gt;&lt;p&gt;域名系统（英文：Domain Name System，缩写：DNS）是因特网的一项服务。它作为将域名和IP地址相互映射的一个分布式数据库，能够使人更方便地访问互联网。DNS使用TCP和UDP端口53。当前，对于每一级域名长度的限制是63个字符，域名总长度则不能超过253个字符。如果要了解DNS，首先要了解一下几个概念：&lt;/p&gt;
&lt;h4 id=&quot;根域&quot;&gt;&lt;a href=&quot;#根域&quot; class=&quot;headerlink&quot; title=&quot;根域&quot;&gt;&lt;/a&gt;根域&lt;/h4&gt;&lt;p&gt;根域名服务器（英语：root name server）是互联网域名解析系统（DNS）中最高级别的域名服务器，负责返回顶级域名的权威域名服务器的地址。截至2014年10月，全球有504台根服务器，被编号为A到M共13个标号。编号相同的根服务器使用同一个IP，504台根服务器总共只使用13个IP。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP" scheme="http://yoursite.com/tags/HTTP/"/>
    
      <category term="DNS" scheme="http://yoursite.com/tags/DNS/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求 - 请求方法</title>
    <link href="http://yoursite.com/2016/08/18/HTTP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/08/18/HTTP请求方法/</id>
    <published>2016-08-17T20:44:00.000Z</published>
    <updated>2016-08-21T18:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>根据HTTP标准，HTTP请求可以使用多种请求方法。</p>
<p>HTTP1.0定义了三种请求方法： GET, POST和HEAD方法。</p>
<p>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE和CONNECT方法。</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>GET</td>
<td>请求指定的页面信息，并返回实体主体。</td>
</tr>
<tr>
<td>HEAD</td>
<td>类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头。</td>
</tr>
<tr>
<td>POST</td>
<td>向指定资源提交数据进行处理请求，如提交表单或者上传文件。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</td>
</tr>
<tr>
<td>PUT</td>
<td>从客户端向服务器传送的数据取代指定的文档的内容。</td>
</tr>
<tr>
<td>DELETE</td>
<td>请求服务器删除指定的页面。</td>
</tr>
<tr>
<td>CONNECT</td>
<td>HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>允许客户端查看服务器的性能。</td>
</tr>
<tr>
<td>TRACE</td>
<td>请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>在客户机和服务器之间进行请求-响应时，两种最常被用到的方法是：GET 和 POST。</p>
<ul>
<li><em>GET</em> - 从指定的资源请求数据；</li>
<li><em>POST</em> - 向指定的资源提交要被处理的数据；</li>
</ul>
<h4 id="get请求方法"><a href="#get请求方法" class="headerlink" title="get请求方法"></a>get请求方法</h4><p>查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/test/demo_form.asp?name1=value1&amp;name2=value2</div></pre></td></tr></table></figure>
<p>有关 GET 请求的其他一些注释：</p>
<ul>
<li>GET 请求可被缓存</li>
<li>GET 请求保留在浏览器历史记录中</li>
<li>GET 请求可被收藏为书签</li>
<li>GET 请求不应在处理敏感数据时使用</li>
<li>GET 请求有长度限制</li>
<li>GET 请求只应当用于取回数据</li>
</ul>
<h4 id="post请求方法"><a href="#post请求方法" class="headerlink" title="post请求方法"></a>post请求方法</h4><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">POST /test/demo_form.asp HTTP/1.1</div><div class="line">Host: w3schools.com</div><div class="line">name1=value1&amp;name2=value2</div></pre></td></tr></table></figure>
<p>有关 POST 请求的其他一些注释：</p>
<ul>
<li>POST 请求不会被缓存</li>
<li>POST 请求不会保留在浏览器历史记录中</li>
<li>POST 不能被收藏为书签</li>
<li>POST 请求对数据长度没有要求</li>
</ul>
<h4 id="post和get的区别"><a href="#post和get的区别" class="headerlink" title="post和get的区别"></a>post和get的区别</h4><table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody>
<tr>
<td>刷新</td>
<td>无影响。</td>
<td>数据会被重新提交。</td>
</tr>
<tr>
<td>书签</td>
<td>可收藏为书签。</td>
<td>不可收藏为书签。</td>
</tr>
<tr>
<td>缓存</td>
<td>能被缓存。</td>
<td>不能缓存。</td>
</tr>
<tr>
<td>传输</td>
<td>通过网址字符串。</td>
<td>通过二进制数据。</td>
</tr>
<tr>
<td>历史</td>
<td>参数保留在浏览器历史中。</td>
<td>参数不会保存在浏览器历史中。</td>
</tr>
<tr>
<td>长度</td>
<td>URL 的最大长度是 2048 个字符。</td>
<td>理论上无限制。</td>
</tr>
<tr>
<td>类型</td>
<td>只允许 ASCII 字符。</td>
<td>没有限制。也允许二进制数据。</td>
</tr>
<tr>
<td>安全性</td>
<td>较差，明文可见。</td>
<td>较好，参数不会被保存在浏览器历史或web服务器日志中。</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据HTTP标准，HTTP请求可以使用多种请求方法。&lt;/p&gt;
&lt;p&gt;HTTP1.0定义了三种请求方法： GET, POST和HEAD方法。&lt;/p&gt;
&lt;p&gt;HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE和CONNECT方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;请求指定的页面信息，并返回实体主体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEAD&lt;/td&gt;
&lt;td&gt;类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;td&gt;向指定资源提交数据进行处理请求，如提交表单或者上传文件。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;td&gt;从客户端向服务器传送的数据取代指定的文档的内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;请求服务器删除指定的页面。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CONNECT&lt;/td&gt;
&lt;td&gt;HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OPTIONS&lt;/td&gt;
&lt;td&gt;允许客户端查看服务器的性能。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TRACE&lt;/td&gt;
&lt;td&gt;请求服务器回显其收到的请求信息，该方法主要用于HTTP请求的测试或诊断。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP请求" scheme="http://yoursite.com/tags/HTTP%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议 - HTTP请求</title>
    <link href="http://yoursite.com/2016/08/17/HTTP%E5%8D%8F%E8%AE%AE/"/>
    <id>http://yoursite.com/2016/08/17/HTTP协议/</id>
    <published>2016-08-16T20:44:00.000Z</published>
    <updated>2016-08-21T18:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览。</p>
<p>超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。</p>
<a id="more"></a>
<p>通过HTTP或者HTTPS协议请求的资源由统一资源标识符（Uniform Resource Identifiers，URI）来标识。</p>
<p>超文本传输协议，是一种无状态协议，就是说客户端发送一次请求，服务器端接收请求，经过处理返回给客户端信息，然后客户端和服务器端的链接就断开了，为了维护他们之间的链接，让服务器知道这是前一个用户发送的请求，必须在一个地方保存客户端的信息，有2中解决方案，一是在客户端保存，二是在服务器端保存。<br>1.在客户端保存:Cookie<br>2.在服务器端保存:Session(session需要依靠cookie来实现)<br>3.在用户禁用cookie的限制下，只能使用URL重写的方式在每次请求之后附上一个键值对来保存客户端的信息。<br>4.隐藏表单。<code>&lt;input type=&quot;hidden&quot; name=&quot;method&quot; value=&quot;login&quot;&gt;</code></p>
<h3 id="URI统一资源标识符"><a href="#URI统一资源标识符" class="headerlink" title="URI统一资源标识符"></a>URI统一资源标识符</h3><p>统一资源标识符（Uniform Resource Identifier，或URI）是一个用于标识某一互联网资源名称的字符串。 该种标识允许用户对网络中（一般指万维网）的资源通过特定的协议进行交互操作。URI的最常见的形式是统一资源定位符（URL），经常指定为非正式的网址。</p>
<p>更罕见的用法是统一资源名称（URN），其目的是通过提供一种途径。用于在特定的命名空间资源的标识，以补充网址。</p>
<p>URI可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN定义某事物的身份，而URL提供查找该事物的方法。</p>
<p>用于标识唯一书目的ISBN系统是一个典型的URN使用范例。例如，ISBN 0-486-27557-4( urn:isbn:0-486-27557-4 )无二义性地标识出莎士比亚的戏剧《罗密欧与朱丽叶》的某一特定版本。为获得该资源并阅读该书，人们需要它的位置，也就是一个URL地址。在类Unix操作系统中，一个典型的URL地址可能是一个文件目录，例如file:///home/username/RomeoAndJuliet.pdf。该URL标识出存储于本地硬盘中的电子书文件。因此，URL和URN有着互补的作用。</p>
<h4 id="URL统一资源定位符"><a href="#URL统一资源定位符" class="headerlink" title="URL统一资源定位符"></a>URL统一资源定位符</h4><p>统一资源定位符（或称统一资源定位器/定位地址、URL地址等，英语：Uniform / Universal Resource Locator，常缩写为URL），有时也被俗称为网页地址（网址）。如同在网络上的门牌，是因特网上标准的资源的地址（Address）。</p>
<p>在因特网的历史上，统一资源定位符的发明是一个非常基础的步骤。统一资源定位符的语法是一般的，可扩展的，它使用ASCII代码的一部分来表示因特网的地址。统一资源定位符的开始，一般会标志着一个计算机网络所使用的网络协议。</p>
<p>统一资源定位符的标准格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">协议类型://服务器地址:端口名/路径/文件名/?参数名=参数#锚点名</div><div class="line">schema://host[:port#]/path/.../[?query-string][#anchor]</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>scheme</td>
<td>指定低层使用的协议，如 http, https, ftp。</td>
</tr>
<tr>
<td>host</td>
<td>HTTP服务器的IP地址或者域名。</td>
</tr>
<tr>
<td>port</td>
<td>HTTP服务器的断开，默认是80。如非默认端口必须显式指明。</td>
</tr>
<tr>
<td>path</td>
<td>访问资源的路径。</td>
</tr>
<tr>
<td>query-string</td>
<td>发送给http服务器的数据。</td>
</tr>
<tr>
<td>anchor</td>
<td>锚点。</td>
</tr>
</tbody>
</table>
<p>以 <code>http://www.mywebsite.com/sj/test;id=8079?name=sviergn&amp;x=true#stuff</code> 举例：</p>
<ul>
<li>schema: <code>http</code></li>
<li>host: <code>www.mywebsite.com</code></li>
<li>path: <code>/sj/test</code></li>
<li>query string: <code>name=sviergn&amp;x=true</code></li>
<li>anchor: <code>stuff</code></li>
</ul>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>http请求由三部分组成，分别是：请求行，请求头，请求正文。</p>
<p>请求行主要由三部分组成，请求方法、请求路径、协议版本，其格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">MethodRequest URI/HTTP-Version CRLF</div><div class="line"></div><div class="line">MethodRequest：HTTP规范定义了8种可能的请求方法，常用的是GET、POST和HEAD方法。</div><div class="line">URI：请求路径可以是相对或者绝对的方式。</div><div class="line">HTTP-Version：目前常用的支持HTTP/1.0和HTTP/1.1方式。</div><div class="line">CRLF：回车和换行，除了作为结尾的CRLF，其余位置不允许出现单独的CR或LF。</div></pre></td></tr></table></figure>
<p>get方法的请求方式比较简单，所有请求的参数都显示追加在请求的url后面，而且请求长度有限制。</p>
<p>post方式的请求参数都追加在请求体当中，消息长度没有限制而且以隐式的方式进行发送，安全性相对较高。</p>
<p>head方法通常用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p>
<p>head方法与get方法几乎是一样的，head请求的回应部分中HTTP头部的信息与get请求所得到信息是相同的，利用这个方法，不必传输整个资源内容，就可以得到这个URI所标识的资源内容的信息，例如在下载文件前，需要知道文件的大小，格式，文件名等，就可以使用该方法。</p>
<p>在下面的例子中，<code>GET</code> 是请求方法，<code>http://www.microsoft.com</code> 是请求路径，<code>HTTP/1.1</code> 是协议和版本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET http://www.microsoft.com/HTTP/1.1</div></pre></td></tr></table></figure>
<p>在下面的例子，请求方法是 <code>POST</code> ，获得的额外数据是 <code>user=jeffrey&amp;pwd=1234</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">POST /reg.jsp HTTP/ (CRLF)</div><div class="line"></div><div class="line">Accept:image/gif,image/x-xbit,... (CRLF)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">HOST:www.guet.edu.cn (CRLF)</div><div class="line">Content-Length:22 (CRLF)</div><div class="line">Connection:Keep-Alive (CRLF)</div><div class="line">Cache-Control:no-cache (CRLF)</div><div class="line">(CRLF)         //该CRLF表示消息报头已经结束，在此之前为请求头</div><div class="line"></div><div class="line">user=jeffrey&amp;pwd=1234</div></pre></td></tr></table></figure>
<p>请求头都是以key:value形式进行保存的，里面记录了客户端的一些基本信息，常用的请求头如下所示：</p>
<blockquote>
<p>Accept：浏览器可接受的MIME类型，也就是文件类型。</p>
<p>Accept-Charset：浏览器可接受的字符集，如GBK。</p>
<p>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。</p>
<p>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</p>
<p>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</p>
<p>Connection：表示是否需要持久连接。</p>
<p>Cache-Control：指定请求和响应遵循的缓存机制。</p>
<p>Content-Length：表示请求消息正文的长度。</p>
<p>Cookie：HTTP请求发送时，会把保存在该请求域名下的所有cookie值一起发送给web服务器。</p>
<p>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</p>
<p>Host：指定请求的服务器的域名和端口号。</p>
<p>UA-Pixels，UA-Color，UA-OS，UA-CPU：表示屏幕大小、颜色深度、操作系统和CPU类型。 </p>
</blockquote>
<p>请求体（又叫请求正文）是post请求方式当中的请求参数，以key=value形式进行存储，多个请求参数之间用&amp;连接，如果请求当中有请求提，那么在请求头当中的Content-Length属性中记录的是该请求体的长度。</p>
<p>下面来看一个还算完整的请求消息吧，这样可能会稍微直观一点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">POST hysj.jsp HTTP/1.1</div><div class="line">********************************</div><div class="line">Host: search.cnipr.com</div><div class="line">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; zh-CN; rv:1.9.1.13) Gecko/20100914 Firefox/3.5.13 ( .NET CLR 3.5.30729)</div><div class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-cn,zh;q=0.5</div><div class="line">Accept-Encoding: gzip,deflate</div><div class="line">Accept-Charset: GB2312,utf-8;q=0.7,*;q=0.7</div><div class="line">Keep-Alive: 300</div><div class="line">Connection: keep-alive</div><div class="line">Referer: http://search.cnipr.com/cnipr/zljs/hyjs-biaodan-y.jsp</div><div class="line">Content-Length: 405</div><div class="line">********************************</div><div class="line">username=guest&amp;extension=&amp;issearch=on&amp;searchword=pd%3D%2820100901%29&amp;presearchword=&amp;sortfield=RELEVANCE&amp;sRecordNumber=&amp;searchType=0&amp;searchFrom=0&amp;channelid=14%2C15%2C16&amp;searchChannel=14%2C15%2C16&amp;strdb=14&amp;strdb=15&amp;strdb=16&amp;cizi=2&amp;sortcolumn=RELEVANCE&amp;R1=-&amp;txtA=&amp;txtB=&amp;txtC=&amp;txtD=20100901&amp;txtE=&amp;txtF=&amp;txtG=&amp;txtH=&amp;txtI=&amp;txtJ=&amp;txtK=&amp;txtL=&amp;txtM=&amp;txtN=&amp;txtP=&amp;txtQ=&amp;txtR=&amp;txtSearchWord=&amp;Submit=%BC%EC%A1%A1%CB%F7</div></pre></td></tr></table></figure>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>在接收和解释请求消息后，服务器返回一个HTTP响应消息。</p>
<p>HTTP响应也是由三个部分组成，分别是：响应行、响应头、响应正文。</p>
<p>响应行是标识服务器端对客户端请求的处理结果，主要由响应状态信息，响应状态码，服务器协议组成：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTTP-Version Status-Code Reason-Phrase CRLF</div><div class="line"></div><div class="line">HTTP-Version：表示服务器HTTP协议的版本</div><div class="line">Status-Code：表示服务器发回的响应状态代码</div><div class="line">Reason-Phrase：表示状态代码的文本描述</div></pre></td></tr></table></figure>
<p>状态代码有三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1xx</td>
<td>指示信息–表示请求已接收，继续处理。</td>
</tr>
<tr>
<td>2xx</td>
<td>成功–表示请求已被成功接收、理解、接受。</td>
</tr>
<tr>
<td>3xx</td>
<td>重定向–要完成请求必须进行更进一步的操作。</td>
</tr>
<tr>
<td>4xx</td>
<td>客户端错误–请求有语法错误或请求无法实现。</td>
</tr>
<tr>
<td>5xx</td>
<td>服务器端错误–服务器未能实现合法的请求。</td>
</tr>
</tbody>
</table>
<p>常见状态代码、状态描述、说明：</p>
<table>
<thead>
<tr>
<th>状态码</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>200 OK</td>
<td>客户端请求成功。</td>
</tr>
<tr>
<td>400 Bad Request</td>
<td>客户端请求有语法错误，不能被服务器所理解。</td>
</tr>
<tr>
<td>401 Unauthorized</td>
<td>请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用。</td>
</tr>
<tr>
<td>403 Forbidden</td>
<td>服务器收到请求，但是拒绝提供服务。</td>
</tr>
<tr>
<td>404 Not Found</td>
<td>请求资源不存在，eg：输入了错误的URL。</td>
</tr>
<tr>
<td>500 Internal Server Error</td>
<td>服务器发生不可预期的错误。</td>
</tr>
<tr>
<td>503 Server Unavailable</td>
<td>服务器当前不能处理客户端的请求，一段时间后可能恢复正常。</td>
</tr>
</tbody>
</table>
<p>响应头域允许服务器传递不能放在状态行的附加信息，这些域主要描述服务器的信息和 Request-URI进一步的信息。响应头域包含Age、Location、Proxy-Authenticate、Public、Retry- After、Server、Vary、Warning、WWW-Authenticate。对响应头域的扩展要求通讯双方都支持，如果存在不支持的响应头域，一般将会作为实体头域处理。 </p>
<p>常见的响应头信息如下：</p>
<blockquote>
<p>Allow</p>
<p>服务器支持哪些请求方法（如GET、POST等）。</p>
<p>Content-Encoding</p>
<p>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p>
<p>Content-Length</p>
<p>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p>
<p>Content-Type</p>
<p>表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。 </p>
<p>Date</p>
<p>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p>
<p>Last-Modified</p>
<p>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</p>
<p>Location</p>
<p>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302</p>
<p>Refresh</p>
<p>表示浏览器应该在多少时间之后刷新文档，以秒计。</p>
<p>Server</p>
<p>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</p>
<p>Set-Cookie</p>
<p>设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。</p>
<p>WWW-Authenticate</p>
<p>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，<code>response.setHeader(&quot;WWW-Authenticate&quot;, &quot;BASIC realm=＼&quot;executives＼&quot;&quot;)</code>。<br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</p>
</blockquote>
<p>下面是一个典型的响应消息： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HTTP/1.0200OK </div><div class="line">Date:Mon,31Dec200104:25:57GMT </div><div class="line">Server:Apache/1.3.14(Unix) </div><div class="line">Content-type:text/html </div><div class="line">Last-modified:Tue,17Apr200106:46:28GMT </div><div class="line">Etag:&quot;a030f020ac7c01:1e9f&quot; </div><div class="line">Content-length:39725426 </div><div class="line">Content-range:bytes554554-40279979/40279980</div></pre></td></tr></table></figure>
<p>下面是以Charles工具抓取的优酷响应消息的截图：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/youku.png" alt="youku"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;协议是指计算机通信网络中两台计算机之间进行通信所必须共同遵守的规定或规则，超文本传输协议(HTTP)是一种通信协议，它允许将超文本标记语言(HTML)文档从Web服务器传送到客户端的浏览。&lt;/p&gt;
&lt;p&gt;超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是互联网上应用最为广泛的一种网络协议。设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTP" scheme="http://yoursite.com/categories/HTTP/"/>
    
    
      <category term="HTTP请求" scheme="http://yoursite.com/tags/HTTP%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>PHP操作MYSQL数据库</title>
    <link href="http://yoursite.com/2016/08/17/PHP%E6%93%8D%E4%BD%9CMySQL/"/>
    <id>http://yoursite.com/2016/08/17/PHP操作MySQL/</id>
    <published>2016-08-16T20:44:00.000Z</published>
    <updated>2016-08-21T18:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>MYSQL 是一个开源的、跨平台关系型数据库管理系统，PHP 是一个开源的、跨平台的脚本语言，PHP 扩展包对MYSQL 支持比较完善，也有比较多开源包供参考， 很多开源项目与 MYSQL 搭配也比较多，因此 PHP+MYSQL 是一套应用极为广泛的方案，下面我们通过代码来了解如何使用 PHP 操作 MYSQL 数据库。</p>
</blockquote>
<h3 id="连接数据库服务器"><a href="#连接数据库服务器" class="headerlink" title="连接数据库服务器"></a>连接数据库服务器</h3><p><code>mysqli_connect()</code> 函数打开一个到 MySQL 服务器的新的连接，它的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_connect(host,username,password,dbname,port,socket);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>host</em></td>
<td>可选。规定主机名或 IP 地址。</td>
</tr>
<tr>
<td><em>username</em></td>
<td>可选。规定 MySQL 用户名。</td>
</tr>
<tr>
<td><em>password</em></td>
<td>可选。规定 MySQL 密码。</td>
</tr>
<tr>
<td><em>dbname</em></td>
<td>可选。规定默认使用的数据库。</td>
</tr>
<tr>
<td><em>port</em></td>
<td>可选。规定尝试连接到 MySQL 服务器的端口号。</td>
</tr>
<tr>
<td><em>socket</em></td>
<td>可选。规定 socket 或要使用的已命名 pipe。</td>
</tr>
</tbody>
</table>
<p>它的返回值是一个代表 MySQL 服务器连接的对象。</p>
<a id="more"></a>
<p>示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">''</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'连接成功'</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接错误"</span>.mysqli_connect_error());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="连接SQL数据库"><a href="#连接SQL数据库" class="headerlink" title="连接SQL数据库"></a>连接SQL数据库</h3><p><code>mysqli_select_db()</code> 函数用于指定要获取的服务器上的某一个数据库。语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_select_db(connection,dbname);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>connection</em></td>
<td>必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td><em>dbname</em></td>
<td>必需，规定要使用的默认数据库。</td>
</tr>
</tbody>
</table>
<p>它的返回值是bool类型，如果连接数据库成功则返回 TRUE，如果失败则返回 FALSE。</p>
<p>示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'连接服务器成功'</span>;</div><div class="line">    <span class="keyword">if</span> (mysqli_select_db($sql, <span class="string">'test'</span>);) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'连接数据库test成功'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接错误"</span>.mysqli_connect_error());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="读取SQL数据库"><a href="#读取SQL数据库" class="headerlink" title="读取SQL数据库"></a>读取SQL数据库</h3><p><code>mysqli_query()</code> 函数执行某个针对数据库的查询。语法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_query(connection,query,resultmode);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>connection</em></td>
<td>必需。规定要使用的 MySQL 连接。</td>
</tr>
<tr>
<td><em>query</em></td>
<td>必需，规定查询字符串。</td>
</tr>
<tr>
<td><em>resultmode</em></td>
<td>可选。MYSQLI_USE_RESULT（数据较多）MYSQLI_STORE_RESULT（默认）</td>
</tr>
</tbody>
</table>
<p>针对成功的 SELECT、SHOW、DESCRIBE 或 EXPLAIN 查询，将返回一个 mysqli_result 对象。</p>
<p>针对其他成功的查询，将返回 TRUE。如果失败，则返回 FALSE。</p>
<p>实例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">echo</span> <span class="string">'连接服务器成功'</span>;</div><div class="line">    <span class="keyword">if</span> (mysqli_select_db($sql, <span class="string">'test'</span>);) &#123;</div><div class="line">        <span class="keyword">echo</span> <span class="string">'连接数据库test成功'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    $result = mysqli_query($sql ,<span class="string">'SELECT * FROM users'</span>);</div><div class="line">    print_r($result);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接错误"</span>.mysqli_connect_error());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="获取SQL条目数"><a href="#获取SQL条目数" class="headerlink" title="获取SQL条目数"></a>获取SQL条目数</h3><p><code>mysqli_num_rows()</code> 函数返回结果集中行的数量，它的语法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_num_rows(result);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>result</em></td>
<td>必需。由 mysqli_query()、mysqli_store_result() 或 mysqli_use_result() 返回的结果集标识符。</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'连接服务器成功'</span>;</div><div class="line">    </div><div class="line">    $result = mysqli_query($sql ,<span class="string">'SELECT * FROM users'</span>);</div><div class="line">    $rows = mysqli_num_rows($result);</div><div class="line">    <span class="keyword">echo</span> <span class="string">'现在数据库条数是'</span>.$rows;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MySql 语句中也集成了获取条目数的函数 <code>COUNT()</code> ，它的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(column_name) <span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">COUNT</span>(column_name) 函数返回指定列的值的数目（<span class="literal">NULL</span> 不计入）</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">COUNT</span>(*) 函数返回表中的记录数</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) <span class="keyword">FROM</span> table_name</div><div class="line"><span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> column_name) 函数返回指定列的不同值的数目</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line">    mysqli_select_db($sql, <span class="string">'test'</span>);</div><div class="line">    $result = mysqli_query($sql, <span class="string">'SELECT COUNT(*) FROM users'</span>);</div><div class="line">    $rows = mysqli_fetch_array($result);	</div><div class="line">    <span class="keyword">echo</span> <span class="string">'现在数据库条数是'</span>.$rows[<span class="number">0</span>].<span class="string">'&lt;br&gt;'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>COUNT()</code> 因为是 SQL 的原生语句，效率要比 PHP 的 <code>mysqli_num_rows()</code> 高很多，也可以配合 WHERE &amp; AND &amp; OR 进行查询。</p>
<h3 id="SQL转数组"><a href="#SQL转数组" class="headerlink" title="SQL转数组"></a>SQL转数组</h3><p><code>mysqli_fetch_array()</code> 函数从结果集中取得一行作为关联数组，或数字数组，或二者兼有。它的语法如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_fetch_array(result,resulttype);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>result</em></td>
<td>必需。由 mysqli_query() mysqli_store_result() mysqli_use_result() 返回的结果集标识符。</td>
</tr>
<tr>
<td><em>resulttype</em></td>
<td>可选。规定产生哪种类型的数组。MYSQLI_ASSOC MYSQLI_NUM MYSQLI_BOTH。</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line">    $result = mysqli_query($sql ,<span class="string">'SELECT * FROM users'</span>);</div><div class="line">    $result_arr = mysqli_fetch_array($result);</div><div class="line">    print_r($result_arr);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接错误"</span>.mysqli_connect_error());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>mysqli_fetch_assoc()</code> 函数从结果集中取得一行作为关联数组。它的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqli_fetch_assoc(result);</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>result</em></td>
<td>必需。规定由 mysqli_query() mysqli_store_result() mysqli_use_result() 返回的结果集标识符。</td>
</tr>
</tbody>
</table>
<p>它的输出结果等同于 <code>mysqli_fetch_array($result, MYSQLI_ASSOC);</code></p>
<p>需要注意的是，两者返回的都是单条数据，如需获得数据库全部数据，需要循环遍历，示例如下：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$sql = mysqli_connect(<span class="string">'localhost'</span>, <span class="string">'root'</span>, <span class="string">'root'</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($sql) &#123;</div><div class="line"></div><div class="line">    $result = mysqli_query($sql ,<span class="string">'SELECT * FROM users'</span>);</div><div class="line">    $rows = mysqli_num_rows($result);</div><div class="line"></div><div class="line">    $data_all = <span class="keyword">array</span>();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$rows; $i++) &#123;</div><div class="line">        $data = mysqli_fetch_assoc($result);</div><div class="line">        array_push($data_all, $data);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    print_r($data_all);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">"连接错误"</span>.mysqli_connect_error());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="查询SQL数据"><a href="#查询SQL数据" class="headerlink" title="查询SQL数据"></a>查询SQL数据</h3><p>以下示例是一个用 PHP 实现查询数据库的程序，首先设定数据库服务器链接，账户，密码的默认值：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">config.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line">define(<span class="string">'MYSQL_HOST'</span>, <span class="string">'localhost'</span>);</div><div class="line">define(<span class="string">'MYSQL_USER'</span>, <span class="string">'root'</span>);</div><div class="line">define(<span class="string">'MYSQL_PASSWORD'</span>, <span class="string">'root'</span>);</div></pre></td></tr></table></figure>
<p>创建一个方法，获得并返回数据库的对象：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>.<span class="title">php</span></span></div><div class="line">  </div><div class="line">&lt;?<span class="title">php</span></div><div class="line"><span class="title">require_once</span> '<span class="title">config</span>.<span class="title">php</span>';</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">connectDataBase</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mysqli_connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASSWORD, <span class="string">'test'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 HTML 创建表格，获得所有 name 列为 ZhangSan 的行，并按 id 逆序排序：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">select_data.php</div><div class="line">  </div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span></div><div class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;所有用户&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;table width=<span class="string">"100%"</span>&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$coon = connectDataBase();</div><div class="line">$data_count = mysqli_fetch_array(mysqli_query($coon, <span class="string">'SELECT COUNT(*) FROM users'</span>));</div><div class="line">$result = mysqli_query($coon, <span class="string">"SELECT * FROM users WHERE name='ZhangSan' ORDER BY id DESC"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$data_count[<span class="number">0</span>]; $i++) &#123;</div><div class="line">    $data = mysqli_fetch_assoc($result);</div><div class="line">    $id = $data[<span class="string">'id'</span>];</div><div class="line">    $name = $data[<span class="string">'name'</span>];</div><div class="line">    $age = $data[<span class="string">'age'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;$id&lt;/td&gt;&lt;td&gt;$name&lt;/td&gt;&lt;td&gt;$age&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="添加SQL数据"><a href="#添加SQL数据" class="headerlink" title="添加SQL数据"></a>添加SQL数据</h3><p>建立一个PHP页面，展示数据库里的所有数据，并新建一个链接，指向数据库添加页面：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">data_all.php</div><div class="line">  </div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span></div><div class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;所有用户&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;a href=<span class="string">"adduser.html"</span>&gt;添加用户&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;table width=<span class="string">"100%"</span>&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;/tr&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$coon = connectDataBase();</div><div class="line">$data_count = mysqli_fetch_array(mysqli_query($coon, <span class="string">'SELECT COUNT(*) FROM users'</span>));</div><div class="line">$result = mysqli_query($coon, <span class="string">"SELECT * FROM users ORDER BY id DESC"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$data_count[<span class="number">0</span>]; $i++) &#123;</div><div class="line">    $data = mysqli_fetch_assoc($result);</div><div class="line">    $id = $data[<span class="string">'id'</span>];</div><div class="line">    $name = $data[<span class="string">'name'</span>];</div><div class="line">    $age = $data[<span class="string">'age'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;$id&lt;/td&gt;&lt;td&gt;$name&lt;/td&gt;&lt;td&gt;$age&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>创建一个 HTML 页面，并添加输入框和提交按钮，将输入框的文本用 POST 方式传给 <code>user_add.php</code> :</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">user_add.html</div><div class="line"></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"user_add.php"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用 SQL 语句向数据库添加数据，如果没有添加错误，转跳到 <code>data_all.php</code> ：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">user_add.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'name'</span>])) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'没有收到name的值'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_POST[<span class="string">'age'</span>])) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'没有收到age的值'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'name的值是空的'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'age'</span>])) &#123;</div><div class="line">    <span class="keyword">echo</span> <span class="string">'age的值是空的'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$name = $_POST[<span class="string">'name'</span>];</div><div class="line">$age = $_POST[<span class="string">'age'</span>];</div><div class="line">$coon = connectDataBase();</div><div class="line">$age = intval($age);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($coon) &#123;</div><div class="line">    mysqli_query($coon, <span class="string">"INSERT INTO users(name,age) VALUES ('$name', $age)"</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'数据库未成功连接'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_error()) &#123;</div><div class="line">    <span class="keyword">echo</span> mysqli_error();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    header(<span class="string">'Location:allusers.php'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SQL防注入"><a href="#SQL防注入" class="headerlink" title="SQL防注入"></a>SQL防注入</h4><p>在上面的示例中，如果 <code>$name &amp; $age</code> 没有使用 <code>&#39;&#39;</code> 和 <code>intval</code> 进行格式转换，那么当用户输入的是SQL语句时 ，它有可能会被执行，所以对用户传入的值一定要进行相应的格式处理，避免被恶意注入 SQL 语句。</p>
<h3 id="修改SQL数据"><a href="#修改SQL数据" class="headerlink" title="修改SQL数据"></a>修改SQL数据</h3><p>在 <code>data_all.php</code> 中添加一列，命名为修改，单元格内添加链接，指向 <code>edituser.php</code> ，并使用 GET 方式将此单元格的 <code>id</code> 进行传输：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">data_all.php</div><div class="line">  </div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span></div><div class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;所有用户&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;a href=<span class="string">"adduser.html"</span>&gt;添加用户&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;table width=<span class="string">"100%"</span>&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;th&gt;修改&lt;/th&gt;&lt;/tr&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$coon = connectDataBase();</div><div class="line">$data_count = mysqli_fetch_array(mysqli_query($coon, <span class="string">'SELECT COUNT(*) FROM users'</span>));</div><div class="line">$result = mysqli_query($coon, <span class="string">"SELECT * FROM users ORDER BY id DESC"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$data_count[<span class="number">0</span>]; $i++) &#123;</div><div class="line">    $data = mysqli_fetch_assoc($result);</div><div class="line">    $id = $data[<span class="string">'id'</span>];</div><div class="line">    $name = $data[<span class="string">'name'</span>];</div><div class="line">    $age = $data[<span class="string">'age'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;$id&lt;/td&gt;&lt;td&gt;$name&lt;/td&gt;&lt;td&gt;$age&lt;/td&gt;&lt;td&gt;&lt;a href='edituser.php?id=$id'&gt;修改&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>获取此行的所有数据，并创建输入框和提交按钮，将获取的行数据填充为输入框默认数据，创建的表单将以 POST 方式将数据传输到 <code>edituser_server.php</code> ：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">edituser.php</div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span></div><div class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;编辑用户&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_GET[<span class="string">'id'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'没有获取到id'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'id'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'id的值是空的'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$id = $_GET[<span class="string">'id'</span>];</div><div class="line">$coon = connectDataBase();</div><div class="line">$result = mysqli_query($coon, <span class="string">"SELECT * FROM users WHERE id=$id"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_error()) &#123;</div><div class="line">    <span class="keyword">die</span>(mysqli_error());</div><div class="line">&#125;</div><div class="line"></div><div class="line">$data = mysqli_fetch_assoc($result);</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">&lt;form action=<span class="string">"edituser_server.php"</span> method=<span class="string">"post"</span>&gt;</div><div class="line">    &lt;div&gt;id:</div><div class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"id"</span> value=<span class="string">"&lt;?php echo $data['id']?&gt;"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;姓名:</div><div class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> value=<span class="string">"&lt;?php echo $data['name']?&gt;"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div&gt;年龄:</div><div class="line">        &lt;input type=<span class="string">"text"</span> name=<span class="string">"age"</span> value=<span class="string">"&lt;?php echo $data['age']?&gt;"</span>&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交修改"</span>&gt;</div><div class="line">&lt;/form&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>获取 <code>edituser.php</code> 中传输过来的数据，按 <code>id</code> 定位到目标行并进行修改，如没有报错则转跳到 <code>Location:data_all.php</code> ：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"></div><div class="line">$conn = connectDataBase();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'id'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'id没有获取'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'name没有获取'</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'age'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'age没有获取'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$name = $_POST[<span class="string">'name'</span>];</div><div class="line">$age = $_POST[<span class="string">'age'</span>];</div><div class="line">$id = $_POST[<span class="string">'id'</span>];</div><div class="line"></div><div class="line">mysqli_query($conn, <span class="string">"UPDATE users SET name='$name', age=$age WHERE id=$id"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_error()) &#123;</div><div class="line">    <span class="keyword">echo</span> mysqli_error();</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    header(<span class="string">'Location:data_all.php'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="删除SQL数据"><a href="#删除SQL数据" class="headerlink" title="删除SQL数据"></a>删除SQL数据</h3><p>在 <code>data_all.php</code> 中添加一列，命名为删除，单元格内添加链接，指向 <code>deleteuser.php</code> ，并使用 GET 方式将此单元格的 <code>id</code> 进行传输：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">data_all.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"><span class="meta">?&gt;</span></div><div class="line"></div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</div><div class="line">    &lt;meta name=<span class="string">"viewport"</span></div><div class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</div><div class="line">    &lt;title&gt;所有用户&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;a href=<span class="string">"adduser.html"</span>&gt;添加用户&lt;/a&gt;</div><div class="line"></div><div class="line">&lt;table width=<span class="string">"100%"</span>&gt;&lt;tr&gt;&lt;th&gt;id&lt;/th&gt;&lt;th&gt;name&lt;/th&gt;&lt;th&gt;age&lt;/th&gt;&lt;th&gt;修改&lt;/th&gt;&lt;th&gt;删除&lt;/th&gt;&lt;/tr&gt;</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"></div><div class="line">$coon = connectDataBase();</div><div class="line">$data_count = mysqli_fetch_array(mysqli_query($coon, <span class="string">'SELECT COUNT(*) FROM users'</span>));</div><div class="line">$result = mysqli_query($coon, <span class="string">"SELECT * FROM users ORDER BY id DESC"</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;$data_count[<span class="number">0</span>]; $i++) &#123;</div><div class="line">    $data = mysqli_fetch_assoc($result);</div><div class="line">    $id = $data[<span class="string">'id'</span>];</div><div class="line">    $name = $data[<span class="string">'name'</span>];</div><div class="line">    $age = $data[<span class="string">'age'</span>];</div><div class="line">    <span class="keyword">echo</span> <span class="string">"&lt;tr&gt;&lt;td&gt;$id&lt;/td&gt;&lt;td&gt;$name&lt;/td&gt;&lt;td&gt;$age&lt;/td&gt;&lt;td&gt;&lt;a href='edituser.php?id=$id'&gt;修改&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;a href='deleteuser.php?id=$id'&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">?&gt;</span></div><div class="line">&lt;/table&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>获取 <code>data_all.php</code> 中传输过来的 <code>id</code>，按 <code>id</code> 定位到目标行并删除，如没有报错则转跳到 <code>Location:data_all.php</code> ：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">deleteuser.php</div><div class="line"></div><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="keyword">require_once</span> <span class="string">'function.php'</span>;</div><div class="line"></div><div class="line">$conn = connectDataBase();</div><div class="line"></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($_GET[<span class="string">'id'</span>])) &#123;</div><div class="line">    <span class="keyword">die</span>(<span class="string">'id的值是空的'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">$id = intval($_GET[<span class="string">'id'</span>]);</div><div class="line"></div><div class="line">mysqli_query($conn, <span class="string">"DELETE FROM users WHERE id=$id"</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (mysqli_error()) &#123;</div><div class="line">    <span class="keyword">die</span>(mysqli_error());</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    header(<span class="string">'Location:allusers.php'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MYSQL 是一个开源的、跨平台关系型数据库管理系统，PHP 是一个开源的、跨平台的脚本语言，PHP 扩展包对MYSQL 支持比较完善，也有比较多开源包供参考， 很多开源项目与 MYSQL 搭配也比较多，因此 PHP+MYSQL 是一套应用极为广泛的方案，下面我们通过代码来了解如何使用 PHP 操作 MYSQL 数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;连接数据库服务器&quot;&gt;&lt;a href=&quot;#连接数据库服务器&quot; class=&quot;headerlink&quot; title=&quot;连接数据库服务器&quot;&gt;&lt;/a&gt;连接数据库服务器&lt;/h3&gt;&lt;p&gt;&lt;code&gt;mysqli_connect()&lt;/code&gt; 函数打开一个到 MySQL 服务器的新的连接，它的语法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysqli_connect(host,username,password,dbname,port,socket);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;host&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定主机名或 IP 地址。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;username&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定 MySQL 用户名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;password&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定 MySQL 密码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;dbname&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定默认使用的数据库。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;port&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定尝试连接到 MySQL 服务器的端口号。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;socket&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;可选。规定 socket 或要使用的已命名 pipe。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;它的返回值是一个代表 MySQL 服务器连接的对象。&lt;/p&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL基础语法</title>
    <link href="http://yoursite.com/2016/08/17/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/08/17/SQL基础语法/</id>
    <published>2016-08-16T20:44:00.000Z</published>
    <updated>2016-08-21T18:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQL 是用于访问和处理数据库的标准的计算机语言。</p>
<p>如果需要在网站或 APP 中创建或使用数据库，需要具备以下几点：</p>
<ul>
<li>RDBMS 数据库程序（比如 MS Access, SQL Server, MySQL）</li>
<li>服务器端脚本语言（比如 PHP 或 ASP）</li>
<li>SQL</li>
<li>HTML / CSS</li>
</ul>
<p>RDBMS 指的是关系型数据库管理系统。</p>
<p>RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server, IBM DB2, Oracle, MySQL 以及 Microsoft Access。</p>
<p>RDBMS 中的数据存储在被称为表（tables）的数据库对象中。</p>
<p>表是相关的数据项的集合，它由列和行组成。</p>
<a id="more"></a>
<h4 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h4><p>一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录（行）。</p>
<p>下面的例子是一个名为 “Persons” 的表：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>上面的表包含三条记录（每一条对应一个人）和五个列（Id、姓、名、地址和城市）。</p>
<h4 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h4><p>数据库上执行的大部分工作都由 SQL 语句完成。SQL 包括两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。</p>
<p>SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。</p>
<p>查询和更新指令构成了 SQL 的 DML 部分：</p>
<ul>
<li><em>SELECT</em> - 从数据库表中获取数据</li>
<li><em>UPDATE</em> - 更新数据库表中的数据</li>
<li><em>DELETE</em> - 从数据库表中删除数据</li>
<li><em>INSERT INTO</em> - 向数据库表中插入数据</li>
</ul>
<p>SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。</p>
<p>SQL 中最重要的 DDL 语句:</p>
<ul>
<li><em>CREATE DATABASE</em> - 创建新数据库</li>
<li><em>ALTER DATABASE</em> - 修改数据库</li>
<li><em>CREATE TABLE</em> - 创建新表</li>
<li><em>ALTER TABLE</em> - 变更（改变）数据库表</li>
<li><em>DROP TABLE</em> - 删除表</li>
<li><em>CREATE INDEX</em> - 创建索引（搜索键）</li>
<li><em>DROP INDEX</em> - 删除索引</li>
</ul>
<h4 id="SQL-SELECT-语句"><a href="#SQL-SELECT-语句" class="headerlink" title="SQL SELECT 语句"></a>SQL SELECT 语句</h4><p>SELECT 语句用于从表中选取数据。结果被存储在一个结果表中（称为结果集）。它的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> 表名称</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<p>Persons 表:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>获取名为 “LastName” 和 “FirstName” 的列的内容：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> LastName,FirstName <span class="keyword">FROM</span> Persons</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adams</td>
<td>John</td>
</tr>
<tr>
<td>Bush</td>
<td>George</td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
</tr>
</tbody>
</table>
<p>选取表中所有的列，可使用符号 <code>*</code> 取代列的名称：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>2</td>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>3</td>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<h4 id="SQL-SELECT-DISTINCT-语句"><a href="#SQL-SELECT-DISTINCT-语句" class="headerlink" title="SQL SELECT DISTINCT 语句"></a>SQL SELECT DISTINCT 语句</h4><p>在表中，可能会包含重复值。如果希望仅仅列出不同（distinct）的值。可以使用关键词 DISTINCT ，它用于返回唯一不同的值。其语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名称 <span class="keyword">FROM</span> 表名称</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<p>Orders 表：</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
</tbody>
</table>
<p>如需从 Company” 列中仅选取唯一不同的值：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Company <span class="keyword">FROM</span> Orders</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Company</th>
</tr>
</thead>
<tbody>
<tr>
<td>IBM</td>
</tr>
<tr>
<td>W3School</td>
</tr>
<tr>
<td>Apple</td>
</tr>
</tbody>
</table>
<p>现在，在结果集中，”W3School” 仅被列出了一次。</p>
<h4 id="SQL-WHERE-子句"><a href="#SQL-WHERE-子句" class="headerlink" title="SQL WHERE 子句"></a>SQL WHERE 子句</h4><p>WHERE 子句用于规定选择的标准，如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。其语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</div></pre></td></tr></table></figure>
<p>WHERE 子句中支持的运算符有：</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>=</td>
<td>等于</td>
</tr>
<tr>
<td>&lt;&gt; OR  !=</td>
<td>不等于</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
</tr>
<tr>
<td>BETWEEN</td>
<td>在某个范围内</td>
</tr>
<tr>
<td>LIKE</td>
<td>搜索某种模式</td>
</tr>
</tbody>
</table>
<p>示例如下：</p>
<p>Persons 表</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
<th>Year</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
<td>1970</td>
</tr>
<tr>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
<td>1975</td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
<td>1980</td>
</tr>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
<td>1985</td>
</tr>
</tbody>
</table>
<p>如果希望选取居住在城市 “Beijing” 中的人，那么需要向 SELECT 语句添加 WHERE 子句：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City=<span class="string">'Beijing'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
<th>Year</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
<td>1980</td>
</tr>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
<td>1985</td>
</tr>
</tbody>
</table>
<h4 id="SQL-AND-amp-OR-运算符"><a href="#SQL-AND-amp-OR-运算符" class="headerlink" title="SQL AND &amp; OR 运算符"></a>SQL AND &amp; OR 运算符</h4><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。<br>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。<br>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</p>
<p>示例如下：</p>
<p>Persons 表</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Adams</td>
<td>John</td>
<td>Oxford Street</td>
<td>London</td>
</tr>
<tr>
<td>Bush</td>
<td>George</td>
<td>Fifth Avenue</td>
<td>New York</td>
</tr>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
<tr>
<td>Carter</td>
<td>William</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>使用 AND 来显示所有姓为 “Carter” 并且名为 “Thomas” 的人：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName=<span class="string">'Thomas'</span> <span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>使用 OR 来显示所有姓为 “Carter” 或者名为 “Thomas” 的人：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> firstname=<span class="string">'Thomas'</span> <span class="keyword">OR</span> lastname=<span class="string">'Carter'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
<tr>
<td>Carter</td>
<td>William</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>综合使用 AND 和 OR，显示所有名为 “Thomas” 或者名为 “William” ，并且的姓为 “Carter” 的人：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName=<span class="string">'Thomas'</span> <span class="keyword">OR</span> FirstName=<span class="string">'William'</span>)</div><div class="line"><span class="keyword">AND</span> LastName=<span class="string">'Carter'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
<tr>
<td>Carter</td>
<td>William</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<h4 id="SQL-ORDER-BY-子句"><a href="#SQL-ORDER-BY-子句" class="headerlink" title="SQL ORDER BY 子句"></a>SQL ORDER BY 子句</h4><p>ORDER BY 语句用于根据指定的列对结果集进行排序。默认的排序方式是升序。如果希望按照降序对记录进行排序，可以使用 DESC 关键字。</p>
<p>示例如下：</p>
<p>Orders 表:</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
</tbody>
</table>
<p>以字母顺序显示公司名称：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
</tbody>
</table>
<p>以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company, OrderNumber</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
</tbody>
</table>
<p>以逆字母顺序显示公司名称：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
</tbody>
</table>
<p>以逆字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>Company</th>
<th>OrderNumber</th>
</tr>
</thead>
<tbody>
<tr>
<td>W3School</td>
<td>2356</td>
</tr>
<tr>
<td>W3School</td>
<td>6953</td>
</tr>
<tr>
<td>IBM</td>
<td>3532</td>
</tr>
<tr>
<td>Apple</td>
<td>4698</td>
</tr>
</tbody>
</table>
<h4 id="SQL-INSERT-INTO-语句"><a href="#SQL-INSERT-INTO-语句" class="headerlink" title="SQL INSERT INTO 语句"></a>SQL INSERT INTO 语句</h4><p>INSERT INTO 语句用于向表格中插入新的行，它的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>, 列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<p>Persons 表：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>插入一行数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons <span class="keyword">VALUES</span> (<span class="string">'Gates'</span>, <span class="string">'Bill'</span>, <span class="string">'Xuanwumen'</span>, <span class="string">'Beijing'</span>)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>在指定的列中插入数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Persons (LastName, Address) <span class="keyword">VALUES</span> (<span class="string">'Wilson'</span>, <span class="string">'Champs-Elysees'</span>)</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Carter</td>
<td>Thomas</td>
<td>Changan Street</td>
<td>Beijing</td>
</tr>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
<tr>
<td>Wilson</td>
<td></td>
<td>Champs-Elysees</td>
</tr>
</tbody>
</table>
<h4 id="UPDATE-语句"><a href="#UPDATE-语句" class="headerlink" title="UPDATE 语句"></a>UPDATE 语句</h4><p>Update 语句用于修改表中的数据，它的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 = 新值 <span class="keyword">WHERE</span> 列名称 = 某值</div></pre></td></tr></table></figure>
<p>示例如下：</p>
<p>Person 表：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
<tr>
<td>Wilson</td>
<td></td>
<td>Champs-Elysees</td>
</tr>
</tbody>
</table>
<p>更新某一行中的一个列，为 “Wilson” 行添加 “firstname” 列的值：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> FirstName = <span class="string">'Fred'</span> <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
<tr>
<td>Wilson</td>
<td>Fred</td>
<td>Champs-Elysees</td>
</tr>
</tbody>
</table>
<p>更新某一行中的若干列，为 “Wilson” 行更新地址（address），并添加城市名称（city）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> Person <span class="keyword">SET</span> Address = <span class="string">'Zhongshan 23'</span>, City = <span class="string">'Nanjing'</span></div><div class="line"><span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
<tr>
<td>Wilson</td>
<td>Fred</td>
<td>Zhongshan 23</td>
<td>Nanjing</td>
</tr>
</tbody>
</table>
<h4 id="SQL-DELETE-语句"><a href="#SQL-DELETE-语句" class="headerlink" title="SQL DELETE 语句"></a>SQL DELETE 语句</h4><p>DELETE 语句用于删除表中的行，它的语法如下：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 = 值</div></pre></td></tr></table></figure>
<p>Person 表：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
<tr>
<td>Wilson</td>
<td>Fred</td>
<td>Zhongshan 23</td>
<td>Nanjing</td>
</tr>
</tbody>
</table>
<p>删除 “Wilson” 行：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName = <span class="string">'Wilson'</span></div></pre></td></tr></table></figure>
<p>结果如下：</p>
<table>
<thead>
<tr>
<th>LastName</th>
<th>FirstName</th>
<th>Address</th>
<th>City</th>
</tr>
</thead>
<tbody>
<tr>
<td>Gates</td>
<td>Bill</td>
<td>Xuanwumen 10</td>
<td>Beijing</td>
</tr>
</tbody>
</table>
<p>在不删除表的前提下删除所有的行，这时表的结构、属性和索引都是完整的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person</div><div class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> Person</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SQL 是用于访问和处理数据库的标准的计算机语言。&lt;/p&gt;
&lt;p&gt;如果需要在网站或 APP 中创建或使用数据库，需要具备以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RDBMS 数据库程序（比如 MS Access, SQL Server, MySQL）&lt;/li&gt;
&lt;li&gt;服务器端脚本语言（比如 PHP 或 ASP）&lt;/li&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;HTML / CSS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RDBMS 指的是关系型数据库管理系统。&lt;/p&gt;
&lt;p&gt;RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server, IBM DB2, Oracle, MySQL 以及 Microsoft Access。&lt;/p&gt;
&lt;p&gt;RDBMS 中的数据存储在被称为表（tables）的数据库对象中。&lt;/p&gt;
&lt;p&gt;表是相关的数据项的集合，它由列和行组成。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="http://yoursite.com/categories/SQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>PHP - JSON数据读写</title>
    <link href="http://yoursite.com/2016/08/13/PHP-JSON%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%86%99/"/>
    <id>http://yoursite.com/2016/08/13/PHP-JSON数据读写/</id>
    <published>2016-08-12T20:43:00.000Z</published>
    <updated>2016-08-21T18:11:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种构想设计、轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。</p>
<p>JSON用于描述数据结构，有以下形式存在。</p>
<ul>
<li>对象（object）：一个对象以 <code>{</code> 开始，并以 <code>}</code> 结束。一个对象包含一系列非排序的名称／值对，每个名称／值对之间使用 <code>,</code> 分区。</li>
<li>名称／值（collection）：名称和值之间使用 <code>:</code> 隔开，一般的形式是：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;name:value&#125;</div></pre></td></tr></table></figure>
<p>一个名称是一个字符串； 一个值可以是一个字符串，一个数值，一个对象，一个布尔值，一个有序列表，或者一个null值。</p>
<ul>
<li>值的有序列表（Array）：一个或者多个值用“,”分区后，使用“[”，“]”括起来就形成了这样的列表，形如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[collection, collection]</div></pre></td></tr></table></figure>
<ul>
<li>字符串：以””括起来的一串字符。</li>
<li>数值：一系列0-9的数字组合，可以为负数或者小数。还可以用“e”或者“E”表示为指数形式。</li>
<li>布尔值：表示为true或者false。</li>
</ul>
<a id="more"></a>
<p>JSON与XML最大的不同在于XML是一个完整的标记语言，而JSON不是。这使得XML在程序判读上需要比较多的功夫。XML在数据存储，扩展及高级检索方面具备对JSON的优势。</p>
<p>而JSON则由于比XML更加小巧，以及浏览器的内建快速解析支持，使得其更适用于网络数据传输领域。但是当JSON数据很长的时候，我们会陷入繁琐复杂的数据节点查找中。开发者可以通过<a href="http://www.jsoneditoronline.org" target="_blank" rel="external">JSON在线编辑</a>快速定位节点，将数据结构化。</p>
<h4 id="PHP创建JSON"><a href="#PHP创建JSON" class="headerlink" title="PHP创建JSON"></a>PHP创建JSON</h4><p>PHP的数组和字典可以通过 <code>json_encode</code> 转码为JSON数据，同JSON的数据结构一样，PHP的数组和字典也支持互相嵌套：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$dic = array(&apos;h&apos;=&gt;&apos;Hello&apos;, &apos;w&apos;=&gt;&apos;World&apos;);</div><div class="line">$arr = [1, 2, 5, 8, &apos;Hello&apos;, &apos;Geek&apos;, $dic];</div><div class="line">$json = json_encode($arr);</div><div class="line">echo $json.&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<h4 id="PHP解析JSON"><a href="#PHP解析JSON" class="headerlink" title="PHP解析JSON"></a>PHP解析JSON</h4><p>PHP的函数 <code>json_decode</code> 可以快速的将JOSN格式的数据转换为数组或对象：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$jsonStr = &apos;&#123;&quot;h&quot;:&quot;Hello&quot;, &quot;w&quot;:&quot;World&quot;, &quot;arr&quot;:[1, 2, 3]&#125;&apos;;</div><div class="line">$object = json_decode($jsonStr);</div><div class="line">$array = json_decode($jsonStr, true);</div><div class="line">var_dump($object);</div><div class="line">var_dump($array);</div></pre></td></tr></table></figure>
<p>而获取JOSN中单独的元素和对象，和类的取值与数组取值没有什么不同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$jsonStr = &apos;&#123;&quot;h&quot;:&quot;Hello&quot;, &quot;w&quot;:&quot;World&quot;, &quot;arr&quot;:[1, 2, 3]&#125;&apos;;</div><div class="line">$object = json_decode($jsonStr);</div><div class="line">$array = json_decode($jsonStr, true);</div><div class="line"></div><div class="line">echo $object-&gt;h.&apos;&lt;br&gt;&apos;;</div><div class="line">echo $array[&apos;h&apos;].&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JSON&lt;/strong&gt;（&lt;strong&gt;J&lt;/strong&gt;ava&lt;strong&gt;S&lt;/strong&gt;cript &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;N&lt;/strong&gt;otation）是一种构想设计、轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。&lt;/p&gt;
&lt;p&gt;JSON用于描述数据结构，有以下形式存在。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象（object）：一个对象以 &lt;code&gt;{&lt;/code&gt; 开始，并以 &lt;code&gt;}&lt;/code&gt; 结束。一个对象包含一系列非排序的名称／值对，每个名称／值对之间使用 &lt;code&gt;,&lt;/code&gt; 分区。&lt;/li&gt;
&lt;li&gt;名称／值（collection）：名称和值之间使用 &lt;code&gt;:&lt;/code&gt; 隔开，一般的形式是：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;name:value&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个名称是一个字符串； 一个值可以是一个字符串，一个数值，一个对象，一个布尔值，一个有序列表，或者一个null值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;值的有序列表（Array）：一个或者多个值用“,”分区后，使用“[”，“]”括起来就形成了这样的列表，形如：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[collection, collection]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;字符串：以””括起来的一串字符。&lt;/li&gt;
&lt;li&gt;数值：一系列0-9的数字组合，可以为负数或者小数。还可以用“e”或者“E”表示为指数形式。&lt;/li&gt;
&lt;li&gt;布尔值：表示为true或者false。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP - 时间和日期</title>
    <link href="http://yoursite.com/2016/08/12/PHP-%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F/"/>
    <id>http://yoursite.com/2016/08/12/PHP-时间和日期/</id>
    <published>2016-08-11T20:43:00.000Z</published>
    <updated>2016-08-21T18:10:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间戳主要应用于SQL数据库当中，通过时间戳可以判断数据有没有进行过更新，如果是密钥文件可以在客户端判断密钥有没有过期，可以使用时间戳作为文件或程序的版本号。</p>
<p>使用 <code>time()</code> 即可方便的获得当前的时间，它是从1970年开始计算的毫秒数，因此时间戳转换成当前日期要进行计算。</p>
<p>时间戳也可以转换成当前时间：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo date(&apos;Y - m - d  A  h:i:s &apos;,time()).&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<p>时间戳也可以从指定的时间开始计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo date(&apos;Y - m - d  A  h:i:s &apos;,&apos;10000&apos;).&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>如果没有指定时区，当前时间可能会与客户端不同，因此需要指定时区：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo date_default_timezone_set(&apos;Asia/Hong_Kong&apos;);</div></pre></td></tr></table></figure>
<p>通过下面的方法获得当前使用的时区：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo date_default_timezone_get().&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<p>时区的写入需要传输时区的id，点此进入<a href="http://php.net/manual/zh/timezones.asia.php" target="_blank" rel="external">时区id表</a>。</p>
<p><code>date()</code> 不需要传入指定起始时间也可以获取当前时间，根据传入格式的不同， <code>data()</code> 返回的时间格式也不同，它的传入值如下：</p>
<table>
<thead>
<tr>
<th>日</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>d</em></td>
<td>月份中的第几天</td>
<td><em>01</em> 到 <em>31</em></td>
</tr>
<tr>
<td><em>D</em></td>
<td>星期中的第几天</td>
<td><em>Mon</em> 到 <em>Sun</em></td>
</tr>
<tr>
<td><em>j</em></td>
<td>月份中的第几天</td>
<td><em>1</em> 到 <em>31</em></td>
</tr>
<tr>
<td><em>l</em></td>
<td>星期中的第几天</td>
<td><em>Sunday</em> 到 <em>Saturday</em></td>
</tr>
<tr>
<td><em>N</em></td>
<td>星期中的第几天（PHP 5.1 新增 ）</td>
<td><em>1</em>（表示星期一）到 <em>7</em>（表示星期天）</td>
</tr>
<tr>
<td><em>S</em></td>
<td>每月天数后面的英文后缀</td>
<td><em>st</em>，<em>nd</em>，<em>rd</em> 或者 <em>th</em>  可以和 <em>j</em> 一起用</td>
</tr>
<tr>
<td><em>w</em></td>
<td>星期中的第几天</td>
<td><em>0</em>（表示星期天）到 <em>6</em>（表示星期六）</td>
</tr>
<tr>
<td><em>z</em></td>
<td>年份中的第几天</td>
<td><em>0</em> 到 <em>366</em></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>星期</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>W</em></td>
<td>年份中的第几周，每周从星期一开始（PHP 4.1 新增）</td>
<td>例如：<em>42</em>（当年的第 42 周）</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>月</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>F</em></td>
<td>完整的英文</td>
<td><em>January</em> 到 <em>December</em></td>
</tr>
<tr>
<td><em>m</em></td>
<td>数字表示的月份</td>
<td><em>01</em> 到 <em>12</em></td>
</tr>
<tr>
<td><em>M</em></td>
<td>三个字母缩写表示的月份</td>
<td><em>Jan</em> 到 <em>Dec</em></td>
</tr>
<tr>
<td><em>n</em></td>
<td>数字表示的月份</td>
<td><em>1</em> 到 <em>12</em></td>
</tr>
<tr>
<td><em>t</em></td>
<td>给定月份所应有的天数</td>
<td><em>28</em> 到 <em>31</em></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>年</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>L</em></td>
<td>是否为闰年  如果是闰年为 <em>1</em>  否则为 <em>0</em></td>
<td><em>1</em> 或 <em>0</em></td>
</tr>
<tr>
<td><em>o</em></td>
<td>和 <em>Y</em> 的值相同  但按星期数（<em>W</em>）确定是哪一年（PHP 5.1 新增）</td>
<td><em>1999</em></td>
</tr>
<tr>
<td><em>Y</em></td>
<td>4 位数字完整表示的年份</td>
<td><em>1999</em></td>
</tr>
<tr>
<td><em>y</em></td>
<td>2 位数字表示的年份</td>
<td><em>99</em></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>时间</th>
<th>含义</th>
<th>返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td><em>a</em></td>
<td>小写的上午和下午值</td>
<td><em>am</em> 或 <em>pm</em></td>
</tr>
<tr>
<td><em>A</em></td>
<td>大写的上午和下午值</td>
<td><em>AM</em> 或 <em>PM</em></td>
</tr>
<tr>
<td><em>B</em></td>
<td>Swatch Internet 标准时</td>
<td><em>000</em> 到 <em>999</em></td>
</tr>
<tr>
<td><em>g</em></td>
<td>小时  12 小时格式  没有前导零</td>
<td><em>1</em> 到 <em>12</em></td>
</tr>
<tr>
<td><em>G</em></td>
<td>小时  24 小时格式  没有前导零</td>
<td><em>0</em> 到 <em>23</em></td>
</tr>
<tr>
<td><em>h</em></td>
<td>小时  12 小时格式  有前导零</td>
<td><em>01</em> 到 <em>12</em></td>
</tr>
<tr>
<td><em>H</em></td>
<td>小时  24 小时格式  有前导零</td>
<td><em>00</em> 到 <em>23</em></td>
</tr>
<tr>
<td><em>i</em></td>
<td>有前导零的分钟数</td>
<td><em>00</em> 到 <em>59</em>&gt;</td>
</tr>
<tr>
<td><em>s</em></td>
<td>秒数  有前导零</td>
<td><em>00</em> 到 <em>59</em>&gt;</td>
</tr>
</tbody>
</table>
<p>​</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间戳主要应用于SQL数据库当中，通过时间戳可以判断数据有没有进行过更新，如果是密钥文件可以在客户端判断密钥有没有过期，可以使用时间戳作为文件或程序的版本号。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;time()&lt;/code&gt; 即可方便的获得当前的时间，它是从1970年开始计算的毫秒数，因此时间戳转换成当前日期要进行计算。&lt;/p&gt;
&lt;p&gt;时间戳也可以转换成当前时间：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;echo date(&amp;apos;Y - m - d  A  h:i:s &amp;apos;,time()).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;时间戳也可以从指定的时间开始计算：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;echo date(&amp;apos;Y - m - d  A  h:i:s &amp;apos;,&amp;apos;10000&amp;apos;).&amp;apos;&amp;lt;br&amp;gt;&amp;apos;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP - 面向对象</title>
    <link href="http://yoursite.com/2016/08/12/PHP-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/08/12/PHP-面向对象/</id>
    <published>2016-08-11T20:43:00.000Z</published>
    <updated>2016-08-21T18:10:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Hello &#123;</div><div class="line"></div><div class="line">    public function sayello() &#123;</div><div class="line">        echo &apos;Hello PHP&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类的实例化"><a href="#类的实例化" class="headerlink" title="类的实例化"></a>类的实例化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$h = new Hello();</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="类方法的引用"><a href="#类方法的引用" class="headerlink" title="类方法的引用"></a>类方法的引用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$h-&gt;sayello();</div></pre></td></tr></table></figure>
<h4 id="类的构造器和外部形参"><a href="#类的构造器和外部形参" class="headerlink" title="类的构造器和外部形参"></a>类的构造器和外部形参</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">class Man &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Man constructor.</div><div class="line">     * @param int $age  年龄</div><div class="line">     * @param string $name 名字</div><div class="line">     */</div><div class="line"></div><div class="line">    public function __construct($age, $name) &#123;</div><div class="line">    echo &apos;coustruct&apos;;</div><div class="line">        $this-&gt;_age = $age;</div><div class="line">        $this-&gt;_name = $name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function getAge() &#123;</div><div class="line">        return $this-&gt;_age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public function getName() &#123;</div><div class="line">        return $this-&gt;_name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private $_age, $_name;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类方法的声明和使用"><a href="#类方法的声明和使用" class="headerlink" title="类方法的声明和使用"></a>类方法的声明和使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class Man &#123;</div><div class="line"></div><div class="line">    public static function sayHello() &#123;</div><div class="line">        echo &apos;Hello Men&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Man::sayHello();</div></pre></td></tr></table></figure>
<h4 id="PHP静态属性的声明和使用："><a href="#PHP静态属性的声明和使用：" class="headerlink" title="PHP静态属性的声明和使用："></a>PHP静态属性的声明和使用：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class Man &#123;</div><div class="line"></div><div class="line">    public function __construct($age, $name) &#123;</div><div class="line">    echo &apos;coustruct&apos;;</div><div class="line">        $this-&gt;_age = $age;</div><div class="line">        $this-&gt;_name = $name;</div><div class="line">        Man::$NUM++;</div><div class="line">        if (Man::$NUM&gt;Man::MAX_NUM) &#123;</div><div class="line">            throw new Exception(&apos;不能创建更多的MAN&apos;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private $_age, $_name;</div><div class="line">    private static $NUM = 0;</div><div class="line">    const MAX_NUM = 100;</div><div class="line">&#125;</div><div class="line"></div><div class="line">for ($i=0; $i&lt;200; $i++) &#123;</div><div class="line">    $m = new Man($i,&apos;Geek&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静态的属性和方法是为了描述类的信息，比如以上描述的就是初始人数是0，最大人数是100，成员属性和方法是为了描述类的实例。</p>
<h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">class People &#123;</div><div class="line"></div><div class="line">   public function __construct($age, $name, $sex) &#123;</div><div class="line">       $this-&gt;_age = $age;</div><div class="line">       $this-&gt;_name = $name;</div><div class="line">       $this-&gt;_sex = $sex;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public function sayHi() &#123;</div><div class="line">       echo $this-&gt;_name.&apos; say hi&apos;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private $_age, $_name, $_sex;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class Women extends People &#123;</div><div class="line"></div><div class="line">   public function __construct($age, $name) &#123;</div><div class="line">       parent::__construct($age, $name, &apos;女&apos;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">$w = new Women(10, &apos;Geek&apos;);</div><div class="line">$w-&gt;sayHi();</div></pre></td></tr></table></figure>
<h4 id="重写类方法"><a href="#重写类方法" class="headerlink" title="重写类方法"></a>重写类方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">class People &#123;</div><div class="line"></div><div class="line">   public function __construct($age, $name, $sex) &#123;</div><div class="line">       $this-&gt;_age = $age;</div><div class="line">       $this-&gt;_name = $name;</div><div class="line">       $this-&gt;_sex = $sex;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public function sayHi() &#123;</div><div class="line">       echo $this-&gt;_name.&apos; say hi&apos;;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   private $_age, $_name, $_sex;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">class Women extends People &#123;</div><div class="line"></div><div class="line">   public function __construct($age, $name) &#123;</div><div class="line">       parent::__construct($age, $name, &apos;女&apos;);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   public function sayHi() &#123;</div><div class="line">       echo &apos;women &apos;.$this-&gt;getName().&apos; say hi&apos;;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$w = new Women(10, &apos;Geek&apos;);</div><div class="line">$w-&gt;sayHi();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;类的声明&quot;&gt;&lt;a href=&quot;#类的声明&quot; class=&quot;headerlink&quot; title=&quot;类的声明&quot;&gt;&lt;/a&gt;类的声明&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;class Hello &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    public function sayello() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        echo &amp;apos;Hello PHP&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;类的实例化&quot;&gt;&lt;a href=&quot;#类的实例化&quot; class=&quot;headerlink&quot; title=&quot;类的实例化&quot;&gt;&lt;/a&gt;类的实例化&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$h = new Hello();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP - 基础语法</title>
    <link href="http://yoursite.com/2016/08/11/PHP-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2016/08/11/PHP-基础语法/</id>
    <published>2016-08-10T20:43:00.000Z</published>
    <updated>2016-08-21T18:11:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>PHP</strong>（全称：<strong>P</strong>HP：<strong>H</strong>ypertext <strong>P</strong>reprocessor，即“PHP：超文本预处理器”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用。PHP的语法借鉴吸收C语言、Java和Perl等流行计算机语言的特点，易于一般程序员学习。PHP的主要目标是允许网络开发人员快速编写动态页面，但PHP也被用于其他很多领域。</p>
<p>PHP的应用范围相当广泛，尤其是在网页程序的开发上。一般来说PHP大多运行在网页服务器上，通过运行PHP代码来产生用户浏览的网页。PHP可以在多数的服务器和操作系统上运行。</p>
<h4 id="PHP标记符"><a href="#PHP标记符" class="headerlink" title="PHP标记符"></a>PHP标记符</h4><p>PHP标记符以 <code>&lt;?php</code> 开头，以 <code>?&gt;</code> 结尾。如果是纯粹的PHP程序 <code>?&gt;</code> 标识符是可以省略的。PHP 代码和 HTML 代码是可以混编的，使用 <code>&lt;!DOCTYPE html&gt;</code> 声明Html的头，使用 <code>&lt;!doc&gt;</code> 创建Html的模板，就可以进行混编了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">echo &quot;Hello PHP&quot;;</div><div class="line">?&gt;</div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot;</div><div class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;PHP Tag&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">Hello HTML</div><div class="line">&lt;?php</div><div class="line">echo &quot;Hello PHP&quot;</div><div class="line">?&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>最终输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello PHP Hello HTML Hello PHP</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h4><p>在PHP中定义一个变量非常简单，只需要用一个美元符号 <code>$</code> 开始：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$a = 10;</div><div class="line">$a = 20;</div><div class="line">$b = 5;</div><div class="line">echo $a + $b;</div></pre></td></tr></table></figure>
<h4 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h4><p>PHP的常量是使用 <code>const</code> 关键字来定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const THE_VALUE = 100;</div><div class="line">echo THE_VALUE;</div></pre></td></tr></table></figure>
<p>需要注意的是， <code>const</code> 关键字是在PHP5以后引入的，如果运行在低版本的PHP上会出错，对于低版本的PHP而言，可以使用 <code>define</code> 声明常量：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">define(&apos;THE_STRING&apos;,&apos;Hello PHP4&apos;);</div><div class="line">echo THE_STRING;</div></pre></td></tr></table></figure>
<p><code>define</code> 虽然可以声明常量 但两者还是有所不同，<code>const</code> 本身就是一个语言结构，而 <code>define</code> 是一个函数。另外 <code>const</code> 在编译时要比 <code>define</code> 快很多，两者的不同还体现在以下几点：</p>
<ol>
<li>const用于类成员变量的定义，一经定义，不可修改。define不可用于类成员变量的定义，可用于全局常量。</li>
<li>const可在类中使用，define不能。</li>
<li>const不能在条件语句中定义常量。</li>
</ol>
<h4 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h4><p>PHP的函数声明和其他语言并没有很大区别，它的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function traceHelloPHP() &#123;</div><div class="line">    echo &quot;Hello PHP&lt;br&gt;&quot;;</div><div class="line">    echo &apos;Hello World&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">traceHelloPHP();</div></pre></td></tr></table></figure>
<p>这就是一个没有传入参数，也没有返回值的PHP函数。</p>
<p>在PHP中，函数也可以作为一个变量来执行，它的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function traceHelloPHP() &#123;</div><div class="line">    echo &quot;Hello PHP&lt;br&gt;&quot;;</div><div class="line">    echo &apos;Hello World&lt;br&gt;&apos;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$func = &apos;traceHelloPHP&apos;;</div><div class="line">$func();</div></pre></td></tr></table></figure>
<p>在PHP中，具有传入参数的函数语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">function helloTo($name) &#123;</div><div class="line">    echo &apos;Hello &apos;.$name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$str = &apos;Geek&apos;;</div><div class="line">helloTo($str);</div><div class="line">helloTo(&apos;Nerd&apos;);</div></pre></td></tr></table></figure>
<p>从上面可以看出PHP中的字符串是以 <code>.</code> 进行相加。多个传入参数使用 <code>,</code> 进行分割。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function num($a, $b) &#123;</div><div class="line">    echo &quot;a=$a , b=$b&quot;.&apos;&lt;br&gt;&apos;;</div><div class="line">&#125;</div><div class="line">num(2, 3);</div></pre></td></tr></table></figure>
<p>具有返回值的函数，直接使用 <code>return</code> 关键字就可以了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">function add($a, $b) &#123;</div><div class="line">    return $a + $b;</div><div class="line">&#125;</div><div class="line">echo add(10,2).&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<h4 id="PHP控制流"><a href="#PHP控制流" class="headerlink" title="PHP控制流"></a>PHP控制流</h4><p>if else 控制语句语法如下，其中使用HTML嵌套PHP是为了防止客户端与服务器端的编码方式不一致，所以在Html的Head中显式声明编码方式为UTF-8：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot;</div><div class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Controll Flow&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;?php</div><div class="line"></div><div class="line">function getLevel($score) &#123;</div><div class="line">    if ($score&gt;=90) &#123;</div><div class="line">        return &apos;优秀&apos;;</div><div class="line">    &#125;</div><div class="line">    else if ($score&gt;=80) &#123;</div><div class="line">        return &apos;良好&apos;;</div><div class="line">    &#125;</div><div class="line">    else if ($score&gt;=60) &#123;</div><div class="line">        return &apos;及格&apos;;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        return &apos;不及格&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">echo getLevel(70);</div><div class="line"></div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>switch case 控制语句语法如下，在PHP中，<strong>switch case 控制语句如果有return就不需要break</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">    &lt;meta name=&quot;viewport&quot;</div><div class="line">          content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</div><div class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;</div><div class="line">    &lt;title&gt;Controll Flow&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;?php</div><div class="line"></div><div class="line">function getLevelSwitchCase($score) &#123;</div><div class="line">    switch (intval($score/10)) &#123;</div><div class="line">        case 10:</div><div class="line">        case 9:</div><div class="line">            return &apos;优秀&apos;;</div><div class="line">        case 8:</div><div class="line">            return &apos;良好&apos;;</div><div class="line">        case 7:</div><div class="line">        case 6:</div><div class="line">            return &apos;及格&apos;;</div><div class="line">        default:</div><div class="line">            return &apos;不及格&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">?&gt;</div><div class="line"></div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="PHP循环"><a href="#PHP循环" class="headerlink" title="PHP循环"></a>PHP循环</h4><p>PHP的for循环语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">for ($i=0; $i&lt;100; $i++) &#123;</div><div class="line">    echo $i.&apos;&lt;br&gt;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>white 循环的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$i = 0;</div><div class="line">while ($i&lt;100) &#123;</div><div class="line">    $i++;</div><div class="line">    echo $i.&apos;&lt;br&gt;&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>do white 循环的语法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$i = 0;</div><div class="line">do &#123;</div><div class="line">    $i++;</div><div class="line">    echo $i.&apos;&lt;br&gt;&apos;;</div><div class="line">&#125;</div><div class="line">while (</div><div class="line">    $i&lt;10</div><div class="line">);</div></pre></td></tr></table></figure>
<p>break和continue的使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for ($i=0; $i&lt;100; $i++) &#123;</div><div class="line">    echo $i.&apos;&lt;br&gt;&apos;;</div><div class="line">    if ($i==50) &#123;break;&#125;</div><div class="line">    if ($i==20) &#123;continue;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="PHP-逻辑运算"><a href="#PHP-逻辑运算" class="headerlink" title="PHP 逻辑运算"></a>PHP 逻辑运算</h4><p>在PHP中，逻辑与的运算符是 <code>&amp;&amp;</code> ，逻辑或的运算符是 <code>||</code> ，逻辑非的运算符是 <code>!=</code> ，它的用法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function traceNum() &#123;</div><div class="line">    for ($i=0; $i&lt;100; $i++) &#123;</div><div class="line">        if ($i%2==0 &amp;&amp; $i%3==0) &#123;</div><div class="line">            echo $i.&apos;&lt;br&gt;&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">traceNum();</div></pre></td></tr></table></figure>
<h4 id="PHP字符串"><a href="#PHP字符串" class="headerlink" title="PHP字符串"></a>PHP字符串</h4><p>获取指定字符在字符串中的位置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$str = &apos;Hello PHP!&apos;;</div><div class="line">$index = strpos($str,&apos;o&apos;);</div><div class="line">echo $index.&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<p>从指定位置截取字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$str = &apos;Hello PHP!&apos;;</div><div class="line">$substr = substr($str, 2, 3);</div><div class="line">echo $substr.&apos;&lt;br&gt;&apos;;</div></pre></td></tr></table></figure>
<p>按长度分割字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$str = &apos;Hello PHP!&apos;;</div><div class="line">print_r(str_split($str,3));</div></pre></td></tr></table></figure>
<p>按指定字符修改字符串：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$str = &apos;Hello PHP!&apos;;</div><div class="line">print_r(explode(&apos; &apos;,$str));</div></pre></td></tr></table></figure>
<p>字符串连接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$num = 100;</div><div class="line">echo $str.&apos;Java&apos;;</div><div class="line">echo &quot;$str Java&lt;br&gt;$num&quot;;</div></pre></td></tr></table></figure>
<p><strong>需要注意的是，字符串的连接有两种方式：<code>.</code> 和 <code>&quot;&quot;</code> ，数组需要用 <code>print_t</code> 来输出。</strong></p>
<h4 id="PHP数组"><a href="#PHP数组" class="headerlink" title="PHP数组"></a>PHP数组</h4><p>PHP数组的声明和赋值：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$arr = <span class="keyword">array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div><div class="line">$arr[<span class="number">3</span>] = <span class="number">4</span>;</div><div class="line">$arr[<span class="number">0</span>] = <span class="string">'Hello'</span>;</div><div class="line">print_r($arr);</div></pre></td></tr></table></figure>
<p>PHP数组的尾部添加：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">10</span>; $i++) &#123;</div><div class="line">    array_push($arr, <span class="string">"item$i"</span>);</div><div class="line">&#125;</div><div class="line">print_r($arr);</div></pre></td></tr></table></figure>
<p>PHP的数组可以以key-value的方式存储数据：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$arr[<span class="string">'h'</span>] = <span class="string">'Hello'</span>;</div><div class="line">$arr[<span class="string">'w'</span>] = <span class="string">'World'</span>;</div><div class="line"><span class="keyword">echo</span> $arr[<span class="string">'h'</span>];</div></pre></td></tr></table></figure>
<p>PHP的数组兼具数组和字典的特性：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$dic = <span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="string">'hello'</span>,<span class="number">1</span>=&gt;<span class="string">'PHP'</span>,<span class="string">'s'</span>=&gt;<span class="string">'Swift'</span>,<span class="string">'j'</span>=&gt;<span class="string">'Java'</span>);</div><div class="line">print_r($dic);</div></pre></td></tr></table></figure>
<h4 id="Include和Require"><a href="#Include和Require" class="headerlink" title="Include和Require"></a>Include和Require</h4><p>Include和Require是PHP引入头文件的两种方式，Include是包含关系，而Require是依赖关系，如果包含文件查找不到的话，并不会提示错误。而如果依赖文件查找不到的话，肯定是会报错的。</p>
<p>实际上这两个关键字的功能是一样的，只是错误提示的级别不一样。Include和Require还有两个对应的关键字：include_once和require_once，它们的作用是为了保证被引入的PHP文件只会执行一次。</p>
<p>在工程较大时，可能会有多个地方引入了同一个PHP文件，可能会有意想不到的错误。include_once和require_once就是为了避免这样的事件发生。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;PHP&lt;/strong&gt;（全称：&lt;strong&gt;P&lt;/strong&gt;HP：&lt;strong&gt;H&lt;/strong&gt;ypertext &lt;strong&gt;P&lt;/strong&gt;reprocessor，即“PHP：超文本预处理器”）是一种开源的通用计算机脚本语言，尤其适用于网络开发并可嵌入HTML中使用。PHP的语法借鉴吸收C语言、Java和Perl等流行计算机语言的特点，易于一般程序员学习。PHP的主要目标是允许网络开发人员快速编写动态页面，但PHP也被用于其他很多领域。&lt;/p&gt;
&lt;p&gt;PHP的应用范围相当广泛，尤其是在网页程序的开发上。一般来说PHP大多运行在网页服务器上，通过运行PHP代码来产生用户浏览的网页。PHP可以在多数的服务器和操作系统上运行。&lt;/p&gt;
&lt;h4 id=&quot;PHP标记符&quot;&gt;&lt;a href=&quot;#PHP标记符&quot; class=&quot;headerlink&quot; title=&quot;PHP标记符&quot;&gt;&lt;/a&gt;PHP标记符&lt;/h4&gt;&lt;p&gt;PHP标记符以 &lt;code&gt;&amp;lt;?php&lt;/code&gt; 开头，以 &lt;code&gt;?&amp;gt;&lt;/code&gt; 结尾。如果是纯粹的PHP程序 &lt;code&gt;?&amp;gt;&lt;/code&gt; 标识符是可以省略的。PHP 代码和 HTML 代码是可以混编的，使用 &lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/code&gt; 声明Html的头，使用 &lt;code&gt;&amp;lt;!doc&amp;gt;&lt;/code&gt; 创建Html的模板，就可以进行混编了。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;Hello PHP&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;html&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta name=&amp;quot;viewport&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          content=&amp;quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;title&amp;gt;PHP Tag&amp;lt;/title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/head&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hello HTML&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;?php&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;echo &amp;quot;Hello PHP&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;?&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/body&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/html&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最终输出：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Hello PHP Hello HTML Hello PHP&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="PHP" scheme="http://yoursite.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>iOS HTTP通讯 - GET方式和POST方式</title>
    <link href="http://yoursite.com/2016/08/10/iOS%20HTTP%E9%80%9A%E8%AE%AF%20-%20GET%E6%96%B9%E5%BC%8F%E5%92%8CPOST%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/08/10/iOS HTTP通讯 - GET方式和POST方式/</id>
    <published>2016-08-09T18:46:00.000Z</published>
    <updated>2016-08-21T18:11:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>与服务器进行通讯是每个程序员必备的技能，下面我们将搭建一个服务器，并通过这个服务器了解 Swift 语言是如何与服务器进行通讯的。</p>
<h4 id="搭建J2E开发环境"><a href="#搭建J2E开发环境" class="headerlink" title="搭建J2E开发环境"></a>搭建J2E开发环境</h4><p>搭建服务器之前首先确认已经具有以下开发环境：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Eclipse IDE</th>
<th style="text-align:center">Apache Tomcat</th>
<th style="text-align:center">JDK</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="http://oboehz2ag.bkt.clouddn.com/eclipse.png?imageView2/2/h/50/interlace/0/q/100" alt=""></td>
<td style="text-align:center"><img src="http://oboehz2ag.bkt.clouddn.com/tomcat.png?imageView2/2/h/50/interlace/0/q/100" alt=""></td>
<td style="text-align:center"><img src="http://oboehz2ag.bkt.clouddn.com/oracle.GIF?imageView2/2/h/50/interlace/0/q/100" alt=""></td>
</tr>
<tr>
<td style="text-align:center">必须</td>
<td style="text-align:center">必须</td>
<td style="text-align:center">可选</td>
</tr>
<tr>
<td style="text-align:center">Java 编译器</td>
<td style="text-align:center">基于 Java 的 Web 服务器</td>
<td style="text-align:center">Java 的运行环境</td>
</tr>
<tr>
<td style="text-align:center"><a href="https://eclipse.org/downloads/" target="_blank" rel="external">下载地址</a></td>
<td style="text-align:center"><a href="http://tomcat.apache.org/" target="_blank" rel="external">下载地址</a></td>
<td style="text-align:center"><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">下载地址</a></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>首先使用 Eclipse IDE 新建一个 Dynamic Web Project：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/dynamicWebProject.png" alt=""></p>
<p>填写 Project Name，选择 New Runtime：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/runtime1.png" alt=""></p>
<p>选择一个 Apache Tomcat，点击 Next：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/runtime2.png" alt=""></p>
<p>选择 Browse，找到下载的 Apache Tomcat，并填写 Tomcat Server 的 Name，点击 Finish：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/dynamicWebProject.png" alt=""></p>
<p>再次点击 Finish，一个 Web 服务器就搭建好了。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/WabServer.png" alt=""></p>
<h4 id="GET方式通讯"><a href="#GET方式通讯" class="headerlink" title="GET方式通讯"></a>GET方式通讯</h4><p>在 WebContent 中新建一个 JSP File：</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/CreateJSPFile1.png" alt=""></p>
<p>填写 File Name，就得到一个 JSP 文件。</p>
<h4 id="JSP简介"><a href="#JSP简介" class="headerlink" title="JSP简介"></a>JSP简介</h4><p>JSP 全名为 Java Server Pages，中文名叫 Java 服务器页面，其根本是一个简化的 Servlet 设计，它是由 Sun Microsystems 公司倡导、许多公司参与一起建立的一种动态网页技术标准。</p>
<p>JSP技术有点类似ASP技术，它是在传统的网页 HTML 文件中，插入 Java 程序段也就是 Scriptlet，和 JSP 标记 Tag，从而形成 JSP 文件。</p>
<p>用 JSP 开发的 Web 应用是跨平台的，既能在 Linux 下运行，也能在其他操作系统上运行。</p>
<p>它实现了 Html 语法中的 Java 扩展（以 &lt;%, %&gt;形式）。JSP 与 Servlet 一样，是在服务器端执行的。通常返回给客户端的就是一个 HTML 文本，因此客户端只要有浏览器就能浏览。</p>
<p>以上就是 JSP 的简单介绍，此时我们创建的 JSP 文件内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</div><div class="line">&lt;title&gt;Insert title here&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>可以看出，它同时包括 Java 和 Html，现在我们将 Html 的部分删掉，将这个文件修改为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</div><div class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</div><div class="line"></div><div class="line">&lt;%</div><div class="line"></div><div class="line">String name = request.getParameter(&quot;name&quot;);</div><div class="line">if (name != null) &#123;</div><div class="line">	out.print(&quot;Hello &quot; + name);</div><div class="line">&#125;</div><div class="line">else &#123;</div><div class="line">	out.print(&quot;No args&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">%&gt;&gt;</div></pre></td></tr></table></figure>
<p>然后运行这个 Project，当成功启动后，我们就可以用下面的地址访问新建的 Java 服务器页面：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/your-project-name/your-jspfile-name.jsp</div></pre></td></tr></table></figure>
<p>我们写在服务器的代码相信很容易看懂，使用 String 类型的属性 name 获取名为 name 的值，如果这个值不为空，就输出 Hello + name，如果是空的，输出 No args。因为我们还没有给它传值，所以网页上的显示内容是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">No args</div></pre></td></tr></table></figure>
<p>如果我们将网址改为下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/your-project-name/your-jspfile-name.jsp?name=geek</div></pre></td></tr></table></figure>
<p>网页的显示内容为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello geek</div></pre></td></tr></table></figure>
<p>我们将 <code>?key=value</code> 这种直接写在地址栏的通讯方式称为 get 方式通讯，如果有多个值需要传递到服务器，使用 <code>&amp;</code> 符号：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/your-project-name/your-jspfile-name.jsp?name=geek&amp;age=20</div></pre></td></tr></table></figure>
<h4 id="Swift语言下的GET通讯"><a href="#Swift语言下的GET通讯" class="headerlink" title="Swift语言下的GET通讯"></a>Swift语言下的GET通讯</h4><p>下面我们来介绍，如何使用 Swift 语言和服务器进行通讯，首先创建 3 个控件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@IBOutlet weak var inputField: UITextField!</div><div class="line"></div><div class="line">@IBOutlet weak var outTextView: UITextView!</div><div class="line"></div><div class="line">@IBAction func connectBtn(sender: AnyObject) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>点击 Button 时，将 TextField 的文本与我们创建的服务器页面合成在一起：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@IBOutlet weak var inputField: UITextField!</div><div class="line"></div><div class="line">@IBOutlet weak var outTextView: UITextView!</div><div class="line"></div><div class="line">@IBAction func connectBtn(sender: AnyObject) &#123;</div><div class="line"></div><div class="line">    let str = &quot;http://localhost:8080/MyServer/Hello.jsp?name=\(inputField.text!)&quot;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个方法，获取服务器的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func runInWebServer(str: String) &#123;</div><div class="line"></div><div class="line">        let session = NSURLSession.sharedSession()</div><div class="line">        let url = NSURL(string: str)</div><div class="line">        let request = NSURLRequest(URL: url!)</div><div class="line"></div><div class="line">        let task = session.dataTaskWithRequest(request) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        task.resume()</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>将数据呈现在 TextView 上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">func runInWebServer(str: String) &#123;</div><div class="line"></div><div class="line">    let session = NSURLSession.sharedSession()</div><div class="line">    let url = NSURL(string: str)</div><div class="line">    let request = NSURLRequest(URL: url!)</div><div class="line"></div><div class="line">    let task = session.dataTaskWithRequest(request) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line"></div><div class="line">        if error != nil &#123;</div><div class="line"></div><div class="line">            dispatch_async(dispatch_get_main_queue(), &#123;</div><div class="line">                self.outTextView.text = &quot;出错了&quot;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            if let d = data &#123;</div><div class="line">                let html = String(data: d, encoding: NSUTF8StringEncoding)</div><div class="line">                dispatch_async(dispatch_get_main_queue(), &#123;</div><div class="line">                    self.outTextView.text = html</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    task.resume()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Action 方法中调用 runInWebServer 方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@IBAction func connectBtn(sender: AnyObject) &#123;</div><div class="line"></div><div class="line">    let str = &quot;http://localhost:8080/MyServer/Hello.jsp?name=\(inputField.text!)&quot;</div><div class="line">    runInWebServer(str)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时我们就完成了 Swift 语言下 GET 方式与服务器通讯。</p>
<h4 id="Swift语言下的POST通讯"><a href="#Swift语言下的POST通讯" class="headerlink" title="Swift语言下的POST通讯"></a>Swift语言下的POST通讯</h4><p>GET 通讯方式的优势在于可以通过一个 URL 将资源进行定位。 GET 通讯方式对于比较大的数据传输支持并不太好，因为它只能写在网址中，它传输内容的大小取决于服务器取地址栏的长度。</p>
<p>比如说服务器端取地址栏的长度是 500 个字节的话，那么传给服务器的网址长度超过 500 字节后的内容就会丢失。</p>
<p><strong>POST通讯方式不会把参数写在地址栏中，它的优势在于可以传递庞大的数据。</strong></p>
<p>使用POST通讯的流程如下：</p>
<ol>
<li><p>获取服务器页面的 URL：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let url = NSURL(string: &quot;http://localhost:8080/MyServer/Hello.jsp&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>通过 URL 创建可变的网络请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let mutableRequest = NSMutableURLRequest(URL: url!)</div></pre></td></tr></table></figure>
</li>
<li><p>显式将 HTTP 传输方式指明为 POST：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mutableRequest.HTTPMethod = &quot;POST&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>创建传递给服务器的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let data = String(&quot;name=\(inputField.text!)&quot;).dataUsingEncoding(NSUTF8StringEncoding)</div><div class="line">mutableRequest.HTTPBody = data</div></pre></td></tr></table></figure>
</li>
<li><p>创建通讯，将数据传递给服务器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let session = NSURLSession.sharedSession()</div><div class="line">let task = session.dataTaskWithRequest(mutableRequest) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line">            dispatch_sync(dispatch_get_main_queue(), &#123;</div><div class="line">                self.outTextView.text = String(data: data!, encoding: NSUTF8StringEncoding)</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">task.resume()</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>需要注意的是 HTTPBody 传输的数据虽然在理论上是无限大，但一般控制在2M以内，根据服务器设置的不同，接收的数据大小也有所浮动。</strong></p>
<p><strong>一般来说 POST方式传输的数据大小一般在100M以内，如果超过100M就超出了HTTP传输的范畴，我们一般会采用其他方式进行传输。</strong></p>
<p><strong>客户端的编码方式需要和服务器一致，否则会出错。</strong></p>
<p>POST通讯的完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">func runInWebServerPost() &#123;</div><div class="line"></div><div class="line">    let url = NSURL(string: &quot;http://localhost:8080/MyServer/Hello.jsp&quot;)</div><div class="line">    let mutableRequest = NSMutableURLRequest(URL: url!)</div><div class="line">    mutableRequest.HTTPMethod = &quot;POST&quot;</div><div class="line"></div><div class="line">    let data = String(&quot;name=\(inputField.text!)&quot;).dataUsingEncoding(NSUTF8StringEncoding)</div><div class="line">    mutableRequest.HTTPBody = data</div><div class="line"></div><div class="line">    let session = NSURLSession.sharedSession()</div><div class="line">    let task = session.dataTaskWithRequest(mutableRequest) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), &#123;</div><div class="line">            self.outTextView.text = String(data: data!, encoding: NSUTF8StringEncoding)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    task.resume()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与服务器进行通讯是每个程序员必备的技能，下面我们将搭建一个服务器，并通过这个服务器了解 Swift 语言是如何与服务器进行通讯的。&lt;/p&gt;
&lt;h4 id=&quot;搭建J2E开发环境&quot;&gt;&lt;a href=&quot;#搭建J2E开发环境&quot; class=&quot;headerlink&quot; title=&quot;搭建J2E开发环境&quot;&gt;&lt;/a&gt;搭建J2E开发环境&lt;/h4&gt;&lt;p&gt;搭建服务器之前首先确认已经具有以下开发环境：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Eclipse IDE&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Apache Tomcat&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;JDK&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/eclipse.png?imageView2/2/h/50/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/tomcat.png?imageView2/2/h/50/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/oracle.GIF?imageView2/2/h/50/interlace/0/q/100&quot; alt=&quot;&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;必须&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;必须&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;可选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java 编译器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;基于 Java 的 Web 服务器&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Java 的运行环境&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://eclipse.org/downloads/&quot;&gt;下载地址&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://tomcat.apache.org/&quot;&gt;下载地址&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/index.html&quot;&gt;下载地址&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="HTTP通讯" scheme="http://yoursite.com/tags/HTTP%E9%80%9A%E8%AE%AF/"/>
    
      <category term="POST" scheme="http://yoursite.com/tags/POST/"/>
    
      <category term="GET" scheme="http://yoursite.com/tags/GET/"/>
    
      <category term="J2E服务器" scheme="http://yoursite.com/tags/J2E%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络数据 - 异步加载</title>
    <link href="http://yoursite.com/2016/08/10/iOS%20%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2016/08/10/iOS 异步加载网络数据/</id>
    <published>2016-08-09T18:46:00.000Z</published>
    <updated>2016-08-21T18:11:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="NSURLConnection"><a href="#NSURLConnection" class="headerlink" title="NSURLConnection"></a>NSURLConnection</h4><p>iOS 异步加载网络数据主要使用的 API 是 sendAsynchronousRequest，它是一个类型方法，使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">let request = NSURLRequest(URL: url!)</div><div class="line">let queue = NSOperationQueue()</div><div class="line"></div><div class="line">NSURLConnection.sendAsynchronousRequest(request, queue: queue) &#123; (resp: NSURLResponse?, data: NSData?, error: NSError?) in</div><div class="line"></div><div class="line">    if error != nil &#123;</div><div class="line">        print(&quot;出错了&quot;)</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        print(resp)</div><div class="line">        print(data)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>在这里，sendAsynchronousRequest 的几个传入值的意义如下：</p>
<table>
<thead>
<tr>
<th>形参名</th>
<th>作用</th>
<th>传入值</th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td>网络请求的具体链接</td>
<td>NSURLRequest实例</td>
</tr>
<tr>
<td>queue</td>
<td>新建队列</td>
<td>NSOperationQueue实例</td>
</tr>
<tr>
<td>handler</td>
<td>请求完成的通知</td>
<td>函数</td>
</tr>
</tbody>
</table>
<p>其中 handler 是一个尾随闭包，它的使用方法如下：</p>
<table>
<thead>
<tr>
<th>形参名</th>
<th>作用</th>
<th>传入值</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSURLResponse?</td>
<td>网络请求返回的HTTP协议头</td>
<td>和当前类型一致的属性</td>
</tr>
<tr>
<td>NSData?</td>
<td>网络请求返回的数据</td>
<td>和当前类型一致的属性</td>
</tr>
<tr>
<td>NSError?</td>
<td>网络请求可能发生的错误</td>
<td>和当前类型一致的属性</td>
</tr>
</tbody>
</table>
<h4 id="NSURLSession"><a href="#NSURLSession" class="headerlink" title="NSURLSession"></a>NSURLSession</h4><p>值得注意的是，iOS9 以后，NSURLConnection 通讯方式全面被 NSURLSession 取代，因此上面的方法在 iOS9 以上的版本中会有提醒，NSURLConnection 的使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">let request = NSURLRequest(URL: url!)</div><div class="line">let session = NSURLSession.sharedSession()</div><div class="line">let task = session.dataTaskWithRequest(request) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line"></div><div class="line">    if error != nil &#123;</div><div class="line">        print(&quot;出错了&quot;)</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        print(resp)</div><div class="line">        print(data)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">task.resume()</div></pre></td></tr></table></figure>
<p>它的形参和 sendAsynchronousRequest 基本一致，在此就不再赘述，NSURLSession 默认具有开线程的能力，所以也就不需要 NSOperationQueue 实例了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;NSURLConnection&quot;&gt;&lt;a href=&quot;#NSURLConnection&quot; class=&quot;headerlink&quot; title=&quot;NSURLConnection&quot;&gt;&lt;/a&gt;NSURLConnection&lt;/h4&gt;&lt;p&gt;iOS 异步加载网络数据主要使用的 API 是 sendAsynchronousRequest，它是一个类型方法，使用方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;let url = NSURL(string: &amp;quot;http://www.jikexueyuan.com&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let request = NSURLRequest(URL: url!)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;let queue = NSOperationQueue()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;NSURLConnection.sendAsynchronousRequest(request, queue: queue) &amp;#123; (resp: NSURLResponse?, data: NSData?, error: NSError?) in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    if error != nil &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&amp;quot;出错了&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    else &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(resp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(data)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="网络数据" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>iOS网络数据 - 同步加载</title>
    <link href="http://yoursite.com/2016/08/10/iOS%20%E5%8A%A0%E8%BD%BD%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    <id>http://yoursite.com/2016/08/10/iOS 加载网络数据/</id>
    <published>2016-08-09T18:46:00.000Z</published>
    <updated>2016-08-21T18:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>读取网络数据是 iOS 开发中很重要的部分，下面我们用获取一个网页的方式来了解获取网络数据。</p>
<p>下面我们使用 NSString 来接收一个网页的源代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func loadWedDataToHTML() &#123;</div><div class="line"></div><div class="line">    let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line"></div><div class="line">    do &#123;</div><div class="line">        let str = try NSString(contentsOfURL: url!, encoding: NSUTF8StringEncoding)</div><div class="line">        print(str)</div><div class="line">    &#125;</div><div class="line">    catch &#123;</div><div class="line">        print(&quot;fail&quot;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>而很多时候我们在读取一个 HTTP 协议的数据时，可能并不是一个字符串的数据，有可能是一个二进制类型的数据，如果说要把一个页面读取成二进制的数据的话，可以直接把它读成一个 NSData 类型，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">func loadWedDataToNSData() &#123;</div><div class="line"></div><div class="line">    let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">    let data = NSData(contentsOfURL: url!)</div><div class="line">    print(data)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这里虽然表现的是二进制文件，实际上和用 NSString 接收一样，NSData 实际上也是这个网页的源代码，所以当我们获取到网页的数据，并希望对它做一些修改时，也可以将 NSData 转成 NSString：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">func loadWedDataToNSData() &#123;</div><div class="line"></div><div class="line">    let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">    let data = NSData(contentsOfURL: url!)</div><div class="line">    let str = NSString(data: data!, encoding: NSUTF8StringEncoding)</div><div class="line">    print(str)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但实际上很多在通信的时候，并不是使用这两种方式，如果使用以上两种方式，有两点点是必须的：</p>
<ol>
<li><p>这个网址必须是可以打开的。</p>
<p>因为如果这个链接是不能打开的，那么程序会一直停留在获取这里；</p>
</li>
<li><p>这个通信的时间特别短，特别快；</p>
<p>因为这两种通信方式都是同步的，这就意味着此时主线程无法对 UI 进行响应；</p>
</li>
</ol>
<p>所以说实际开发过程中，一般不使用这两种方式进行通讯。这两种方式一般会用来读取本地的数据，而最常使用的API 是使用 NSURLConnection 进行网络的同步请求和异步请求。</p>
<h4 id="NSURLConnection"><a href="#NSURLConnection" class="headerlink" title="NSURLConnection"></a>NSURLConnection</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">let request = NSURLRequest(URL: url!)</div><div class="line">let data = try! NSURLConnection.sendSynchronousRequest(request, returningResponse: nil)</div><div class="line">print(data)</div></pre></td></tr></table></figure>
<p>sendSynchronousRequest 的两个传入参数：分别是网络请求和URL的回应信息，上面我们了解了网络请求这个传入参数，那么 URL 的回应信息 returningResponse 又是什么呢？实际上他是HTTP协议的协议头，它也可以被打印出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">var resp: NSURLResponse?</div><div class="line">let request = NSURLRequest(URL: url!)</div><div class="line">let data = try! NSURLConnection.sendSynchronousRequest(request, returningResponse: &amp;resp)</div><div class="line">if let r = resp &#123;</div><div class="line">    print(r)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="NSURLSession"><a href="#NSURLSession" class="headerlink" title="NSURLSession"></a>NSURLSession</h4><p>在 iOS9 中， NSURLConnection 已经被抛弃，取而代之的是NSURLSession。 NSURLSession的使用步骤进步如下：</p>
<ol>
<li>通过 NSURLSession 的实例创建 NSURLSessionTask；</li>
<li>执行 NSURLSessionTask；</li>
</ol>
<p>NSURLSessionTask 可以简单理解为任务，如数据请求任务，下载任务，上传任务等，它是一个抽象类，而我们使用的是它的子类:</p>
<ul>
<li>NSURLSessionDataTask</li>
<li>NSURLSessionUploadTask</li>
<li>NSURLSessionDownloadTask</li>
</ul>
<p>从这几个子类的名字就可以大概猜出他们的作用了，接下来我们就用一个简单的 get 请求，来使用NSURLSessionDataTask。后面的两个子类我们会在以后单独开篇再讲。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">func urlSession() &#123;</div><div class="line"></div><div class="line">    let session = NSURLSession.sharedSession()</div><div class="line">    let url = NSURL(string: &quot;http://www.jikexueyuan.com&quot;)</div><div class="line">    let task = session.dataTaskWithURL(url!) &#123; (data: NSData?, resp: NSURLResponse?, error: NSError?) in</div><div class="line">        print(data)</div><div class="line">        print(resp)</div><div class="line">        print(error)</div><div class="line">    &#125;</div><div class="line">    task.resume()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上就是 iOS 进行网络获取主要的几种方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;读取网络数据是 iOS 开发中很重要的部分，下面我们用获取一个网页的方式来了解获取网络数据。&lt;/p&gt;
&lt;p&gt;下面我们使用 NSString 来接收一个网页的源代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;func loadWedDataToHTML() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    let url = NSURL(string: &amp;quot;http://www.jikexueyuan.com&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    do &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        let str = try NSString(contentsOfURL: url!, encoding: NSUTF8StringEncoding)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(str)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    catch &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&amp;quot;fail&amp;quot;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="网络数据" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C%E6%95%B0%E6%8D%AE/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Failed to import &amp;&amp; .h file not found</title>
    <link href="http://yoursite.com/2016/08/05/Failed%20to%20import%20&amp;&amp;%20.h%20file%20not%20found/"/>
    <id>http://yoursite.com/2016/08/05/Failed to import &amp;&amp; .h file not found/</id>
    <published>2016-08-04T21:46:00.000Z</published>
    <updated>2016-08-21T18:13:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>出现这两个问题时，首先要确保相关的库和依赖已经导入到工程，如果还是有提示，这说明出错的文件 Xcode 无法获取到。</p>
<p>首先进入工程的 Build Phases ，找到 Link Binary With Libraries ，点击 + 号将提示缺失的文件导入。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/buildphases.png" alt=""></p>
<p>如果文件已经存在的话，进入工程的 Build Settings ，在 TARGETS 而不是 PROJECT 下，搜索 Search Paths，确保 Frameworks Search Paths 和 Header Search Paths 指向正确的文件路径。</p>
<a id="more"></a>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/buildsettings.png" alt=""></p>
<p>如果此时还提示 Failed to import 的话，尝试将 <code>#import &quot;xxx.h&quot;</code> 修改为 <code>#import &lt;xxx/xxx.h&gt;</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;出现这两个问题时，首先要确保相关的库和依赖已经导入到工程，如果还是有提示，这说明出错的文件 Xcode 无法获取到。&lt;/p&gt;
&lt;p&gt;首先进入工程的 Build Phases ，找到 Link Binary With Libraries ，点击 + 号将提示缺失的文件导入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ob2q6r0fn.bkt.clouddn.com/buildphases.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果文件已经存在的话，进入工程的 Build Settings ，在 TARGETS 而不是 PROJECT 下，搜索 Search Paths，确保 Frameworks Search Paths 和 Header Search Paths 指向正确的文件路径。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="Xcode错误处理" scheme="http://yoursite.com/tags/Xcode%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CocoaPods 安装和使用</title>
    <link href="http://yoursite.com/2016/08/03/CocoaPods%20%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/08/03/CocoaPods 安装和使用/</id>
    <published>2016-08-02T18:46:00.000Z</published>
    <updated>2016-08-21T18:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>在安装 CocoaPods 过程中提示需要 Ruby 的版本在 2.3 以上，而目前使用的 Ruby 版本是 Mac 系统自带的 2.0，所以需要对 Ruby 进行升级。</p>
<p>这里使用 RVM 对 Ruby 进行升级，RVM 是 Ruby Version Manager 的缩写，Ruby 版本管理器，包括 Ruby 的版本管理和 Gem 库管理，升级过程如下：</p>
<a id="more"></a>
<p>No.1 安装 RVM</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L get.rvm.io | bash -s stable</div></pre></td></tr></table></figure>
<p>No.2 测试是否安装正常</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm -v</div></pre></td></tr></table></figure>
<p>No.3 查看当前 Ruby 版本  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<p>No.4 列出已知的 Ruby 版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list known</div></pre></td></tr></table></figure>
<p>No.5 安装 Ruby 2.3  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm install 2.3</div></pre></td></tr></table></figure>
<p>No.6 检查已安装的 Ruby 版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm list</div></pre></td></tr></table></figure>
<p>No.7 创建并使用 Ruby2.3</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvm use 2.3@newgemset --create --default</div></pre></td></tr></table></figure>
<p>No.8 安装 CocoaPods</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div></pre></td></tr></table></figure>
<p>No.9 如果被墙的话，可以使用淘宝的镜像</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ gem sources --add https://ruby.taobao.org/ --remove https://rubygems.org/</div><div class="line">$ gem sources -l</div><div class="line">*** CURRENT SOURCES ***</div><div class="line"></div><div class="line">https://ruby.taobao.org</div><div class="line"># 请确保只有 ruby.taobao.org</div><div class="line">$ gem install rails</div></pre></td></tr></table></figure>
<p>现在 CocoaPods 就安装好了。下面介绍 CocoaPods 的使用：</p>
<p>No.1 创建 Podfile 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi Podfile</div></pre></td></tr></table></figure>
<p>No.2 按 i，进入编辑模式，指定目标平台和版本，以及要安装的类库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">platform :ios, &apos;8.0&apos;</div><div class="line">use_frameworks!</div><div class="line"></div><div class="line">target &apos;MyApp&apos; do</div><div class="line">  pod &apos;AFNetworking&apos;, &apos;~&gt; 2.6&apos;</div><div class="line">  pod &apos;ORStackView&apos;, &apos;~&gt; 3.0&apos;</div><div class="line">  pod &apos;SwiftyJSON&apos;, &apos;~&gt; 2.3&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>No.3 按 Esc，并且输入“ :x ”号退出保存，然后进行安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod install</div></pre></td></tr></table></figure>
<p>No.4 打开 xcworkspace 文件，类库已经成功导入到项目。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在安装 CocoaPods 过程中提示需要 Ruby 的版本在 2.3 以上，而目前使用的 Ruby 版本是 Mac 系统自带的 2.0，所以需要对 Ruby 进行升级。&lt;/p&gt;
&lt;p&gt;这里使用 RVM 对 Ruby 进行升级，RVM 是 Ruby Version Manager 的缩写，Ruby 版本管理器，包括 Ruby 的版本管理和 Gem 库管理，升级过程如下：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
      <category term="RVM" scheme="http://yoursite.com/tags/RVM/"/>
    
      <category term="Ruby" scheme="http://yoursite.com/tags/Ruby/"/>
    
  </entry>
  
  <entry>
    <title>转载 - 使用Swift对字符串进行MD5加密</title>
    <link href="http://yoursite.com/2016/08/03/%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Swift%20-%20%E8%8E%B7%E5%8F%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84MD5%E5%80%BC/"/>
    <id>http://yoursite.com/2016/08/03/【转载】Swift - 获取字符串的MD5值/</id>
    <published>2016-08-02T18:46:00.000Z</published>
    <updated>2016-08-21T18:07:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>MD5 即 Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。 其作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。</p>
</blockquote>
<p>首先，创建桥接头文件 <code>bridge.h</code> 来包含需要引用的 <code>Objective-C</code> 头文件，并在项目中配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;CommonCrypto/CommonDigest.h&gt;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>其次，对 <code>String</code> 增加 <code>MD5</code> 扩展：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> md5 : <span class="type">String</span>&#123;</div><div class="line">       <span class="keyword">let</span> str = <span class="keyword">self</span>.cStringUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)</div><div class="line">       <span class="keyword">let</span> strLen = <span class="type">CC_LONG</span>(<span class="keyword">self</span>.lengthOfBytesUsingEncoding(<span class="type">NSUTF8StringEncoding</span>))</div><div class="line">       <span class="keyword">let</span> digestLen = <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</div><div class="line">       <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CUnsignedChar</span>&gt;.alloc(digestLen);</div><div class="line"></div><div class="line">       <span class="type">CC_MD5</span>(str!, strLen, result);</div><div class="line"></div><div class="line">       <span class="keyword">let</span> hash = <span class="type">NSMutableString</span>();</div><div class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; digestLen &#123;</div><div class="line">           hash.appendFormat(<span class="string">"%02x"</span>, result[i]);</div><div class="line">       &#125;</div><div class="line">       result.destroy();</div><div class="line"></div><div class="line">       <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用样例："><a href="#使用样例：" class="headerlink" title="使用样例："></a>使用样例：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(&quot;welcome to hangge.com&quot;.md5)		//输出：6ad70eb3a4a50011af9c62cc0674803a</div></pre></td></tr></table></figure>
<p>转载自：<a href="http://www.hangge.com/blog/cache/detail_650.html" target="_blank" rel="external">http://www.hangge.com/blog/cache/detail_650.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MD5 即 Message-Digest Algorithm 5（信息-摘要算法5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有MD5实现。 其作用是让大容量信息在用数字签名软件签署私人密钥前被”压缩”成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，创建桥接头文件 &lt;code&gt;bridge.h&lt;/code&gt; 来包含需要引用的 &lt;code&gt;Objective-C&lt;/code&gt; 头文件，并在项目中配置：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#import &amp;lt;CommonCrypto/CommonDigest.h&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="MD5" scheme="http://yoursite.com/tags/MD5/"/>
    
  </entry>
  
  <entry>
    <title>iOS多线程 - 下载及图片缓存</title>
    <link href="http://yoursite.com/2016/08/03/iOS%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD%E5%8F%8A%E5%9B%BE%E7%89%87%E7%BC%93%E5%AD%98/"/>
    <id>http://yoursite.com/2016/08/03/iOS多线程下载及图片缓存/</id>
    <published>2016-08-02T18:46:00.000Z</published>
    <updated>2016-08-21T18:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>线程可以理解为下载的通道，一个线程就是一个文件的下载通道，多线程也就是同时开起好几个下载通道.当服务器提供下载服务时，使用下载者是共享带宽的，在优先级相同的情况下，总服务器会对总下载线程进行平均分配。不难理解，如果你线程多的话，那下载的越快。现流行的下载软件都支持多线程。</p>
</blockquote>
<p>下面我们通过代码来了解以下几个知识点：</p>
<ol>
<li>多线程下载；</li>
<li>自定义 NSOperation ；</li>
<li>NSCache 增删改查；</li>
<li>NSFileManager 增删改查；</li>
<li>代理模式；</li>
<li>闭包反向传值；</li>
<li>扩展方法；</li>
<li>Plist 文件解析；</li>
</ol>
<a id="more"></a>
<p>首先我们给 String 类型添加扩展方法，获取字符串的MD5值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> md5 : <span class="type">String</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> str = <span class="keyword">self</span>.cStringUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)</div><div class="line">        <span class="keyword">let</span> strLen = <span class="type">CC_LONG</span>(<span class="keyword">self</span>.lengthOfBytesUsingEncoding(<span class="type">NSUTF8StringEncoding</span>))</div><div class="line">        <span class="keyword">let</span> digestLen = <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</div><div class="line">        <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CUnsignedChar</span>&gt;.alloc(digestLen);</div><div class="line"></div><div class="line">        <span class="type">CC_MD5</span>(str!, strLen, result);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> hash = <span class="type">NSMutableString</span>();</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; digestLen &#123;</div><div class="line">            hash.appendFormat(<span class="string">"%02x"</span>, result[i]);</div><div class="line">        &#125;</div><div class="line">        result.destroy();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来自定义一个 NSOperation ，新建一个继承自 NSOperation 的类，并声明以下属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadOperation</span>: <span class="title">NSOperation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> memCache: <span class="type">NSCache</span>!</div><div class="line">    <span class="keyword">var</span> fileMgr: <span class="type">NSFileManager</span>!</div><div class="line">    <span class="keyword">var</span> diskCachePath: <span class="type">String</span>!</div><div class="line"></div><div class="line">    <span class="keyword">var</span> operations: [<span class="type">NSOperation</span>] = []</div><div class="line">    <span class="keyword">var</span> getImageQueue: <span class="type">NSOperationQueue</span>!</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后声明一个闭包：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">Block</span> = (<span class="type">UIImage</span>) -&gt; (<span class="type">Void</span>)</div></pre></td></tr></table></figure>
<p>最后声明一个协议，并创建两个代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DownloadDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们重写自定义 NSOperation 的 init 方法，用来创建沙盒目录，实例 NSCache NSFileManager NSOperationQueue ：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">    memCache = <span class="type">NSCache</span>()</div><div class="line">    fileMgr = <span class="type">NSFileManager</span>()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> paths = <span class="type">NSSearchPathForDirectoriesInDomains</span>(<span class="type">NSSearchPathDirectory</span>.<span class="type">DocumentDirectory</span>,</div><div class="line">                                                    <span class="type">NSSearchPathDomainMask</span>.<span class="type">UserDomainMask</span>,</div><div class="line">                                                    <span class="literal">true</span>)</div><div class="line">    <span class="keyword">self</span>.diskCachePath = paths.first?.stringByAppendingString(<span class="string">"/ImageCache"</span>)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> !(<span class="type">NSFileManager</span>.defaultManager().fileExistsAtPath(<span class="keyword">self</span>.diskCachePath!)) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span>! <span class="type">NSFileManager</span>.defaultManager().createDirectoryAtPath(<span class="keyword">self</span>.diskCachePath!,</div><div class="line">                                                                  withIntermediateDirectories: <span class="literal">true</span>,</div><div class="line">                                                                  attributes: <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getImageQueue = <span class="type">NSOperationQueue</span>()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面是闭包反向传值的第一步，初始化闭包：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ininWithblock</span><span class="params">(block: Block)</span></span> &#123;</div><div class="line">    showImage = block</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们利用文件名获得要保存的路径：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">diskPathForKey</span><span class="params">(key: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (diskCachePath?.stringByAppendingString(<span class="string">"/<span class="subst">\(key.md5)</span>"</span>))!</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们利用文件名判断这个文件在内存中是否存在：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cacheIsExist</span><span class="params">(key: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> data = memCache.objectForKey(key)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> data != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们利用文件名判断这个文件在磁盘中是否存在：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fileIsExist</span><span class="params">(key: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> fileMgr.fileExistsAtPath(diskPathForKey(key))</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们实现利用文件名从内存中获取文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromeMem</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> image = memCache.objectForKey(key) <span class="keyword">as</span>! <span class="type">UIImage</span></div><div class="line">    <span class="keyword">return</span> image</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们实现利用文件名从磁盘中获取文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFromeDisk</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span>  data = fileMgr.contentsAtPath(diskPathForKey(key))</div><div class="line">    <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data!)</div><div class="line">    <span class="keyword">return</span> image!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们实现利用链接下载文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: key)</div><div class="line">    <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: url!)</div><div class="line">    <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data!)</div><div class="line">    <span class="keyword">return</span> image!</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面实现将文件写入内存：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveToMem</span><span class="params">(image: UIImage, key: String)</span></span> &#123;</div><div class="line"></div><div class="line">    memCache.setObject(image, forKey: key)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下载实现将文件写入磁盘：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveToDisk</span><span class="params">(image: UIImage, key: String)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> key = diskPathForKey(key)</div><div class="line"></div><div class="line">    fileMgr.createFileAtPath(key,</div><div class="line">                             contents: <span class="type">UIImageJPEGRepresentation</span>(image, <span class="number">1.0</span>),</div><div class="line">                             attributes: <span class="literal">nil</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面实现利用链接下载文件，并将下载的文件写入内存和磁盘：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveToMemAndDisk</span><span class="params">(key: String, toDisk: Bool)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> image = download(key)</div><div class="line"></div><div class="line">    saveToMem(image, key: key)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> toDisk &#123;</div><div class="line">        saveToDisk(image, key: key)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面实现读取文件，如果内存中有就从内存读取，如果磁盘中有就从磁盘读取，并写入到内存，如果都没有，就下载并写入到内存和磁盘：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">readImage</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> cacheIsExist(key) &#123;</div><div class="line">        <span class="keyword">let</span> image = readFromeMem(key)</div><div class="line">        <span class="keyword">return</span> image</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> fileIsExist(key) &#123;</div><div class="line">        <span class="keyword">let</span> image = readFromeDisk(key)</div><div class="line">        saveToMem(image, key: key)</div><div class="line">        <span class="keyword">return</span> image</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    saveToMemAndDisk(key, toDisk: <span class="literal">true</span>)</div><div class="line"></div><div class="line">    <span class="keyword">return</span> readFromeMem(key)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面实现利用存放链接的数组，批量下载文件，设置下载线程的最大值并使用 block 执行 ViewController 预设的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">getImage</span><span class="params">(keys: [String], <span class="built_in">max</span>: Int)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> operation = <span class="type">NSBlockOperation</span>(block: &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> image = <span class="keyword">self</span>.readImage(key)</div><div class="line">            <span class="keyword">self</span>.showImage!(image)</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        operations.append(operation)</div><div class="line">    &#125;</div><div class="line">    getImageQueue.maxConcurrentOperationCount = <span class="built_in">max</span></div><div class="line">    getImageQueue.addOperations(operations, waitUntilFinished: <span class="literal">true</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面实现利用文件名删除文件：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteFile</span><span class="params">(key: String)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> fileMgr.isDeletableFileAtPath(key) &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"删除成功"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>下面实现调用代理的两个方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showImg</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.delegete != <span class="literal">nil</span>) &amp;&amp; (<span class="keyword">self</span>.delegete?.userCache != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.delegete?.userCache(<span class="keyword">self</span>, imageCache: <span class="keyword">self</span>.memCache)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">deleteImg</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.delegete != <span class="literal">nil</span>) &amp;&amp; (<span class="keyword">self</span>.delegete?.cleanCache != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.delegete?.cleanCache(<span class="keyword">self</span>, imageCache: <span class="keyword">self</span>.memCache)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们回到 ViewController 中，声明以下几个属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> keys: <span class="type">NSArray</span>!</div><div class="line">    <span class="keyword">var</span> imgView: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> downloadBtn: <span class="type">UIButton</span>?</div><div class="line">    <span class="keyword">var</span> cleanBtn: <span class="type">UIButton</span>?</div><div class="line"></div><div class="line">    <span class="keyword">var</span> operation: <span class="type">DownloadOperation</span>!</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们创建 block 要执行的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">showImage</span><span class="params">(image: UIImage)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.imgView = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.bounds)</div><div class="line">    <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.imgView!)</div><div class="line">    <span class="keyword">self</span>.imgView.image = image</div><div class="line">    <span class="built_in">print</span>(<span class="string">"block 加载图片"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们解析 Plist 文件为数组，并将包含下载链接的数组传给自定义 NSOperation 的获取文件方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadForKeys</span><span class="params">(<span class="built_in">max</span>: Int)</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> imgPaths = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"ImageLinks"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">    <span class="keyword">let</span> imgUrls = <span class="type">NSURL</span>(fileURLWithPath: imgPaths!)</div><div class="line">    <span class="keyword">self</span>.keys = <span class="type">NSArray</span>(contentsOfURL: imgUrls)!</div><div class="line">    operation.getImage(keys <span class="keyword">as</span>! [<span class="type">String</span>], <span class="built_in">max</span>: <span class="built_in">max</span>)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们给 ViewController 添加两个 Button ：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addButton</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">let</span> width = <span class="keyword">self</span>.view.bounds.size.width</div><div class="line">    <span class="keyword">let</span> height = <span class="keyword">self</span>.view.bounds.size.height</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.downloadBtn = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div><div class="line">    <span class="keyword">let</span> downloadBtnframe = <span class="type">CGRectMake</span>(<span class="number">20</span>, height-<span class="number">60</span>, <span class="number">80</span>, <span class="number">40</span>)</div><div class="line">    <span class="keyword">self</span>.downloadBtn?.frame = downloadBtnframe</div><div class="line">    <span class="keyword">self</span>.downloadBtn?.backgroundColor = <span class="type">UIColor</span>.lightGrayColor()</div><div class="line">    <span class="keyword">self</span>.downloadBtn?.titleLabel?.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">18</span>)</div><div class="line">    <span class="keyword">self</span>.downloadBtn?.setTitle(<span class="string">"下载"</span>, forState: .<span class="type">Normal</span>)</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.cleanBtn = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div><div class="line">    <span class="keyword">let</span> cleanBtnframe = <span class="type">CGRectMake</span>(width-<span class="number">80</span>-<span class="number">20</span>, height-<span class="number">60</span>, <span class="number">80</span>, <span class="number">40</span>)</div><div class="line">    <span class="keyword">self</span>.cleanBtn?.frame = cleanBtnframe</div><div class="line">    <span class="keyword">self</span>.cleanBtn?.backgroundColor = <span class="type">UIColor</span>.lightGrayColor()</div><div class="line">    <span class="keyword">self</span>.cleanBtn?.titleLabel?.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">18</span>)</div><div class="line">    <span class="keyword">self</span>.cleanBtn?.setTitle(<span class="string">"清除"</span>, forState: .<span class="type">Normal</span>)</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.downloadBtn?.addTarget(<span class="keyword">self</span>,</div><div class="line">                                action: #selector(<span class="type">ViewController</span>.downloadBtnClicked),</div><div class="line">                                forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.cleanBtn?.addTarget(<span class="keyword">self</span>,</div><div class="line">                                action: #selector(<span class="type">ViewController</span>.cleanBtnClicked),</div><div class="line">                                forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line"></div><div class="line">    <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.downloadBtn!)</div><div class="line">    <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.cleanBtn!)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们实现 Button 的响应事件方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">downloadBtnClicked</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    operation.showImg()</div><div class="line">    addButton()</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cleanBtnClicked</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">    operation.deleteImg()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们实现代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">userCache</span><span class="params">(operation: DownloadOperation, imageCache: NSCache)</span></span> &#123;</div><div class="line"></div><div class="line">    imgView.removeFromSuperview()</div><div class="line"></div><div class="line">    <span class="keyword">let</span> width = <span class="keyword">self</span>.view.bounds.size.width</div><div class="line">    <span class="keyword">let</span> imgHeight = <span class="keyword">self</span>.view.bounds.size.height / <span class="type">CGFloat</span>(<span class="type">Float</span>(keys.<span class="built_in">count</span>))</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; keys.<span class="built_in">count</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="type">CGFloat</span>(i) * imgHeight, width, imgHeight)</div><div class="line">        <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(frame: frame)</div><div class="line">        <span class="keyword">let</span> key = keys[i] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">        <span class="keyword">let</span> image = operation.readImage(key)</div><div class="line">        imageView.image = image</div><div class="line">        imageView.contentMode = .<span class="type">ScaleToFill</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(imageView)</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">cleanCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span> &#123;</div><div class="line"></div><div class="line">    imageCache.removeAllObjects()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> subView <span class="keyword">in</span> <span class="keyword">self</span>.view.subviews &#123;</div><div class="line">        subView.removeFromSuperview()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> keys &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> temKey = operation.diskPathForKey(key <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">        operation.deleteFile(temKey)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    addButton()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后我们引入代理协议，实例化自定义的  ，实例化代理对象，实例化 block，以上几个功能点就完成了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">DownloadDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> keys: <span class="type">NSArray</span>!</div><div class="line">    <span class="keyword">var</span> imgView: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> downloadBtn: <span class="type">UIButton</span>?</div><div class="line">    <span class="keyword">var</span> cleanBtn: <span class="type">UIButton</span>?</div><div class="line">    <span class="keyword">var</span> operation: <span class="type">DownloadOperation</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        operation = <span class="type">DownloadOperation</span>()</div><div class="line">        operation.ininWithblock(showImage)</div><div class="line">        operation.delegete = <span class="keyword">self</span></div><div class="line">        downloadForKeys(<span class="number">3</span>)</div><div class="line">        addButton()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完整代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> md5 : <span class="type">String</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> str = <span class="keyword">self</span>.cStringUsingEncoding(<span class="type">NSUTF8StringEncoding</span>)</div><div class="line">        <span class="keyword">let</span> strLen = <span class="type">CC_LONG</span>(<span class="keyword">self</span>.lengthOfBytesUsingEncoding(<span class="type">NSUTF8StringEncoding</span>))</div><div class="line">        <span class="keyword">let</span> digestLen = <span class="type">Int</span>(<span class="type">CC_MD5_DIGEST_LENGTH</span>)</div><div class="line">        <span class="keyword">let</span> result = <span class="type">UnsafeMutablePointer</span>&lt;<span class="type">CUnsignedChar</span>&gt;.alloc(digestLen);</div><div class="line"></div><div class="line">        <span class="type">CC_MD5</span>(str!, strLen, result);</div><div class="line"></div><div class="line">        <span class="keyword">let</span> hash = <span class="type">NSMutableString</span>();</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; digestLen &#123;</div><div class="line">            hash.appendFormat(<span class="string">"%02x"</span>, result[i]);</div><div class="line">        &#125;</div><div class="line">        result.destroy();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="type">String</span>(format: hash <span class="keyword">as</span> <span class="type">String</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> <span class="type">Block</span> = (<span class="type">UIImage</span>) -&gt; (<span class="type">Void</span>)</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">DownloadDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span></div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadOperation</span>: <span class="title">NSOperation</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> memCache: <span class="type">NSCache</span>!</div><div class="line">    <span class="keyword">var</span> fileMgr: <span class="type">NSFileManager</span>!</div><div class="line">    <span class="keyword">var</span> diskCachePath: <span class="type">String</span>!</div><div class="line"></div><div class="line">    <span class="keyword">var</span> operations: [<span class="type">NSOperation</span>] = []</div><div class="line">    <span class="keyword">var</span> getImageQueue: <span class="type">NSOperationQueue</span>!</div><div class="line"></div><div class="line">    <span class="keyword">var</span> showImage: <span class="type">Block</span>?</div><div class="line">    <span class="keyword">var</span> delegete:<span class="type">DownloadDelegate</span>?</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line"></div><div class="line">        memCache = <span class="type">NSCache</span>()</div><div class="line">        fileMgr = <span class="type">NSFileManager</span>()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> paths = <span class="type">NSSearchPathForDirectoriesInDomains</span>(<span class="type">NSSearchPathDirectory</span>.<span class="type">DocumentDirectory</span>,</div><div class="line">                                                        <span class="type">NSSearchPathDomainMask</span>.<span class="type">UserDomainMask</span>,</div><div class="line">                                                        <span class="literal">true</span>)</div><div class="line">        <span class="keyword">self</span>.diskCachePath = paths.first?.stringByAppendingString(<span class="string">"/ImageCache"</span>)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !(<span class="type">NSFileManager</span>.defaultManager().fileExistsAtPath(<span class="keyword">self</span>.diskCachePath!)) &#123;</div><div class="line"></div><div class="line">            <span class="keyword">try</span>! <span class="type">NSFileManager</span>.defaultManager().createDirectoryAtPath(<span class="keyword">self</span>.diskCachePath!,</div><div class="line">                                                                      withIntermediateDirectories: <span class="literal">true</span>,</div><div class="line">                                                                      attributes: <span class="literal">nil</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        getImageQueue = <span class="type">NSOperationQueue</span>()</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">ininWithblock</span><span class="params">(block: Block)</span></span> &#123;</div><div class="line">        showImage = block</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">diskPathForKey</span><span class="params">(key: String)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> (diskCachePath?.stringByAppendingString(<span class="string">"/<span class="subst">\(key.md5)</span>"</span>))!</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">fileIsExist</span><span class="params">(key: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> fileMgr.fileExistsAtPath(diskPathForKey(key))</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cacheIsExist</span><span class="params">(key: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> data = memCache.objectForKey(key)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> data != <span class="literal">nil</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFromeMem</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> image = memCache.objectForKey(key) <span class="keyword">as</span>! <span class="type">UIImage</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"内存读取"</span>)</div><div class="line">        <span class="keyword">return</span> image</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readFromeDisk</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span>  data = fileMgr.contentsAtPath(diskPathForKey(key))</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data!)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"文件读取"</span>)</div><div class="line">        <span class="keyword">return</span> image!</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteFile</span><span class="params">(key: String)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> fileMgr.isDeletableFileAtPath(key) &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"删除成功"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">download</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> url = <span class="type">NSURL</span>(string: key)</div><div class="line">        <span class="keyword">let</span> data = <span class="type">NSData</span>(contentsOfURL: url!)</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(data: data!)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"下载"</span>)</div><div class="line">        <span class="keyword">return</span> image!</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">saveToMemAndDisk</span><span class="params">(key: String, toDisk: Bool)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> image = download(key)</div><div class="line"></div><div class="line">        saveToMem(image, key: key)</div><div class="line"></div><div class="line">        <span class="keyword">if</span> toDisk &#123;</div><div class="line">            saveToDisk(image, key: key)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">saveToMem</span><span class="params">(image: UIImage, key: String)</span></span> &#123;</div><div class="line"></div><div class="line">        memCache.setObject(image, forKey: key)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"写入内存"</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">saveToDisk</span><span class="params">(image: UIImage, key: String)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> key = diskPathForKey(key)</div><div class="line"></div><div class="line">        fileMgr.createFileAtPath(key,</div><div class="line">                                 contents: <span class="type">UIImageJPEGRepresentation</span>(image, <span class="number">1.0</span>),</div><div class="line">                                 attributes: <span class="literal">nil</span>)</div><div class="line">        <span class="built_in">print</span>(<span class="string">"写入文件"</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">readImage</span><span class="params">(key: String)</span></span> -&gt; <span class="type">UIImage</span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> cacheIsExist(key) &#123;</div><div class="line">            <span class="keyword">let</span> image = readFromeMem(key)</div><div class="line">            <span class="keyword">return</span> image</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> fileIsExist(key) &#123;</div><div class="line">            <span class="keyword">let</span> image = readFromeDisk(key)</div><div class="line">            saveToMem(image, key: key)</div><div class="line">            <span class="keyword">return</span> image</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        saveToMemAndDisk(key, toDisk: <span class="literal">true</span>)</div><div class="line"></div><div class="line">        <span class="keyword">return</span> readFromeMem(key)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">getImage</span><span class="params">(keys: [String], <span class="built_in">max</span>: Int)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> operation = <span class="type">NSBlockOperation</span>(block: &#123;</div><div class="line"></div><div class="line">                <span class="keyword">let</span> image = <span class="keyword">self</span>.readImage(key)</div><div class="line">                <span class="keyword">self</span>.showImage!(image)</div><div class="line">            &#125;)</div><div class="line"></div><div class="line">            operations.append(operation)</div><div class="line">        &#125;</div><div class="line">        getImageQueue.maxConcurrentOperationCount = <span class="built_in">max</span></div><div class="line">        getImageQueue.addOperations(operations, waitUntilFinished: <span class="literal">true</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showImg</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.delegete != <span class="literal">nil</span>) &amp;&amp; (<span class="keyword">self</span>.delegete?.userCache != <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.delegete?.userCache(<span class="keyword">self</span>, imageCache: <span class="keyword">self</span>.memCache)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deleteImg</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.delegete != <span class="literal">nil</span>) &amp;&amp; (<span class="keyword">self</span>.delegete?.cleanCache != <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.delegete?.cleanCache(<span class="keyword">self</span>, imageCache: <span class="keyword">self</span>.memCache)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">DownloadDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> keys: <span class="type">NSArray</span>!</div><div class="line">    <span class="keyword">var</span> imgView: <span class="type">UIImageView</span>!</div><div class="line">    <span class="keyword">var</span> downloadBtn: <span class="type">UIButton</span>?</div><div class="line">    <span class="keyword">var</span> cleanBtn: <span class="type">UIButton</span>?</div><div class="line">    <span class="keyword">var</span> operation: <span class="type">DownloadOperation</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        operation = <span class="type">DownloadOperation</span>()</div><div class="line">        operation.ininWithblock(showImage)</div><div class="line">        operation.delegete = <span class="keyword">self</span></div><div class="line"></div><div class="line">        downloadForKeys(<span class="number">3</span>)</div><div class="line">        addButton()</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">downloadForKeys</span><span class="params">(<span class="built_in">max</span>: Int)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> imgPaths = <span class="type">NSBundle</span>.mainBundle().pathForResource(<span class="string">"ImageLinks"</span>, ofType: <span class="string">"plist"</span>)</div><div class="line">        <span class="keyword">let</span> imgUrls = <span class="type">NSURL</span>(fileURLWithPath: imgPaths!)</div><div class="line">        <span class="keyword">self</span>.keys = <span class="type">NSArray</span>(contentsOfURL: imgUrls)!</div><div class="line">        operation.getImage(keys <span class="keyword">as</span>! [<span class="type">String</span>], <span class="built_in">max</span>: <span class="built_in">max</span>)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">showImage</span><span class="params">(image: UIImage)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.imgView = <span class="type">UIImageView</span>(frame: <span class="keyword">self</span>.view.bounds)</div><div class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.imgView!)</div><div class="line">        <span class="keyword">self</span>.imgView.image = image</div><div class="line">        <span class="built_in">print</span>(<span class="string">"block 加载图片"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addButton</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">let</span> width = <span class="keyword">self</span>.view.bounds.size.width</div><div class="line">        <span class="keyword">let</span> height = <span class="keyword">self</span>.view.bounds.size.height</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.downloadBtn = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div><div class="line">        <span class="keyword">let</span> downloadBtnframe = <span class="type">CGRectMake</span>(<span class="number">20</span>, height-<span class="number">60</span>, <span class="number">80</span>, <span class="number">40</span>)</div><div class="line">        <span class="keyword">self</span>.downloadBtn?.frame = downloadBtnframe</div><div class="line">        <span class="keyword">self</span>.downloadBtn?.backgroundColor = <span class="type">UIColor</span>.lightGrayColor()</div><div class="line">        <span class="keyword">self</span>.downloadBtn?.titleLabel?.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">18</span>)</div><div class="line">        <span class="keyword">self</span>.downloadBtn?.setTitle(<span class="string">"下载"</span>, forState: .<span class="type">Normal</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.cleanBtn = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div><div class="line">        <span class="keyword">let</span> cleanBtnframe = <span class="type">CGRectMake</span>(width-<span class="number">80</span>-<span class="number">20</span>, height-<span class="number">60</span>, <span class="number">80</span>, <span class="number">40</span>)</div><div class="line">        <span class="keyword">self</span>.cleanBtn?.frame = cleanBtnframe</div><div class="line">        <span class="keyword">self</span>.cleanBtn?.backgroundColor = <span class="type">UIColor</span>.lightGrayColor()</div><div class="line">        <span class="keyword">self</span>.cleanBtn?.titleLabel?.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">18</span>)</div><div class="line">        <span class="keyword">self</span>.cleanBtn?.setTitle(<span class="string">"清除"</span>, forState: .<span class="type">Normal</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.downloadBtn?.addTarget(<span class="keyword">self</span>,</div><div class="line">                                    action: #selector(<span class="type">ViewController</span>.downloadBtnClicked),</div><div class="line">                                    forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.cleanBtn?.addTarget(<span class="keyword">self</span>,</div><div class="line">                                    action: #selector(<span class="type">ViewController</span>.cleanBtnClicked),</div><div class="line">                                    forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line"></div><div class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.downloadBtn!)</div><div class="line">        <span class="keyword">self</span>.view.addSubview(<span class="keyword">self</span>.cleanBtn!)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">userCache</span><span class="params">(operation: DownloadOperation, imageCache: NSCache)</span></span> &#123;</div><div class="line"></div><div class="line">        imgView.removeFromSuperview()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> width = <span class="keyword">self</span>.view.bounds.size.width</div><div class="line">        <span class="keyword">let</span> imgHeight = <span class="keyword">self</span>.view.bounds.size.height / <span class="type">CGFloat</span>(<span class="type">Float</span>(keys.<span class="built_in">count</span>))</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span> ..&lt; keys.<span class="built_in">count</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="type">CGFloat</span>(i) * imgHeight, width, imgHeight)</div><div class="line">            <span class="keyword">let</span> imageView = <span class="type">UIImageView</span>(frame: frame)</div><div class="line">            <span class="keyword">let</span> key = keys[i] <span class="keyword">as</span>! <span class="type">String</span></div><div class="line">            <span class="keyword">let</span> image = operation.readImage(key)</div><div class="line">            imageView.image = image</div><div class="line">            imageView.contentMode = .<span class="type">ScaleToFill</span></div><div class="line">            <span class="keyword">self</span>.view.addSubview(imageView)</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanCache</span> <span class="params">(operation: DownloadOperation, imageCache:NSCache)</span></span> &#123;</div><div class="line"></div><div class="line">        imageCache.removeAllObjects()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> subView <span class="keyword">in</span> <span class="keyword">self</span>.view.subviews &#123;</div><div class="line">            subView.removeFromSuperview()</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> keys &#123;</div><div class="line"></div><div class="line">            <span class="keyword">let</span> temKey = operation.diskPathForKey(key <span class="keyword">as</span>! <span class="type">String</span>)</div><div class="line">            operation.deleteFile(temKey)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        addButton()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">downloadBtnClicked</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        operation.showImg()</div><div class="line">        addButton()</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">cleanBtnClicked</span><span class="params">()</span></span> &#123;</div><div class="line"></div><div class="line">        operation.deleteImg()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;线程可以理解为下载的通道，一个线程就是一个文件的下载通道，多线程也就是同时开起好几个下载通道.当服务器提供下载服务时，使用下载者是共享带宽的，在优先级相同的情况下，总服务器会对总下载线程进行平均分配。不难理解，如果你线程多的话，那下载的越快。现流行的下载软件都支持多线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们通过代码来了解以下几个知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多线程下载；&lt;/li&gt;
&lt;li&gt;自定义 NSOperation ；&lt;/li&gt;
&lt;li&gt;NSCache 增删改查；&lt;/li&gt;
&lt;li&gt;NSFileManager 增删改查；&lt;/li&gt;
&lt;li&gt;代理模式；&lt;/li&gt;
&lt;li&gt;闭包反向传值；&lt;/li&gt;
&lt;li&gt;扩展方法；&lt;/li&gt;
&lt;li&gt;Plist 文件解析；&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="文件管理" scheme="http://yoursite.com/tags/%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Plist" scheme="http://yoursite.com/tags/Plist/"/>
    
  </entry>
  
  <entry>
    <title>版本管理工具 - GitHub</title>
    <link href="http://yoursite.com/2016/07/30/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%20-%20GitHub/"/>
    <id>http://yoursite.com/2016/07/30/版本管理工具 - GitHub/</id>
    <published>2016-07-29T18:24:00.000Z</published>
    <updated>2016-08-21T18:07:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="版本管理工具的作用"><a href="#版本管理工具的作用" class="headerlink" title="版本管理工具的作用"></a>版本管理工具的作用</h3><hr>
<p><strong>1. 备份文件</strong></p>
<p>   就像我们使用U盘网盘备份电影、文档一样，写代码的时候也需要有个东西帮我们备份，每当代码有修改的时候，提交我们的修改给版本管理工具进行保管，万一电脑坏了还能从备份里恢复回来，其实备份是我们项目管理中最基本的一个事情，因为每天的工作结果都保存在这个文件当中，如果某天因为一些不可预料的因素导致文件丢失，就像玩游戏时打 <code>BOSS</code> ，如果不提前存档，那么打输了，之前的游戏记录就全消失了，还得重新打。</p>
<hr>
<p><strong>2. 记录历史</strong></p>
<p>   版本管理工具会帮助我们保管文件，但是版本管理工具的保管和网盘，U盘的保管不尽相同，网盘和U盘帮我们保存的是一个最新的文件状态，而历史的版本是找不回来的，比如说网盘里有一个文件，是用来记录每天的日记，有一天我们想知道某一天的某一行是哪天，几点钟加上去的，这个信息网盘或者U盘是没有办法告诉我们的，除非我们自己在这个地方加一条改动记录。</p>
<p>   而版本管理工具是在我们每一次修改完，提交给版本管理工具后，它都会留一份备份，它会记录着当时这个修改是几点几分，是谁进行的修改，那么这样的话，当我们需要去回溯，去查找这些信息的时候，版本管理工具是可以告诉我们的。</p>
   <a id="more"></a>
<hr>
<p><strong>3. 回到过去</strong></p>
<p>   版本管理工具会将我们每一次的修改做一个备份，如果我们不小心删除了某一个日记，并将这个删除也提交给了版本管理工具，通过版本管理工具，我们是可以通过历史备份把它恢复过来的，就好像是一个机器猫的时光机，我们可以让我们的文件恢复到任意过去的一个时间的的状态。</p>
<hr>
<p><strong>4. 多端共享</strong></p>
<p>   版本管理工具的另一个特性是我们托管的文件可以在多端进行同步，类似于苹果的 <code>iCould</code> 服务，我们可以在不同的设备上拿到最新的文件。比如说某天我在公司的电脑上提交了一个文件，可能是我们正在进行的一个工作，而我们没有做完就提交到了版本管理工具。那么我们可以回到家之后，通过版本管理工具，把我们之前提交的做到一半的的文件拿回来继续写，这就是多端共享。</p>
<hr>
<p><strong>5. 团队协作</strong></p>
<p>   软件开发项目和复仇者联盟团伙作案其实很相似，在我们的团队中，虽然各个都可以独挡一面，但是如果配合不好的话，也会相互扯后腿。版本管理工具就是帮我们解决这种冲突的，即使我们发生了一些冲突，版本管理工具也可以帮我们迅速的解决我们的一些冲突，将负面影响降低到最小。</p>
<hr>
<h3 id="版本管理工具区别"><a href="#版本管理工具区别" class="headerlink" title="版本管理工具区别"></a>版本管理工具区别</h3><p>版本管理工具分为两种，集中式和分布式，集中式的版本管理工具代表如 <code>CVS</code> 和 <code>SVN</code> ，是比较老的版本工具，分布式的如 <code>Git</code> 和 <code>GitHub</code> ，是新型的版本管理工具。</p>
<p>所谓集中式，就是说它必须要有一个中心服务器来放置最新的文件，如果不联网就没有办法提交和查看。</p>
<p>而分布式的版本管理工具，每一个拥有版本库的人都可以在不联网的情况下快速完成文件的提交、查看记录、删除等操作，在效率上比集中式要高很多。</p>
<p>其中 <code>Git</code> 和 <code>GitHub</code> 经常出现在一起，导致很多人认为它们是一个东西，其实不然，<code>GitHub</code> 实际上是一个程序员社区网站，在这个网站上程序员可以托管他自己的代码库，当然托管这件事是基于 <code>Git</code> 完成的。</p>
<h3 id="GitHub客户端下载和使用"><a href="#GitHub客户端下载和使用" class="headerlink" title="GitHub客户端下载和使用"></a>GitHub客户端下载和使用</h3><p>点击进入 <a href="https://desktop.GitHub.com/" target="_blank" rel="external">GitHub桌面版</a> 下载对应的版本，以 <code>Mac</code> 为例，将 <code>GitHub</code> 拖进 <code>Applications</code> ，打开后点击<code>Continue</code> ，输入 <code>GitHub</code> 的用户名和密码 。</p>
<p>往客户端里面添加项目仓库有三种方式。点击上图箭头所指的 <code>+</code> 号，就可以看到了，也就是下面图中的<code>Add</code>，<code>Create</code>，<code>Clone</code> 这三种形式。</p>
<p><code>add</code> ：来源是你本地机器上已经存在的项目，填写它的文件夹位置，然后点击 <code>Create&amp;Add Repository</code>，如果这个项目本身就是一个 <code>Git仓库</code> 了，就直接添加进来，如果不是，就把它变成一个 <code>Git仓库</code>（<strong>其实也就是在项目内创建一个 .git 文件夹</strong>）然后再添加进客户端。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/add.png" alt="add"></p>
<hr>
<p><code>create</code> ：就是自己新建项目。填写项目名，选择项目存放位置，然后点 <code>Create Repository</code> 按钮，仓库就创建好了。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/create.png" alt="create"></p>
<hr>
<p><code>clone</code>：就是从 <code>GitHub.com</code> 上往本地 <code>clone</code> 。选中一个项目，在本地硬盘上找一个位置存放起来就可以了。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/clone.png" alt="create"></p>
<h4 id="Clone的工作原理"><a href="#Clone的工作原理" class="headerlink" title="Clone的工作原理"></a>Clone的工作原理</h4><p><img src="http://ob2q6r0fn.bkt.clouddn.com/clone%E5%8E%9F%E7%90%86.png" alt=""></p>
<hr>
<h4 id="项目修改"><a href="#项目修改" class="headerlink" title="项目修改"></a>项目修改</h4><p>在你对项目中的文件进行修改后，要特别留意以下几点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. 项目修改数量的提醒；</div><div class="line"></div><div class="line">2. 文件修改数量的提醒；</div><div class="line"></div><div class="line">3. 是否只需要修改部分内容，蓝色标识代表将要修改；</div><div class="line"></div><div class="line">4. 你对此次修改的留言；</div><div class="line"></div><div class="line">5. 你对此次修改的详细描述；</div></pre></td></tr></table></figure>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/change.png" alt=""></p>
<hr>
<h4 id="删除项目"><a href="#删除项目" class="headerlink" title="删除项目"></a>删除项目</h4><p>要删除一个仓库，就到下图左侧列表的项目名字上，右击，然后点 <code>Remove</code> 就行了。简单说说另外几项，<a href="https://atom.io/" target="_blank" rel="external">Atom</a> 是 <code>GitHub</code> 公司开发的开源免费的代码编辑器，<code>Terminal</code> 是命令行终端，<code>Finder</code> 是文件浏览器。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/remove.png" alt=""></p>
<hr>
<h4 id="查看修改历史"><a href="#查看修改历史" class="headerlink" title="查看修改历史"></a>查看修改历史</h4><p>进入 <code>History</code> ，红框内依次是修改留言、修改人、上个版本号、修改时间。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/History.png" alt=""></p>
<hr>
<h4 id="撤销最近一次的修改"><a href="#撤销最近一次的修改" class="headerlink" title="撤销最近一次的修改"></a>撤销最近一次的修改</h4><p><img src="http://ob2q6r0fn.bkt.clouddn.com/Undo.png" alt=""></p>
<p><strong>值得注意的是 <code>Undo</code> 适用于未同步到 <code>GitHub</code> 之前的操作</strong>，如果已经进行过同步，需要进入 <code>History</code> ，点击<code>Revert This Commit</code> 进行撤销：</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/RevertCommit.png" alt=""></p>
<hr>
<h4 id="发布项目到-GitHub"><a href="#发布项目到-GitHub" class="headerlink" title="发布项目到 GitHub"></a>发布项目到 GitHub</h4><p><img src="http://ob2q6r0fn.bkt.clouddn.com/Publish.png" alt=""></p>
<hr>
<h4 id="同步项目到GitHub"><a href="#同步项目到GitHub" class="headerlink" title="同步项目到GitHub"></a>同步项目到GitHub</h4><p>当项目发布以后，<code>Publish</code> 就会变成 <code>Sync</code> 了，以后这个项目的下的文件改变以后，可以点击 <code>Sync</code> 同步到 <code>GitHub</code> 。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/Sync.png" alt=""></p>
<h4 id="Sync-的工作原理"><a href="#Sync-的工作原理" class="headerlink" title="Sync 的工作原理"></a>Sync 的工作原理</h4><p><img src="http://ob2q6r0fn.bkt.clouddn.com/sync.png" alt=""></p>
<hr>
<h3 id="GitHub-分支"><a href="#GitHub-分支" class="headerlink" title="GitHub 分支"></a>GitHub 分支</h3><p><code>Git</code> 最核心的操作对象是<code>版本（ commit ）</code> ，版本最核心的操作技巧就是<code>分支（branch）</code> 。</p>
<p>仓库创建后，一旦有了新 <code>commit</code> ，默认就会放到一个分支上，名字叫 <code>master</code> 。前面看到的多个版本组成的一条历史线，就是 <code>master</code> 分支。但是一个仓库内，用户可以自己创建其他的分支，可以有多条历史线。</p>
<p><code>master</code> 这个名字，一般中文叫【主分支】，其实从技术底层来讲它跟其他我们自己要创建的分支没有区别，只不过它是天生的默认分支。实际工程项目中会人为的给它一个重要的使命，存放稳定代码。就像 <code>GitHub</code> 公司<a href="http://scottchacon.com/2011/08/31/GitHub-flow.html" target="_blank" rel="external">倡导</a>的。</p>
<p><strong>master 分支上的所有代码都应该是可以部署的</strong>。</p>
<p>意思就是 <code>master</code> 分支上的代码是随时可以放到产品服务器上跑的代码。这样，如果想开发一个新功能，可以新开分支。 想象一下历史线上有很多节，每个版本就是一节。一个分支相当于一跟竹子，一节节的往上长。</p>
<p>但是实际上在底层并不是每个分支都拷贝出自己独立的一条历史线。其实 <code>master</code> 本身只是一个指针，指向 <code>master</code> 分支上最新的一个版本。这样由于每个 <code>commit</code> 都可以顺藤摸瓜找到自己的前一个 <code>commit</code>，那么这条历史线就可以确定了。</p>
<h4 id="master-的原理"><a href="#master-的原理" class="headerlink" title="master 的原理"></a>master 的原理</h4><p><img src="http://Gitbeijing.com/images/simple_branching/master_branch.png" alt="img"></p>
<hr>
<h4 id="创建新分支"><a href="#创建新分支" class="headerlink" title="创建新分支"></a>创建新分支</h4><p>点击所示按钮，就会弹出对话框。<code>Create new branch</code> 就是来创建一个分支。所谓 <code>from master</code> 意思是<strong>基于 <code>master</code> 分支，拥有和 <code>master</code> 一样的历史</strong>。</p>
<p> <img src="http://ob2q6r0fn.bkt.clouddn.com/Branch.png" alt="Branch"></p>
<h4 id="分支的原理"><a href="#分支的原理" class="headerlink" title="分支的原理"></a>分支的原理</h4><p>就是就是创建一个新的指针，跟 <code>master</code> 指针指向同一个版本，根本没有拷贝历史线。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/new_branch.png" alt=""></p>
<p>如果现在我们对项目做一下修改，然后 <code>commit</code> 了。那么移动的只是 <code>idea</code> 指针，<code>master</code> 不变。就成了这样：</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/new_branch_commit.png" alt="img"></p>
<p>现在 <code>master</code> 分支包含两个版本 <code>C1 和 C2</code> ，<code>idea</code> 分支包含三个版本 <code>C1，C2，C3</code> 。</p>
<p>默认情况下这个 <code>idea</code> 分支只是存在于本地，如果想在远端仓库上发布这个分支，就点一下 <code>idea</code> 分支右侧的<code>Publish</code> 按钮。现在这个项目就有了两个分支。</p>
<p> <img src="http://ob2q6r0fn.bkt.clouddn.com//webGitHub.png" alt="webGitHub"></p>
<hr>
<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p>删除分支不在图形界面中，在顶部的控制栏 <code>Branch - Delete</code> 。如果只删除 <code>GitHub.com</code> 的分支，而不删除本地的分支，使用 <code>Branch - Unpublish</code>。</p>
<hr>
<h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4><p>分支合并在顶部的控制栏 <code>Branch - Merge</code> ，他会新成了一个 <code>C5</code> ，这是一个 <code>融合版本（ Merge Commit ）</code> ，这个合并比较特殊，里面一般没有修改内容，它的作用主要是把两个分支合并起来。怎么合并的呢？融合版本包含两个版本，一个指向 <code>C2</code> ，一个指向 <code>C3</code> 。</p>
<p><code>master</code> 分支指针指向了 <code>merge commit</code> ，也就自动拥有了 <code>idea</code> 分支上的 <code>C3</code> 这个版本了。<code>idea</code> 分支一般现在就可以删除了。</p>
<h4 id="分支融合的工作原理"><a href="#分支融合的工作原理" class="headerlink" title="分支融合的工作原理"></a>分支融合的工作原理</h4><p><img src="http://ob2q6r0fn.bkt.clouddn.com//after_merge.png" alt="img"></p>
<hr>
<h4 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h4><p>实际中经常有这样的情况，我们正在 <code>idea</code> 分支上开发一个功能。但是这个时候突然发现了一个紧急的问题需要修复，所以会直接到 <code>master</code> 分支上，做一个 <code>commit</code> 来解决这个紧急的问题。然后会来继续到 <code>idea</code> 上开发。</p>
<p>其他的情形也有，总之这样就会出现，两个不同分支上并行开发，同时都有新的 <code>commit</code> ，这个一般没有问题，一样可以直接 <code>merge</code> ，如下图：</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/p_merge.png" alt="img"></p>
<p><strong>但是如果在两个分支上改动了同一个地方，合并的就会出现代码冲突。 因为 Git 不知道该听哪个分支的，所以只能报出冲突的位置，让开发者手动解决。</strong></p>
<hr>
<h4 id="合并远端分支"><a href="#合并远端分支" class="headerlink" title="合并远端分支"></a>合并远端分支</h4><p>现在我们的本地仓库叫 <code>TestRepository</code> ，<code>GitHub.com</code> 上也托管了这个仓库。那么自然就有一个<code>本地master</code>  分支，和一个 <code>远端master</code> 分支 ，这两个分支虽然名字都叫 <code>master</code> ，但是本质上也是两个分支，也存在分支合并的问题。</p>
<p><strong>举例来说，我们在 <code>GitHub.com</code> 网页上，修改一下项目，把修改内容 <code>commit</code> 到 <code>master</code> 分支之上。这样，<code>远端master</code> 分支就比 <code>本地master</code> 分支多了一个 <code>commit</code> 。此时在我们的客户端点 <code>sync</code> 按钮执行同步，这个 <code>commit</code> 就会直接被 <code>pull</code> 到本地。</strong></p>
<p><strong>另外一种情况，在没有 <code>sync</code> 之前，我们在本地也做了一个 <code>commit</code> ，也就是 <code>本地master</code> 和 <code>远端master</code> 出现了并行开发的情况，这种情况是非常常见的。这个时候我们执行 <code>sync</code> ，跟本地两个分支合并是一样的，一般也会生成一个 <code>merge commit</code> ，在本地客户端和 <code>GitHub.com</code> 上的历史线都可以看到。</strong></p>
<p>在特定条件下，点击 <code>sync</code> 按钮两个分支合并会不使用 <code>融合（ merge ）</code> 方式，而采用 <code>变基（ rebase ）</code> 方式，这样最终不会生成一个 <code>merge commit</code> 。但是达成的效果是一样的，也是实现了两个分支代码的合并，处理冲突的方式也一样，所以暂时不必深究。</p>
<h3 id="团队合作"><a href="#团队合作" class="headerlink" title="团队合作"></a>团队合作</h3><p>前面讲的都是开发者唱独角戏，但是尽管如此也可以看出 <code>Git</code> 带来的便利了，比如代码写错了可以回滚，为了新功能开发可以开新分支等等。但是 <code>Git 和 GitHub</code> 更大的威力在于<strong>协作</strong>。</p>
<blockquote>
<p>GitHub 是 Git 仓库的托管平台，让我们的项目仓库可以方便的备份同步。但是其实也许比这个还要重要的是，GitHub 是一个大家一起协作做项目的平台，是一种开发者的工作方式，引导一种看着不像流程的一种真正健康轻便的开发流程。</p>
</blockquote>
<p><code>Github</code> 的核心叫做 <a href="https://guides.Github.com/introduction/flow/index.html" target="_blank" rel="external">Github Flow</a> ，网站上的各个功能都是围绕着这个核心来开发的。<code>GitHub Flow</code> 就是一套团队协作流程，它是一个非常轻便的，基于分支的工作流。非常适合代码部署非常频繁的团队和项目。概况来讲，它就是给一个项目开发新功能要走的几步，整个过程的核心是“拉取请求” 。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">1. 创建新的分支。</div><div class="line"></div><div class="line">2. 不断实现功能，做成一个新版本。</div><div class="line"></div><div class="line">3. 发起拉取请求 Pull Request ；</div><div class="line"></div><div class="line">4. 代码审核；</div><div class="line"></div><div class="line">5. 把分支的内容合并到 master ；</div></pre></td></tr></table></figure>
<p><strong>使用 <code>GitHub Flow</code> 进行代码开发分为两种情况，第一种是团队成员之间互相熟知，另外一种是在开源项目当中，与互不相识的开源贡献者合作。</strong></p>
<p>下面我们用一个实际例子先来了解团队中的协作：</p>
<blockquote>
<p>我要和 Team 合作开发一个新项目，于是我先创建这个项目，然后让 Team 具有写的权限，创建项目前面已经介绍过，下面我们让 Team 成为这个项目的协作者。</p>
</blockquote>
<p>首先到项目页面，点击 <code>Settings</code> 一项，到项目的 <code>Settings</code> 页面，可以看到如下图所示的 <code>Collaborator</code> 选项，输入框中输入协作者的用户名，此时这个协作者就具有对这个项目的写权限了。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/Collaborators.png" alt="Collaborators"></p>
<p>对于非常有把握的代码，可以直接在 <code>本地master</code> 开发然后 <code>sync</code> 到 <code>远端master</code> 分支上面。但是如果是比较重要的功能，就需要走完整的 <code>GitHub Flow</code> 流程了。</p>
<p><strong>整个 <code>GitHub Flow</code> 的核心就是 <code>Pull Request</code> ，而 <code>Pull Request</code> 的目的就是用来引发讨论和代码审核的</strong>。</p>
<hr>
<p><strong>NO.1 我们来开一个新的分支，这是后面进行 <code>Pull Request</code> 的前提。</strong></p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/add-home-page.png" alt="add-home-page"></p>
<hr>
<p><strong>NO.2 现在 <code>Team</code> 登录以后，就会收到提醒，也就是我们所做的修改。</strong></p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/commit.png" alt="commit"></p>
<hr>
<p><strong>NO.3 <code>Team</code> 可以进入这个分支的版本中，进入我们所做的修改，对它留言进行讨论。发布的讨论对方会收到通知和提醒。</strong></p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/talk.png" alt="talk"></p>
<hr>
<p><strong>NO.4 当我和 <code>Team</code> 不断完善这个分支，并完成它时，就可以发起 <code>Pull Request</code> 了。</strong></p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/pullRequest.png" alt="pullRequest"></p>
<hr>
<p><strong>NO.5 这时就相当于告诉项目的发起者，可以将这个分支合并到 <code>master</code> 了</strong>。</p>
<p><img src="http://ob2q6r0fn.bkt.clouddn.com/pullrequest2.png" alt="pullrequest2"></p>
<hr>
<p><strong>NO.6 在大家都讨论完毕后，就可以将这个分支和 <code>master</code> 进行合并了：</strong></p>
<p> <img src="http://ob2q6r0fn.bkt.clouddn.com/pullRequest3.png" alt="pullRequest3"></p>
<hr>
<p>至此，团队协作进行一个项目就完成了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;版本管理工具的作用&quot;&gt;&lt;a href=&quot;#版本管理工具的作用&quot; class=&quot;headerlink&quot; title=&quot;版本管理工具的作用&quot;&gt;&lt;/a&gt;版本管理工具的作用&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;1. 备份文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   就像我们使用U盘网盘备份电影、文档一样，写代码的时候也需要有个东西帮我们备份，每当代码有修改的时候，提交我们的修改给版本管理工具进行保管，万一电脑坏了还能从备份里恢复回来，其实备份是我们项目管理中最基本的一个事情，因为每天的工作结果都保存在这个文件当中，如果某天因为一些不可预料的因素导致文件丢失，就像玩游戏时打 &lt;code&gt;BOSS&lt;/code&gt; ，如果不提前存档，那么打输了，之前的游戏记录就全消失了，还得重新打。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;2. 记录历史&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;   版本管理工具会帮助我们保管文件，但是版本管理工具的保管和网盘，U盘的保管不尽相同，网盘和U盘帮我们保存的是一个最新的文件状态，而历史的版本是找不回来的，比如说网盘里有一个文件，是用来记录每天的日记，有一天我们想知道某一天的某一行是哪天，几点钟加上去的，这个信息网盘或者U盘是没有办法告诉我们的，除非我们自己在这个地方加一条改动记录。&lt;/p&gt;
&lt;p&gt;   而版本管理工具是在我们每一次修改完，提交给版本管理工具后，它都会留一份备份，它会记录着当时这个修改是几点几分，是谁进行的修改，那么这样的话，当我们需要去回溯，去查找这些信息的时候，版本管理工具是可以告诉我们的。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="GitHub分支" scheme="http://yoursite.com/tags/GitHub%E5%88%86%E6%94%AF/"/>
    
      <category term="GithubFlow" scheme="http://yoursite.com/tags/GithubFlow/"/>
    
      <category term="版本管理工具" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>iOS设计模式 - 代理模式</title>
    <link href="http://yoursite.com/2016/07/26/iOS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/07/26/iOS设计模式之 代理模式/</id>
    <published>2016-07-26T05:14:00.000Z</published>
    <updated>2016-08-21T18:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>代理是一种简单而功能强大的设计模式，这种模式用于一个对象“代表”另外一个对象和程序中其他的对象进行交互。 主对象（这里指的是delegating object）中维护一个代理（delegate）的引用并且在合适的时候向这个代理发送消息。这个消息通知“代理”主对象即将处理或是已经处理完了某一个事件。</p>
<p>这个代理可以通过更新自己或是其它对象的UI界面或是其它状态来响应主对象所发送过来的这个事件的消息。或是在某些情况下能返回一个值来影响其它即将发生的事件该如何来处理。</p>
<p>代理的主要价值是它可以让你容易的定制各种对象的行为。注意这里的代理是个名词，它本身是一个对象，这个对象是专门代表被代理对象来和程序中其他对象打交道的。</p>
</blockquote>
<p>以上是苹果的官方文档给出的解释，代理模式的应用非常广泛，在系统的 API 中几乎随处可见，<strong>代理模式并不是 Swift 或者 Objectvice-C 独有的，它是一种软件设计的思想</strong>。代理模式在 <code>WiKiPedia</code> 中的解释如下：</p>
<a id="more"></a>
<blockquote>
<p><strong>代理模式</strong>（英语：Proxy Pattern）是<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="external">程序设计</a>中的一种<a href="https://zh.wikipedia.org/wiki/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_(%E8%AE%A1%E7%AE%97%E6%9C%BA" target="_blank" rel="external">设计模式</a>)。</p>
<p>所谓的代理者是指一个类别可以作为其它东西的接口。代理者可以作任何东西的接口：网络连接、内存中的大对象、文件或其它昂贵或无法复制的资源。</p>
<p>著名的代理模式例子为<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E7%85%A7%E8%A8%88%E6%95%B8" target="_blank" rel="external">引用计数</a>（英语：reference counting）指针对象。</p>
<p>当一个复杂对象的多份副本须存在时，代理模式可以结合<a href="https://zh.wikipedia.org/wiki/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">享元模式</a>以减少内存用量。典型作法是创建一个复杂对象及多个代理者，每个代理者会引用到原本的复杂对象。而作用在代理者的运算会转送到原本对象。一旦所有的代理者都不存在时，复杂对象会被移除。</p>
</blockquote>
<p>如需更详细的解释，请<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="external">点击这里</a>。如果上面的解释过于晦涩，下面我们将以比较形象的方式，来了解代理这种设计模式。</p>
<p>假设我们有两个对象，<code>ViewController</code> 是一个经销商，<code>Customer</code> 是一个顾客，顾客在要买几件商品，那么该如何告诉经销商呢？下面我们先了解代理模式的原理，再进行实现。</p>
<p>首先我们创建两个类：<code>ViewController</code> 和 <code>Customer</code>，<code>Customer</code> 如果要告诉 <code>ViewController</code> 自己要买多少件，就需要有 <code>ViewController</code> 的一个对象来告诉它，所以我们在 <code>Customer</code> 中创建这个对象：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> controller:<span class="type">ViewController</span>!</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有了这个对象后，我们让 <code>Customer</code> 有买东西的这个行为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> controller:<span class="type">ViewController</span>!</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger)</span></span> &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当有买的这个行为后，<code>ViewController</code> 还需要有得知 <code>Customer</code> 买东西的方法，因此我们回到 <code>ViewController</code> 中，实现这个方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">customerBuyItemCount</span><span class="params">(<span class="built_in">count</span>: NSInteger)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"经销商获取到通知 购买<span class="subst">\(<span class="built_in">count</span>)</span>件"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，<code>ViewController</code>  的对象有了，获取通知的方法也有了，那么 <code>Customer</code> 就可以实现买东西这个行为了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> controller:<span class="type">ViewController</span>!</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger)</span></span> &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.controller != <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="keyword">self</span>.controller.customerBuyItemCount(<span class="built_in">count</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们回到 <code>ViewController</code> 中，实例化 <code>Customer</code>，实例化 <code>Customer</code> 那边的 <code>ViewController对象</code>，<code>Customer</code> 开始买东西：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> customer = <span class="type">Customer</span>()</div><div class="line">        customer.controller = <span class="keyword">self</span></div><div class="line">        customer.buyItemCount(<span class="number">5</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">customerBuyItemCount</span><span class="params">(<span class="built_in">count</span>: NSInteger)</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"经销商获取到通知 购买<span class="subst">\(<span class="built_in">count</span>)</span>件"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>现在，我们就通过 <code>ViewController</code> 的对象，获得了 <code>Customer</code> 的购买数量。这也就是代理模式的原理，现在这种方式只能是点对点的进行通信，我们在使用系统 API 时知道，只有实现了代理协议的对象，都可以和被代理的对象进行通信，那么这种功能如何实现呢？</p>
<p>首先我们建立一个代理协议，要求使用这个协议的实现者，必须实现 <code>Customer</code> 买东西的行为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CustomerDelegate</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger , customer:Customer)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们声明一个代理对象，用来表示所有需要与 <code>Customer</code> 进行通信的类：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">CustomerDelegate</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger , customer:Customer)</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> delegate:<span class="type">CustomerDelegate</span>?</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后实现代理方法的执行：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buyItemCountDelegate</span><span class="params">(<span class="built_in">count</span>: NSInteger)</span></span> &#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">self</span>.delegate != <span class="literal">nil</span>) &amp;&amp; (<span class="keyword">self</span>.delegate?.buyItemCount != <span class="literal">nil</span>) &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"开始执行代理方法"</span>)</div><div class="line">            <span class="keyword">self</span>.delegate?.buyItemCount(<span class="built_in">count</span>, customer: <span class="keyword">self</span>)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从这里可以看出，实现者必须不为空，并且实现者的代理方法必须存在，这时我们才会执行这个代理方法。</p>
<p>下面，我们回到 <code>ViewController</code> 也就是<strong>实现者</strong>这里，添加代理协议，并且实现代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">CustomerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger , customer:Customer)</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"经销商使用代理方法获取到通知 顾客购买<span class="subst">\(<span class="built_in">count</span>)</span>件"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后，实例化代理对象，并调用代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">CustomerDelegate</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">		customer.delegate = <span class="keyword">self</span></div><div class="line">        customer.buyItemCountDelegate(<span class="number">10</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">buyItemCount</span> <span class="params">(<span class="built_in">count</span>: NSInteger , customer:Customer)</span></span>&#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"经销商使用代理方法获取到通知 顾客购买<span class="subst">\(<span class="built_in">count</span>)</span>件"</span>)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>此时，我们就实现了一个类的代理协议。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;代理是一种简单而功能强大的设计模式，这种模式用于一个对象“代表”另外一个对象和程序中其他的对象进行交互。 主对象（这里指的是delegating object）中维护一个代理（delegate）的引用并且在合适的时候向这个代理发送消息。这个消息通知“代理”主对象即将处理或是已经处理完了某一个事件。&lt;/p&gt;
&lt;p&gt;这个代理可以通过更新自己或是其它对象的UI界面或是其它状态来响应主对象所发送过来的这个事件的消息。或是在某些情况下能返回一个值来影响其它即将发生的事件该如何来处理。&lt;/p&gt;
&lt;p&gt;代理的主要价值是它可以让你容易的定制各种对象的行为。注意这里的代理是个名词，它本身是一个对象，这个对象是专门代表被代理对象来和程序中其他对象打交道的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是苹果的官方文档给出的解释，代理模式的应用非常广泛，在系统的 API 中几乎随处可见，&lt;strong&gt;代理模式并不是 Swift 或者 Objectvice-C 独有的，它是一种软件设计的思想&lt;/strong&gt;。代理模式在 &lt;code&gt;WiKiPedia&lt;/code&gt; 中的解释如下：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理协议" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>iOS页面传值 - 闭包传值</title>
    <link href="http://yoursite.com/2016/07/26/iOS%E9%A1%B5%E9%9D%A2%E4%BC%A0%E5%80%BC%E4%B9%8B%20%E9%97%AD%E5%8C%85%E4%BC%A0%E5%80%BC/"/>
    <id>http://yoursite.com/2016/07/26/iOS页面传值之 闭包传值/</id>
    <published>2016-07-26T01:01:00.000Z</published>
    <updated>2016-08-21T18:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>页面传值是开发中必不可少的业务需求，经常会有在 <code>B</code> 页面干完一些事情之后告诉 <code>A</code> 页面或者传值到 <code>A</code> 页面。这种需求通常使用属性、闭包、代理、单例、通知几种方式进行实现，下面我们来了解 iOS 页面传值中的闭包传值。</p>
</blockquote>
<p>闭包传值的实现思路如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>. 在<span class="type">B</span>中声明一个block</div><div class="line"> 	<span class="keyword">typealias</span> <span class="type">TestBlock</span> = (<span class="type">String</span>)-&gt;()</div><div class="line"><span class="number">2</span>. 持有一个block变量</div><div class="line"> 	<span class="keyword">var</span> blo: <span class="type">TestBlock</span>?  </div><div class="line"><span class="number">3</span>. 调用</div><div class="line"> 	<span class="keyword">self</span>.blo?(<span class="string">"It is block test"</span>)</div><div class="line"><span class="number">4</span>. 在<span class="type">A</span>中需要接受值的地方</div><div class="line">	<span class="keyword">let</span> b = <span class="type">B</span>()</div><div class="line">	b.blo = &#123;str <span class="keyword">in</span></div><div class="line">   <span class="built_in">print</span>(<span class="string">"test block---\\(str)"</span>)</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>下面我们就以<strong>让第二个界面中的 lable 显示第一个界面 textField 中的文本</strong>这个功能为例，了解属性传值的具体实现。首先创建一个 <code>RootViewController</code> 和一个 <code>DetailViewController</code>，在 <code>DetailViewController</code> 中声明一个闭包，并将其声明为 <code>DetailViewController</code> 的属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> passingValueBlock = (lable: <span class="type">UILabel</span>) -&gt; <span class="type">Void</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> passingValue: passingValueBlock?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后创建一个 <code>UILabel</code> 用于展示接收到的值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> passingValue: passingValueBlock?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="keyword">self</span>.view.frame.size.width-<span class="number">40</span>, <span class="number">100</span>)</div><div class="line">        <span class="keyword">let</span> lable = <span class="type">UILabel</span>(frame: frame)</div><div class="line">        lable.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">20</span>)</div><div class="line">        lable.backgroundColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">        lable.numberOfLines = <span class="number">0</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(lable)</div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面，调用 <code>passingValue</code> 这个闭包：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> passingValue: passingValueBlock?</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="keyword">self</span>.view.frame.size.width-<span class="number">40</span>, <span class="number">100</span>)</div><div class="line">        <span class="keyword">let</span> lable = <span class="type">UILabel</span>(frame: frame)</div><div class="line">        <span class="keyword">self</span>.passingValue!(lable: lable)</div><div class="line">        lable.font = <span class="type">UIFont</span>.systemFontOfSize(<span class="number">20</span>)</div><div class="line">        lable.backgroundColor = <span class="type">UIColor</span>.whiteColor()</div><div class="line">        lable.numberOfLines = <span class="number">0</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(lable)</div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.greenColor()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们回到  <code>RootViewController</code> 中，创建一个 <code>UITextField</code> 用于接收输入的文本：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> textField: <span class="type">UITextField</span>!</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line"></div><div class="line">        <span class="keyword">let</span> frame = <span class="type">CGRectMake</span>(<span class="number">20</span>, <span class="number">100</span>, <span class="keyword">self</span>.view.bounds.width-<span class="number">40</span>, <span class="number">40</span>)</div><div class="line">        <span class="keyword">self</span>.textField = <span class="type">UITextField</span>(frame: frame)</div><div class="line">        <span class="keyword">self</span>.textField.borderStyle = .<span class="type">RoundedRect</span></div><div class="line">        <span class="keyword">self</span>.view.addSubview(textField)</div><div class="line">        <span class="keyword">self</span>.view.backgroundColor = <span class="type">UIColor</span>.redColor()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加 <code>button</code> 和手势，当点击 <code>button</code> 时响应相应方法进行视图间的切换完成视图间的传值，当轻触视图任意位置时取消键盘的第一响应：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">let</span> tap = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(<span class="type">RootViewController</span>.handleTap(<span class="number">_</span>:)))</div><div class="line"><span class="keyword">self</span>.view.addGestureRecognizer(tap)</div><div class="line"></div><div class="line"><span class="keyword">let</span> pushButton = <span class="type">UIButton</span>(type: .<span class="type">Custom</span>)</div><div class="line">pushButton.frame = <span class="type">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">120</span>, <span class="number">30</span>)</div><div class="line">pushButton.center = <span class="keyword">self</span>.view.center</div><div class="line">pushButton.backgroundColor = <span class="type">UIColor</span>.grayColor()</div><div class="line">pushButton.setTitle(<span class="string">"Block传值"</span>, forState: .<span class="type">Normal</span>)</div><div class="line">pushButton.addTarget(<span class="keyword">self</span>, action: #selector(<span class="type">RootViewController</span>.handlePush(<span class="number">_</span>:)), forControlEvents: .<span class="type">TouchUpInside</span>)</div><div class="line"><span class="keyword">self</span>.view.addSubview(pushButton)</div></pre></td></tr></table></figure>
<p>下面实现 <code>button</code> 和手势对应的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleTap</span><span class="params">(tap: UITapGestureRecognizer)</span></span> &#123;</div><div class="line">       <span class="keyword">self</span>.textField.resignFirstResponder()</div><div class="line">   &#125;	<span class="comment">//转跳到DetailViewController</span></div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">handlePush</span><span class="params">(sender: UIButton)</span></span> &#123;</div><div class="line"></div><div class="line">       <span class="keyword">let</span> detailVC = <span class="type">DetailViewController</span>()</div><div class="line">       detailVC.passingValue = &#123; (lable: <span class="type">UILabel</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span></div><div class="line">           lable.text = <span class="keyword">self</span>.textField.text</div><div class="line">       &#125;	<span class="comment">//调用Closure传值给DetailViewController</span></div><div class="line"></div><div class="line">       <span class="keyword">self</span>.presentViewController(detailVC, animated: <span class="literal">true</span>) &#123;</div><div class="line">           <span class="built_in">print</span>(<span class="string">"转跳成功"</span>)</div><div class="line">       &#125;	<span class="comment">//转跳到DetailViewController</span></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这样我们就利用闭包传值的方式，实现让第二个界面中的 <code>lable</code> 显示第一个界面 <code>textField</code> 中的文本。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;页面传值是开发中必不可少的业务需求，经常会有在 &lt;code&gt;B&lt;/code&gt; 页面干完一些事情之后告诉 &lt;code&gt;A&lt;/code&gt; 页面或者传值到 &lt;code&gt;A&lt;/code&gt; 页面。这种需求通常使用属性、闭包、代理、单例、通知几种方式进行实现，下面我们来了解 iOS 页面传值中的闭包传值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;闭包传值的实现思路如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;. 在&lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;中声明一个block&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;typealias&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;TestBlock&lt;/span&gt; = (&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)-&amp;gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;. 持有一个block变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; blo: &lt;span class=&quot;type&quot;&gt;TestBlock&lt;/span&gt;?  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;. 调用&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; 	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.blo?(&lt;span class=&quot;string&quot;&gt;&quot;It is block test&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;. 在&lt;span class=&quot;type&quot;&gt;A&lt;/span&gt;中需要接受值的地方&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b = &lt;span class=&quot;type&quot;&gt;B&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	b.blo = &amp;#123;str &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;test block---\\(str)&quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
      <category term="自定义跳转" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%B3%E8%BD%AC/"/>
    
  </entry>
  
</feed>
