<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tian&#39;notes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-10-28T06:58:51.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS - 组件化实践思考</title>
    <link href="http://yoursite.com/2017/10/27/iOS%20-%20%E7%BB%84%E4%BB%B6%E5%8C%96%E5%AE%9E%E8%B7%B5%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2017/10/27/iOS - 组件化实践思考/</id>
    <published>2017-10-26T17:21:00.000Z</published>
    <updated>2017-10-28T06:58:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>组件化的应用背景和优势在此不再赘述，下面我们将从实践的角度，讨论一下如何应用组件化的思想，下面将以我自己的理解逐步展开，抛砖引玉。</p>
<h2 id="哪些内容需要组件化"><a href="#哪些内容需要组件化" class="headerlink" title="哪些内容需要组件化"></a>哪些内容需要组件化</h2><p>在我的理解中，一个项目可以拆分为以下几种组件：</p>
<ul>
<li>基础组件；</li>
<li>功能组件；</li>
<li>业务组件；</li>
</ul>
<p>下面依次来解释几种组件的定义和规则。</p>
<a id="more"></a>
<h3 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h3><ul>
<li>基本配置<ul>
<li>常量；</li>
<li>宏定义；</li>
</ul>
</li>
<li>分类<ul>
<li>各种系统类的扩展；</li>
</ul>
</li>
<li>网络<ul>
<li>对 AFN 的封装；</li>
<li>对 SDWebImage 的封装；</li>
</ul>
</li>
<li>工具类<ul>
<li>文件处理；</li>
<li>设备信息；</li>
<li>时间日期处理；</li>
</ul>
</li>
</ul>
<p>基础组件的含义就是最基础的东西，每个业务组件都有可能会使用到，基础组件需要抽取的应该是类似上面的代码，举例来说，比如我们定义了一个常量，表示接口的根路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let BASEMIRRORURL = &quot;http://rest.mirror.xxxx.com/ios&quot;</div></pre></td></tr></table></figure>
<p>那么这个常量在 Home，List，Detail 都有可能会被引用，因此我们将这种最底层的，最下一层的东西归类到基础组件。</p>
<p>又比如分类和扩展，我们给 <code>UIView</code> 的扩展定义一个计算属性：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIView</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> height &#123;</div><div class="line">    <span class="keyword">set</span> &#123;</div><div class="line">      <span class="keyword">self</span>.frame.size.height = newValue</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">get</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">self</span>.frame.size.height</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以想到，也会有很多的业务组件会使用到这个扩展。</p>
<h3 id="功能组件"><a href="#功能组件" class="headerlink" title="功能组件"></a>功能组件</h3><ul>
<li>控件<ul>
<li>弹幕；</li>
<li>轮播；</li>
<li>菜单；</li>
<li>瀑布流；</li>
</ul>
</li>
<li>功能<ul>
<li>断点续传；</li>
<li>音视频处理；</li>
<li>CUPImage 封装；</li>
</ul>
</li>
</ul>
<p>功能组件分为可见和不可见两种，可见的是控件，不可见的是功能。功能组件的作用顾名思义，就是实现了一个功能。</p>
<h3 id="业务组件"><a href="#业务组件" class="headerlink" title="业务组件"></a>业务组件</h3><p>业务组件，也就是业务的具体实现了，比如一个 App 的骨架如下：</p>
<ul>
<li>首页；</li>
<li>发现；</li>
<li>我的；</li>
</ul>
<p>首页下又分为这样：</p>
<ul>
<li>侧滑菜单；</li>
<li>Banner；</li>
<li>热门；</li>
</ul>
<p>这里的每个部分，都可以称为业务组件。</p>
<h2 id="三种组件的关系"><a href="#三种组件的关系" class="headerlink" title="三种组件的关系"></a>三种组件的关系</h2><p><img src="https://user-gold-cdn.xitu.io/2017/10/27/1feb64c07d059c070fd70f5b6f9d1f03" alt="三种组件的关系"></p>
<h3 id="基础组件规则"><a href="#基础组件规则" class="headerlink" title="基础组件规则"></a>基础组件规则</h3><p>基础组件和基础组件之间不应该产生依赖，比如我们使用网络请求组件，希望根路径是一个默认参数，但可以对外暴露和修改，像下面这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(baseUrl: String = BASEMIRRORURL, path: String, param: [String:Any])</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">NetWork</span>.request(path: <span class="string">"/g/login.server"</span>, param: param)</div></pre></td></tr></table></figure>
<p>这时，<code>NetWork</code> 就依赖了 <code>常量</code> 这个基础组件，我们如果使用 <code>NetWork</code> 基础组件，还需要导入 <code>常量</code> 这个基础组件，这是<strong>不应该</strong>的。</p>
<p>但为了代码的简洁性，这样的封装又是必要的，那么应该怎么做呢？这个问题我们下面会讲到。</p>
<h3 id="功能组件规则"><a href="#功能组件规则" class="headerlink" title="功能组件规则"></a>功能组件规则</h3><p>功能组件和基础组件之间不应该产生依赖，比如我们做轮播图，会用到 <code>UIView 的扩展</code>和 <code>常量</code> ，像下面这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.width = <span class="type">SCREENWIDTH</span></div></pre></td></tr></table></figure>
<p>其中 <code>.width</code> 和 <code>SCREENWIDTH</code> ，都在基础组件中，但基础组件中不仅仅是这些东西，如果依赖了基础组件，就需要导入基础组件中其他无用的代码，而且其他人使用轮播图组件，也需要导入基础组件。</p>
<p>因此，在功能组件中，<strong>不建议</strong>依赖基础组件，上面的代码应该改成这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">imageView.frame.size.width = <span class="type">UIScreen</span>.main.bounds.size.width</div></pre></td></tr></table></figure>
<p>或者直接复制代码，将需要的基础组件的功能，复制到功能组件当中。</p>
<p>同基础组件一样，功能组件和功能组件也不应该产生依赖，道理是一样的，我们使用一个功能，<strong>不应该</strong>将另一个功能也导入进来。</p>
<h3 id="业务组件规则"><a href="#业务组件规则" class="headerlink" title="业务组件规则"></a>业务组件规则</h3><p>基础组件和功能组件都是为业务服务的，因此业务组件可以依赖于基础组件和功能组件，快速的实现业务，但是<strong>业务组件和业务组件之间不应该产生依赖。</strong></p>
<p>比如这样一条业务线，我们要求 <code>发现</code> 这个业务组件，点击一条视频，跳转到 <code>视频播放器</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushToPlayerVC</span><span class="params">(model: VideoModel)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> vc = <span class="type">PlayerVC</span>(videoModel: model)</div><div class="line">  navigationVC.push(vc)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这时 <code>发现</code> 就对 <code>视频播放器</code>产生了依赖，如果将 <code>发现</code> 进行组件化进行剥离，能行吗？不行。</p>
<p>其实这个问题和网络请求使用默认参数封装一样，是组件与组件之间的通讯问题，当然，这个问题我们下面会讲到，现在再提一下是为了一会儿往下写的时候忘了填坑 …</p>
<h2 id="每个组件存在的形式"><a href="#每个组件存在的形式" class="headerlink" title="每个组件存在的形式"></a>每个组件存在的形式</h2><ul>
<li>组件内部；</li>
<li>组件外部；</li>
<li>组件测试；</li>
</ul>
<h3 id="组件内部"><a href="#组件内部" class="headerlink" title="组件内部"></a>组件内部</h3><p>组件的内部应该使用设计模式划分文件夹的结构，例如 MVVM 结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---- PlayerView</div><div class="line">  -- View</div><div class="line">  -- Model</div><div class="line">  -- ViewModel</div></pre></td></tr></table></figure>
<h3 id="组件外部"><a href="#组件外部" class="headerlink" title="组件外部"></a>组件外部</h3><p>组件的外部应该是一个远程私有 <code>pod</code> 库，使用 CocoaPods 进行管理。</p>
<h3 id="组件测试"><a href="#组件测试" class="headerlink" title="组件测试"></a>组件测试</h3><p>单独的测试工程。</p>
<h2 id="怎样集成各个组件"><a href="#怎样集成各个组件" class="headerlink" title="怎样集成各个组件"></a>怎样集成各个组件</h2><p><img src="https://user-gold-cdn.xitu.io/2017/10/27/bc9f8816adcdf3f98431496fa7aa600c" alt="组件集成"></p>
<p>组件的集成应该像上面的图一样，基础组件和功能组件互不依赖，制作远程 <code>pod</code> 私有库，业务组件依赖于这些 <code>pod</code> 私有库开发，同样制作成远程 <code>pod</code> 私有库，壳工程依赖于 CocoaPods 管理这些私有库，完成整个项目。</p>
<p>当然还有另外的方式，比如将壳工程作为主工程，组件创建为子工程，这方式的缺点是子工程可以修改，缺少约束性，目录结构也比较凌乱。</p>
<p>还有将组件制作为 <code>FrameWork</code>，壳工程中导入一个个 <code>FrameWork</code> 库，这种方式个人感觉比上一种好一些，但是在物理上，组件和壳还是没能做到分离。</p>
<p>因此，我个人还是更倾向于 <code>pod</code> 库的形式。</p>
<h2 id="组件之间的通讯"><a href="#组件之间的通讯" class="headerlink" title="组件之间的通讯"></a>组件之间的通讯</h2><ul>
<li>对外公开 API 接口；</li>
<li>通过中间件的中转；</li>
</ul>
<p>上面我们有两个遗留的问题，归纳为组件之间的通讯问题，下面就通过这两个问题，讨论一下组件之间的通讯。</p>
<h3 id="网络请求默认参数"><a href="#网络请求默认参数" class="headerlink" title="网络请求默认参数"></a>网络请求默认参数</h3><p>下面的思路就是暴露出 <code>baseUrl</code> 参数，通过中间件 <code>NetWorkMW</code> 将 <code>NetWork</code> 和 <code>常量</code> 两个基础组件组合，完成默认参数网络请求的封装。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 基础组件 - 常量</span></div><div class="line"><span class="keyword">let</span> <span class="type">BASEMIRRORURL</span> = <span class="string">"http://rest.mirror.xxxx.com/ios"</span></div><div class="line"></div><div class="line"><span class="comment">// 基础组件 - 网络请求</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWork</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(baseUrl: String, path: String, param: [String:Any])</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//壳工程 - 网络请求中间件</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetWorkMW</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">request</span><span class="params">(baseUrl: String = BASEMIRRORURL, path: String, param: [String:Any])</span></span> &#123;</div><div class="line">    <span class="type">NetWork</span>.request(baseUrl: baseUrl, path: path, param: param)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">NetWorkMW</span>.request(path: <span class="string">"/g/login.server"</span>, param: param)</div></pre></td></tr></table></figure>
<h3 id="发现跳转视频播放"><a href="#发现跳转视频播放" class="headerlink" title="发现跳转视频播放"></a>发现跳转视频播放</h3><p>这个思路是使用代理，对外暴露点击事件，通过中间件，导入 <code>视频播放</code> 业务组件，<code>topVC</code> 基础组件，完成向 <code>视频播放</code> 的跳转：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务组件 - 发现</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushToPlayerVC</span><span class="params">(model: VideoModel)</span></span> &#123;</div><div class="line">  delegate?.pushToPlayerVC?(videoModel: model)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 中间件 - 发现</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">pushToPlayerVC</span><span class="params">(model: VideoModel)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> vc = <span class="type">PlayerVC</span>(videoModel: model)</div><div class="line">  topVC.navigationVC.push(vc)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>以上实际上是怎么样把多个组件组合使用起来，这种组合是确定的，还有一些是不确定的，例如有一个组件的状态改变了，我要让其他组件知道我的变化，但是我不知道都要告诉谁，怎么办？</strong></p>
<p><strong>眼珠一转，对外暴露状态变化，中间件在变化时发送通知。但是同时我想附带一个模型过去，通知的接收方怎样正确的使用这个模型呢？如果要使用模型，势必要和发送通知的业务组件产生耦合，怎么办？</strong></p>
<p>以后再办，先埋个坑，这些场景我们会在以后再讲到。</p>
<h2 id="组件分离的难点"><a href="#组件分离的难点" class="headerlink" title="组件分离的难点"></a>组件分离的难点</h2><p>组件分离的重点和难点也就是解耦，比如我们现在负责一个项目，其中的一个业务或者功能，希望实现组件化，但是它依赖于项目中的其他公共功能，该如何处理呢？这里提供两种思路：</p>
<ol>
<li>拷代码，简单粗暴，摆脱依赖，对于一些不重要的工具方法，可以直接拷贝到内部来使用；</li>
<li>把组件依赖的代码先做一个 <code>pod</code> 库，然后依赖这个 <code>pod</code> 库；</li>
</ol>
<p>上面讲到的是代码方面的依赖，还有一种情况是功能方面的依赖，比如我们有一个菜单，这个菜单涉及到网络图片的加载，那么怎样将这个菜单进行组件化呢？</p>
<ol>
<li>使用 Block 或者代理，将网络图片加载这部分的职责交给外部控制；</li>
</ol>
<p>举例来说，像下面这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务组件 - 菜单</span></div><div class="line"><span class="keyword">self</span>.imageView.sd_setImage(with: url, completed: completed)</div></pre></td></tr></table></figure>
<p>那么如果现在将它组件化，这个组件就要依赖于 <code>SDWebImage</code>，我们应该修改成这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 业务组件 - 菜单</span></div><div class="line">setImage?(<span class="keyword">for</span>: imageView, completed: <span class="type">ImageLoadCompletedBlock</span>)</div><div class="line"></div><div class="line"><span class="comment">// 中间件 - 菜单</span></div><div class="line">menu.setImage = &#123; (imageView, completed) <span class="keyword">in</span> </div><div class="line">  imageView.sd_setImage(with: url, completed: completed)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在菜单就摆脱了对 <code>SDWebImage</code> 的依赖。</p>
<h2 id="附加问题"><a href="#附加问题" class="headerlink" title="附加问题"></a>附加问题</h2><p>以上的环节掌握了，应该可以尝试简单的组件化了，但是问题没完，还有哪些呢？</p>
<h3 id="库的升级维护"><a href="#库的升级维护" class="headerlink" title="库的升级维护"></a>库的升级维护</h3><p>随着项目的迭代，你负责的库升级了，其他的小伙伴们还在用上个版本的库，怎么办？</p>
<h3 id="各种路径资源问题"><a href="#各种路径资源问题" class="headerlink" title="各种路径资源问题"></a>各种路径资源问题</h3><p>我们在自己的库里使用了 <code>imageNamed</code> 、<code>mainBundle</code>，但是小伙伴把我们的库拖过去后，这些路径和我们不是一个路径，<code>Assets.xcassets</code> 跟我们也不是同一个 <code>Assets.xcassets</code>，怎么办？</p>
<p>这些问题你可以从这篇文章找到答案：<a href="https://juejin.im/post/59f2c7eaf265da432c2318e5" target="_blank" rel="external">你真的会用 CocoaPods 吗？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件化的应用背景和优势在此不再赘述，下面我们将从实践的角度，讨论一下如何应用组件化的思想，下面将以我自己的理解逐步展开，抛砖引玉。&lt;/p&gt;
&lt;h2 id=&quot;哪些内容需要组件化&quot;&gt;&lt;a href=&quot;#哪些内容需要组件化&quot; class=&quot;headerlink&quot; title=&quot;哪些内容需要组件化&quot;&gt;&lt;/a&gt;哪些内容需要组件化&lt;/h2&gt;&lt;p&gt;在我的理解中，一个项目可以拆分为以下几种组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础组件；&lt;/li&gt;
&lt;li&gt;功能组件；&lt;/li&gt;
&lt;li&gt;业务组件；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面依次来解释几种组件的定义和规则。&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS - CocoaPods 原理及库制作</title>
    <link href="http://yoursite.com/2017/10/27/iOS%20-%20CocoaPods-%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%93%E5%88%B6%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/10/27/iOS - CocoaPods-原理及库制作/</id>
    <published>2017-10-26T17:21:00.000Z</published>
    <updated>2017-10-28T06:58:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>CocoaPods 可以说是 iOS 开发应用最广泛的包管理工具，本篇文章主要介绍 CocoaPods 的第三方库是怎样从网络集成到我们本地的项目当中，也是制作私有库、开源库和 iOS 项目组件化的一个知识铺垫。</p>
<p>让我们从一张图片开始：</p>
<table>
<thead>
<tr>
<th style="text-align:center">CocoaPods 工作流程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://user-gold-cdn.xitu.io/2017/10/27/2c5a3729f05e0ed26c16d83ae0ac13f0" alt="未命名文件"></td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="远程索引库"><a href="#远程索引库" class="headerlink" title="远程索引库"></a>远程索引库</h2><p>远程索引库里存放的是各种框架的描述信息，这个库托管在 Github 上，地址如下：</p>
<p><a href="https://github.com/CocoaPods/Specs" target="_blank" rel="external">https://github.com/CocoaPods/Specs</a></p>
<p>每个框架下有数个版本，每个版本有一个 <code>json</code> 格式的描述信息，如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"CAIStatusBar"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"summary"</span>: <span class="string">"A simple indicator"</span>,</div><div class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://github.com/apple5566/CAIStatusBar.git"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="attr">"authors"</span>: &#123;</div><div class="line">    <span class="attr">"apple5566"</span>: <span class="string">"zaijiank110@sohu.com"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"platforms"</span>: &#123;</div><div class="line">    <span class="attr">"ios"</span>: <span class="string">"6.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"source"</span>: &#123;</div><div class="line">    <span class="attr">"git"</span>: <span class="string">"https://github.com/apple5566/CAIStatusBar.git"</span>,</div><div class="line">    <span class="attr">"tag"</span>: <span class="string">"0.0.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"source_files"</span>: <span class="string">"CAIStatusBar/**/*.&#123;h,m&#125;"</span>,</div><div class="line">  <span class="attr">"resources"</span>: <span class="string">"CAIStatusBar/CAIStatusBar.bundle"</span>,</div><div class="line">  <span class="attr">"requires_arc"</span>: <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中 <code>git</code> 字段表示该框架的托管地址，也就是上面时序图中的 <code>远程框架库</code>。</p>
<h2 id="本地索引库"><a href="#本地索引库" class="headerlink" title="本地索引库"></a>本地索引库</h2><p>在 <code>install cocoapods</code> 命令后，需要执行 <code>pod setup</code> 这个命令，<code>pod setup</code> 命令就是将远程索引库克隆到本地来，本地索引库的路径如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cocoapods/repos/master</div></pre></td></tr></table></figure>
<p>本地索引库和远程索引库的目录一致，结构如下：</p>
<table>
<thead>
<tr>
<th style="text-align:center">本地索引库</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://user-gold-cdn.xitu.io/2017/10/27/b182b81ea976c575cd689039d0b2e61e" alt="本地索引库"></td>
</tr>
</tbody>
</table>
<h2 id="本地索引文件"><a href="#本地索引文件" class="headerlink" title="本地索引文件"></a>本地索引文件</h2><p>当执行 <code>pod search</code> 命令时，如果本地索引文件不存在，会创建这个文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tianziyaodeMacBook-Air:~ Tian$ pod search afn</div><div class="line">Creating search index for spec repo &apos;master&apos;..</div></pre></td></tr></table></figure>
<p>如果这个文件存在，则会在此文件中进行索引，确认所需要的框架是否存在，本地索引文件的路径如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/资源库/Caches/CocoaPods</div></pre></td></tr></table></figure>
<h2 id="制作-CocoaPods-库"><a href="#制作-CocoaPods-库" class="headerlink" title="制作 CocoaPods 库"></a>制作 CocoaPods 库</h2><p>上面的流程清楚以后，制作 CocoaPods 库相信应该不会太难了，大致分为以下几步：</p>
<ol>
<li>托管框架源码到 Git；</li>
<li>创建框架描述信息；</li>
<li>上传框架描述信息到 <code>https://github.com/CocoaPods/Specs</code>；</li>
<li>命令行 <code>pod setup</code> ， 创建本地索引库；</li>
<li>命令行 <code>pod install</code> ，将框架集成到项目中；</li>
</ol>
<p>现在开始动手吧！首先在桌面新建一个 <code>testLib</code> 目录，在该目录下新建一个 <code>Classes</code> 目录，用来存放框架源码，然后将 <code>testLib</code> 托管到 Git。</p>
<blockquote>
<p>你可以给 Classes 目录任意的命名，Classes 只是一种约定俗称的命名。</p>
</blockquote>
<h3 id="pod-spec"><a href="#pod-spec" class="headerlink" title="pod spec"></a>pod spec</h3><p><code>pod spec</code> 命令用于创建框架的描述信息文件，文档如下：</p>
<p><a href="https://guides.cocoapods.org/syntax/podspec.html" target="_blank" rel="external">https://guides.cocoapods.org/syntax/podspec.html</a></p>
<p>现在在 <code>testLib</code> 目录下执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create testLib</div></pre></td></tr></table></figure>
<p>目录下会创建一个 <code>testLib.podspec</code> 文件，然后编辑这个文件，主要有以下几个字段：</p>
<ul>
<li>version：这个 spec 映射的版本，保证 Git 的 <code>releases</code> 与此对应；</li>
<li>homepage：项目主页；</li>
<li>source：框架源代码的托管地址；</li>
<li>tag：与 version 对应；</li>
<li>source_files：框架源代码的目录、文件、文件类型等规则；</li>
</ul>
<h2 id="CocoaPods-公开库"><a href="#CocoaPods-公开库" class="headerlink" title="CocoaPods 公开库"></a>CocoaPods 公开库</h2><p>根据上面的步骤，现在你需要将生成的 <code>testLib.podspec</code> 文件上传到远程索引库，在此之前，你需要注册一个 Trunk 账号，文档如下：</p>
<p><a href="https://guides.cocoapods.org/making/getting-setup-with-trunk.html" target="_blank" rel="external">https://guides.cocoapods.org/making/getting-setup-with-trunk.html</a></p>
<p>现在执行下面的命令，记得修改邮箱昵称描述等：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register ziyao.tian@gmail.com &apos;Tian&apos; --description=&apos;macbook air&apos;</div></pre></td></tr></table></figure>
<p>你的邮箱会收到一封邮件，打开邮件里面的链接，会有类似 <code>you can back termainal</code> 的提示，现在回到终端。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>检查 <code>testLib.podspec</code> 的合法性，根据错误提示修复问题，当显示 <code>passed validation</code> 后，执行下面的命令： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push testLib.podspec</div></pre></td></tr></table></figure>
<p>提示信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Updating spec repo `master`</div><div class="line"></div><div class="line">--------------------------------------------------------------------------------</div><div class="line"> 🎉  Congrats</div><div class="line"></div><div class="line"> 🚀  testLib (0.0.7) successfully published</div><div class="line"> 📅  October 17th, 00:38</div><div class="line"> 🌎  https://cocoapods.org/pods/testLib</div><div class="line"> 👍  Tell your friends!</div><div class="line">--------------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>此时你的 <code>testLib.podspec</code> 就会 <code>pull request</code> 到远程索引库，CocoaPods 官方审核通过后，就可以出现在远程索引库中，当远程索引库收录后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>这时你的本地索引库，会新加入 <code>testLib.podspec</code> 这条记录，但是本地索引文件还未更新，因此删除掉以下路径的本地索引文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/资源库/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>
<p>执行  <code>pod search testLib</code> 命令，当 <code>search_index.json</code> 文件重建完毕后，就可以在使用这个远程框架库了。</p>
<h2 id="CocoaPods-私有库"><a href="#CocoaPods-私有库" class="headerlink" title="CocoaPods 私有库"></a>CocoaPods 私有库</h2><p>有了公开库，当然也就有私有库，私有库主要分为远程和本地两种，什么时候会用到私用库呢？也就是需要将源码封装成库，但又不希望将源码公开，一般的使用场景是公司内部的组件化开发。</p>
<h2 id="本地私有库"><a href="#本地私有库" class="headerlink" title="本地私有库"></a>本地私有库</h2><p>本地私有库就是创建一个仓库，将其存储在本地，在本地的其他工程中直接使用。首先在桌面新建一个库，路径如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LocalLib/NetWork/Classes/Test.swift</div></pre></td></tr></table></figure>
<p>接着创建一个壳工程，现在你的目标是使用 <code>pod</code> 的方式，将 <code>NetWork</code> 这个库集成到壳工程中。</p>
<h3 id="创建本地-GIt-仓库"><a href="#创建本地-GIt-仓库" class="headerlink" title="创建本地 GIt 仓库"></a>创建本地 GIt 仓库</h3><p>将 <code>NetWork</code> 加入到 Git，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add.</div><div class="line">git commit -m &apos;x&apos;</div></pre></td></tr></table></figure>
<h3 id="创建库描述文件"><a href="#创建库描述文件" class="headerlink" title="创建库描述文件"></a>创建库描述文件</h3><p>和公开库一样，我们需要先创建一个 <code>spec</code> 文件，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create LocalLib</div></pre></td></tr></table></figure>
<p>编辑 <code>NetWork.podspec</code> 文件，修改成下面这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line"></div><div class="line">  s.name         = <span class="string">"NetWork"</span></div><div class="line">  s.version      = <span class="string">"0.0.1"</span></div><div class="line">  s.summary      = <span class="string">"A short description of NetWork."</span></div><div class="line">  s.description  = <span class="string">"A short description of NetWork.xxxxxxxxxxxxxxxxxx"</span></div><div class="line">  s.homepage     = <span class="string">"http://EXAMPLE/NetWork"</span></div><div class="line">  s.license      = <span class="string">"MIT"</span></div><div class="line">  s.author             = &#123; <span class="string">"tianziyao"</span> =&gt; <span class="string">"ziyao.tian@gmail.com"</span> &#125;</div><div class="line">  s.source       = &#123; <span class="symbol">:git</span> =&gt; <span class="string">""</span>, <span class="symbol">:tag</span> =&gt; <span class="string">"<span class="subst">#&#123;s.version&#125;</span>"</span> &#125;</div><div class="line">  s.source_files  = <span class="string">"Classes"</span>, <span class="string">"Classes/**/*.&#123;h,m,swift&#125;"</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>现在你的本地库已经准备完毕了，下面就可以使用这个库了。</p>
<h3 id="导入本地私有库"><a href="#导入本地私有库" class="headerlink" title="导入本地私有库"></a>导入本地私有库</h3><p>现在进入到壳工程目录下，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure>
<p>编辑 <code>Podfile</code> 文件，如下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">target <span class="string">'Test'</span> <span class="keyword">do</span></div><div class="line">  use_frameworks!</div><div class="line"></div><div class="line">  pod <span class="string">'NetWork'</span>, <span class="symbol">:path</span> =&gt; <span class="string">'../NetWork'</span></div><div class="line"></div><div class="line">  target <span class="string">'TestTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  target <span class="string">'TestUITests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>这里有一个 <code>path</code> 关键字，它表示在 <code>pod install</code> 执行时，在指定的路径下寻找 <code>NetWork.podspec</code> 文件。</p>
<p>下面执行 <code>pod install</code> 命令，提示信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Analyzing dependencies</div><div class="line">Fetching podspec for `NetWork` from `../NetWork`</div><div class="line">Downloading dependencies</div><div class="line">Installing NetWork (0.0.1)</div><div class="line">Generating Pods project</div><div class="line">Integrating client project</div></pre></td></tr></table></figure>
<p>现在 <code>NetWork</code> 这个库就集成到了壳工程中。</p>
<p>与使用远程库不同，本地库的源文件会在 <code>Development Pods</code> 这个目录下，而不是 <code>Pods</code> 目录，顺便一提，CocoaPods 的库开发，一般也是这样搭建环境的，开发完成后再修改 <code>spec</code> 文件，将其 <code>pull request</code> 到远程索引库。</p>
<h2 id="CocoaPods-模板库"><a href="#CocoaPods-模板库" class="headerlink" title="CocoaPods 模板库"></a>CocoaPods 模板库</h2><p>本地私有库这个方式还存在以下问题：</p>
<ul>
<li>需要手动创建 <code>podspec</code> 文件；</li>
<li>无法单独测试，需要依托于壳工程运行；</li>
</ul>
<p>假设我们有一个基础组件，里面全部是扩展文件，无法单独运行，如果依托壳工程运行，只有这一个组件，那么这个壳工程实际跟测试工程是一样的，但壳工程内有多个组件呢？</p>
<p>我们在壳工程中进行测试的话，不但要对其他的组件进行编译，而且自己负责的组件也可能会收到其他组件的影响，这样也就失去了组件化开发的本意，那么怎么优化呢？</p>
<h3 id="单独测试"><a href="#单独测试" class="headerlink" title="单独测试"></a>单独测试</h3><p>首先在 <code>LocalLib/NetWork/</code> 路径下创建一个测试工程 <code>Example</code>，然后将 <code>Classes</code> 拖到这个测试工程中，这里需要注意的是，<strong><code>Example</code> 和 <code>Classes</code> 是引用关系，不要 Copy。</strong></p>
<p>简单粗暴的拖拽，现在 <code>Example</code> 工程就可以使用 <code>NetWork</code> 库了。</p>
<p>另外一种方式是将 <code>NetWork</code> 通过 CocoaPods 安装在 <code>Example</code> 中，和安装在壳工程一样。</p>
<p>看到这里，是不是感觉很烦？就是想做个测试而已，还要拖来拖去，那么繁琐。</p>
<p>不要着急下面来介绍一种更快捷高效的方式，执行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">pod lib create BaseMoudle</div><div class="line">////////////////////////////////////////////////////////////////////////</div><div class="line">What language do you want to use?? [ Swift / ObjC ] </div><div class="line"> &gt; Swift</div><div class="line"></div><div class="line">Would you like to include a demo application with your library? [ Yes / No ]</div><div class="line"> &gt; Yes</div><div class="line"></div><div class="line">Which testing frameworks will you use? [ Quick / None ]</div><div class="line"> &gt; None</div><div class="line"></div><div class="line">Would you like to do view based testing? [ Yes / No ]</div><div class="line"> &gt; Yes</div></pre></td></tr></table></figure>
<p>现在我们就有了一个 CocoaPods 的模板工程，它的结构是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── BaseMoudle</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       └── ReplaceMe.swift</div><div class="line">├── BaseMoudle.podspec</div><div class="line">├── Example</div><div class="line">│   ├── BaseMoudle</div><div class="line">│   ├── BaseMoudle.xcodeproj</div><div class="line">│   ├── BaseMoudle.xcworkspace</div><div class="line">│   ├── Podfile</div><div class="line">│   ├── Podfile.lock</div><div class="line">│   ├── Pods</div><div class="line">├── LICENSE</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p>看吧，把源码拖到 <code>ReplaceMe.swift</code> 的同级目录，执行 <code>pod install</code>，就完成了本地私有库和其测试工程。</p>
<blockquote>
<p>这一步可能会有 Swift 语言版本的问题，保持测试工程和私有库源码语言版本一致就可以。</p>
</blockquote>
<h2 id="远程私有库"><a href="#远程私有库" class="headerlink" title="远程私有库"></a>远程私有库</h2><table>
<thead>
<tr>
<th style="text-align:center">远程私有库工作流程</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="https://user-gold-cdn.xitu.io/2017/10/27/03855bebbd9549c26b02e498afe767c1" alt="远程私有库"></td>
</tr>
</tbody>
</table>
<p>现在使用 <code>pod lib create</code> 就可以方便的生成一个本地私有库了，但是本地私有库有一定的局限性，例如：</p>
<ul>
<li>需要在 <code>Podfile</code> 文件中主动指明路径；</li>
<li>版本升级不容易维护；</li>
<li>多人开发时，不方便进行合作；</li>
</ul>
<p>远程私有库就可以方便的解决以上的问题，制作远程私有库分为以下几个步骤：</p>
<ol>
<li>创建私有 Git 远程仓库；</li>
<li>创建私有 CocoaPods 远程索引库；</li>
<li>创建 Pod 所需要的项目工程文件，并上传到 Git 远程私有库；</li>
<li>验证 <code>podspec</code> 描述文件；</li>
<li>向私有 CocoaPods 远程索引库提交 <code>podspec</code> 描述文件；</li>
<li>使用 Pod 库；</li>
</ol>
<p>Git 仓库的创建在此就不在赘述了，本文中我使用码市做示例，私有 CocoaPods 远程索引库实际上也是一个 Git 仓库，现在我们有两个私有库，一个用来存放 Pod 库的源码，一个用来存放 Pod 库的描述文件。</p>
<h3 id="SSH-授权"><a href="#SSH-授权" class="headerlink" title="SSH 授权"></a>SSH 授权</h3><p>添加私有索引库需要使用 SSH 授权，也是和 Git 仓库一样的，了解的同学可以跳过这一步骤，首先创建公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
<p>然后找到下面的文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>里面存放的字符就是公钥了，然后将公钥添加码市，链接如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://coding.net/user/account/setting/keys</div></pre></td></tr></table></figure>
<h3 id="添加私有远程索引库"><a href="#添加私有远程索引库" class="headerlink" title="添加私有远程索引库"></a>添加私有远程索引库</h3><p>现在执行 <code>pod repo</code>，可以看到下面的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">master</div><div class="line">- Type: git (master)</div><div class="line">- URL:  https://github.com/CocoaPods/Specs.git</div><div class="line">- Path: /Users/Tian/.cocoapods/repos/master</div></pre></td></tr></table></figure>
<p>现在我们只有一个 CocoaPods 远程索引库，也是官方的索引库，下面执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo add TZYSpecs git@git.coding.net:tianziyao/TZYSpecs.git</div></pre></td></tr></table></figure>
<p>此时我们的 CocoaPods 远程索引库就安装好了，到下面的路径去看一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cocoapods/repos</div></pre></td></tr></table></figure>
<h3 id="上传源码到-Git"><a href="#上传源码到-Git" class="headerlink" title="上传源码到 Git"></a>上传源码到 Git</h3><p>还记得 <code>pod lib create</code> 命令吗？前面我们使用它来制作了本地私有库，现在它又排上用场了，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib create BaseComponent</div></pre></td></tr></table></figure>
<p>源码拖到 <code>ReplaceMe.swift</code> 的同级目录，它现在看起来应该是这个样子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── BaseComponent</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       ├── Extension</div><div class="line">│       │   ├── Array+Safe.swift</div><div class="line">│       │   ├── CALayer+PauseAimate.swift</div><div class="line">│       │   ├── UIImage+.swift</div><div class="line">│       │   └── UIView+Property.swift</div><div class="line">├── BaseComponent.podspec</div><div class="line">├── Example</div><div class="line">├── LICENSE</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p>执行 <code>pod install</code>，就完成了本地私有库和其测试工程，通过测试之后，我们就可以把这个本地私有库制作成远程私有库了。</p>
<p>首先修改 <code>BaseComponent.podspec</code> 文件：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line"></div><div class="line">  s.name             = <span class="string">'BaseComponent'</span></div><div class="line">  s.version          = <span class="string">'0.1.0'</span></div><div class="line">  s.summary          = <span class="string">'基础组价'</span></div><div class="line">  s.description      = <span class="string">'包括基本配置，常量，扩展，工具类等'</span></div><div class="line">  s.homepage         = <span class="string">'https://coding.net/u/tianziyao/p/BaseComponent'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'tianziyao'</span> =&gt; <span class="string">'ziyao.tian@gmail.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://git.coding.net/tianziyao/BaseComponent.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">  s.source_files = <span class="string">'BaseComponent/Classes/**/*'</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>然后使用质量检查工具验证一下，保证在 <code>BaseComponent.podspec</code> 路径下，执行：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>如果你使用 Swift，会得到一个提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> -&gt; BaseComponent (0.1.0)</div><div class="line">    - WARN  | [iOS] swift_version: The validator for Swift projects uses Swift 3.0 by default, if you are using a different version of swift you can use a `.swift-version` file to set the version for your Pod. For example to use Swift 2.3, run: </div><div class="line">    `echo &quot;2.3&quot; &gt; .swift-version`</div><div class="line"></div><div class="line">[!] BaseComponent did not pass validation, due to 1 warning (but you can use `--allow-warnings` to ignore it).</div><div class="line">You can use the `--no-clean` option to inspect any issue.</div></pre></td></tr></table></figure>
<p>根据提示修复就好了，在这里你可能会遇到很多 Swift 语言版本的问题，善用搜索引擎吧，通过检验以后提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> -&gt; BaseComponent (0.1.0)</div><div class="line"></div><div class="line">BaseComponent passed validation.</div></pre></td></tr></table></figure>
<p>下面执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &apos;x&apos;</div></pre></td></tr></table></figure>
<p>然后和远程仓库进行关联：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://git.coding.net/tianziyao/BaseComponent.git</div><div class="line">git pull origin master </div><div class="line">git push origin master</div></pre></td></tr></table></figure>
<h3 id="上传-Spec-到远程索引库"><a href="#上传-Spec-到远程索引库" class="headerlink" title="上传 Spec 到远程索引库"></a>上传 Spec 到远程索引库</h3><p>首先执行下面的命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec lint</div></pre></td></tr></table></figure>
<p>提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> -&gt; BaseComponent (0.1.0)</div><div class="line">    - ERROR | [iOS] unknown: Encountered an unknown error ([!] /usr/local/bin/git clone https://git.coding.net/tianziyao/BaseComponent.git /var/folders/2v/qkx5m4sx4dg86x4c82yfyjdc0000gn/T/d20171021-69604-1bekfgk --template= --single-branch --depth 1 --branch 0.1.0</div><div class="line"></div><div class="line">Cloning into &apos;/var/folders/2v/qkx5m4sx4dg86x4c82yfyjdc0000gn/T/d20171021-69604-1bekfgk&apos;...</div><div class="line">warning: Could not find remote branch 0.1.0 to clone.</div><div class="line">fatal: Remote branch 0.1.0 not found in upstream origin</div><div class="line">) during validation.</div><div class="line"></div><div class="line">Analyzed 1 podspec.</div><div class="line"></div><div class="line">[!] The spec did not pass validation, due to 1 error.</div></pre></td></tr></table></figure>
<p>根据提示，我们需要先建立一个 Tag：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag &apos;0.1.0&apos;</div><div class="line">git push --tags</div><div class="line">pod spec lint</div></pre></td></tr></table></figure>
<p>检验通过后，提示如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> -&gt; BaseComponent (0.1.0)</div><div class="line"></div><div class="line">Analyzed 1 podspec.</div><div class="line"></div><div class="line">BaseComponent.podspec passed validation.</div></pre></td></tr></table></figure>
<p>然后将 <code>podspec</code> 文件推到远程私有索引库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push TZYSpecs BaseComponent.podspec</div></pre></td></tr></table></figure>
<p>现在看一下本地索引库中是否已经添加成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.cocoapods/repos</div></pre></td></tr></table></figure>
<p>再看一看你的远程索引库中是否添加成功，现在搜索一下本地索引文件试试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-&gt; BaseComponent (0.1.0)</div><div class="line">   基础组价</div><div class="line">   pod &apos;BaseComponent&apos;, &apos;~&gt; 0.1.0&apos;</div><div class="line">   - Homepage: https://coding.net/u/tianziyao/p/BaseComponent</div><div class="line">   - Source:   https://git.coding.net/tianziyao/BaseComponent.git</div><div class="line">   - Versions: 0.1.0 [TZYSpecs repo]</div></pre></td></tr></table></figure>
<p>现在我们可以找到自己的远程私有库了，下面将 <code>Podfile</code> 文件改成这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">project <span class="string">'Ting.xcodeproj'</span></div><div class="line"></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div><div class="line">source <span class="string">'git@git.coding.net:tianziyao/TZYSpecs.git'</span></div><div class="line"></div><div class="line">target <span class="string">'Ting'</span> <span class="keyword">do</span></div><div class="line"></div><div class="line">  use_frameworks!</div><div class="line">  </div><div class="line">  pod <span class="string">'BaseComponent'</span></div><div class="line">  pod <span class="string">'Alamofire'</span></div><div class="line">  </div><div class="line">  target <span class="string">'TingTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  target <span class="string">'TingUITests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>执行 <code>pod install</code>，整个远程私有库的搭建和使用就完成了。</p>
<h2 id="CocoaPods-库升级"><a href="#CocoaPods-库升级" class="headerlink" title="CocoaPods 库升级"></a>CocoaPods 库升级</h2><p>我们使用远程私有库的目的就是为了版本升级和多人开发，那么远程私有库如何进行升级，升级后其他人又如何使用呢？现在我们给 <code>BaseComponent</code> 进行升级，给它再增加一些功能：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── BaseComponent</div><div class="line">│   ├── Assets</div><div class="line">│   └── Classes</div><div class="line">│       ├── Const</div><div class="line">│       │   └── Const.swift</div><div class="line">│       ├── Extension</div><div class="line">│       │   ├── Array+Safe.swift</div><div class="line">│       │   ├── CALayer+PauseAimate.swift</div><div class="line">│       │   ├── UIImage+.swift</div><div class="line">│       │   └── UIView+Property.swift</div><div class="line">│       └── Tool</div><div class="line">│           ├── AlertTool.swift</div><div class="line">│           ├── CacheTool.swift</div><div class="line">│           ├── DeviceMessage.swift</div><div class="line">│           └── NoticeLocalTool.swift</div><div class="line">├── BaseComponent.podspec</div><div class="line">├── Example</div><div class="line">├── LICENSE</div><div class="line">├── README.md</div><div class="line">└── _Pods.xcodeproj -&gt; Example/Pods/Pods.xcodeproj</div></pre></td></tr></table></figure>
<p>在 <code>BaseComponent</code> 的测试工程中测试无误后，将 <code>BaseComponent.podspec</code> 的 <code>version</code> 修改一下：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'BaseComponent'</span></div><div class="line">  s.version          = <span class="string">'0.2.0'</span></div><div class="line">  s.summary          = <span class="string">'基础组价'</span></div><div class="line">  s.description      = <span class="string">'包括基本配置，常量，扩展，工具类等'</span></div><div class="line">  s.homepage         = <span class="string">'https://coding.net/u/tianziyao/p/BaseComponent'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'tianziyao'</span> =&gt; <span class="string">'ziyao.tian@gmail.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://git.coding.net/tianziyao/BaseComponent.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">  s.source_files = <span class="string">'BaseComponent/Classes/**/*'</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>现在检查一下私有库是否有错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint</div></pre></td></tr></table></figure>
<p>检查通过后就可以将 <code>BaseComponent</code> 的 <code>0.2.0</code> 版本推到远程私有库中，同时建立 <code>0.2.0</code> 的 Tag。</p>
<p> 然后检查一下 <code>spec</code> 文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec lint</div></pre></td></tr></table></figure>
<p>检查通过后，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push TZYSpecs BaseComponent.podspec</div></pre></td></tr></table></figure>
<p>远程私有库和远程私有索引库全部更新完毕，现在我们回到使用者的视角，这个库可以使用了吗？还不行。</p>
<p>因为本地的索引文件还没有更新，这个源还找不到，现在进入壳工程，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pod update --no-repo-update</div><div class="line">pod install</div></pre></td></tr></table></figure>
<p><code>BaseComponent</code> 的 <code>0.2.0</code> 版本就乖乖的进入了壳工程。</p>
<h2 id="CocoaPods-库依赖"><a href="#CocoaPods-库依赖" class="headerlink" title="CocoaPods 库依赖"></a>CocoaPods 库依赖</h2><p>在上面的壳工程中，我们引入了 <code>Alamofire</code> 这个框架，但是如果用着用着突然觉得不爽了，要换框架，这时 <code>Alamofire</code> 的引用在工程中已经无处不再了，这样换的话是不是很痛苦？</p>
<p>所以我们一般在开发中都会封装网络请求，做到分层解耦，这样如果换框架，只修改网络请求这层的封装就可以了，那么现在我们需要将 <code>Alamofire</code> 封装成 <code>Network</code>，再把 <code>Network</code> 弄到我们的 <code>BaseComponent</code> 里面去，怎么做呢？</p>
<p>现在先将 <code>Network</code> 拖到 <code>BaseComponent</code> 的 <code>Classes</code> 目录中，因为 <code>BaseComponent</code> 的测试工程没有 <code>Alamofire</code>，所以 <code>Network</code> 肯定是会报错了，不要慌，下面我们修改 <code>spec</code> 文件：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'BaseComponent'</span></div><div class="line">  s.version          = <span class="string">'0.2.0'</span></div><div class="line">  s.summary          = <span class="string">'基础组价'</span></div><div class="line">  s.description      = <span class="string">'包括基本配置，常量，扩展，工具类等'</span></div><div class="line">  s.homepage         = <span class="string">'https://coding.net/u/tianziyao/p/BaseComponent'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'tianziyao'</span> =&gt; <span class="string">'ziyao.tian@gmail.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://git.coding.net/tianziyao/BaseComponent.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">  s.source_files = <span class="string">'BaseComponent/Classes/**/*'</span></div><div class="line">  s.dependency <span class="string">'Alamofire'</span></div><div class="line">  s.dependency <span class="string">'SDWebImage'</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p><code>dependency</code> 指明了这个库的依赖，改好之后 <code>pod install</code>，<code>Alamofire</code> 就安装到了 <code>BaseComponent</code> 的测试工程中，现在就可以使用 <code>Alamofire</code> 进行网络请求封装，直接 <code>import</code> 就可以了：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> Alamofire</div><div class="line"><span class="keyword">import</span> SDWebImage</div><div class="line"></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Network</span> </span>&#123;</div><div class="line">    </div><div class="line">    open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">request</span>(<span class="title">url</span>: <span class="title">String</span>, <span class="title">parameters</span>: [<span class="title">String</span>:<span class="title">Any</span>]?) </span>&#123;</div><div class="line">        <span class="type">Alamofire</span>.request(url, method: .<span class="keyword">get</span>, parameters: parameters).responseJSON &#123; (response) <span class="keyword">in</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">JSON</span> = response.result.value <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="built_in">print</span>(<span class="type">JSON</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImageView</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">image</span><span class="params">(with url: URL?)</span></span> &#123;</div><div class="line">        <span class="keyword">self</span>.sd_setImage(with: url)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在再进行一次远程私有库升级，整个依赖就做好了，需要注意的是，已经做了依赖的话，相关的库就可以从 <code>Podfile</code> 文件中去掉了：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">project <span class="string">'Ting.xcodeproj'</span></div><div class="line"></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div><div class="line">source <span class="string">'git@git.coding.net:tianziyao/TZYSpecs.git'</span></div><div class="line"></div><div class="line">target <span class="string">'Ting'</span> <span class="keyword">do</span></div><div class="line"></div><div class="line">  use_frameworks!</div><div class="line">  </div><div class="line">  pod <span class="string">'BaseComponent'</span></div><div class="line">  <span class="comment"># pod 'Alamofire'</span></div><div class="line">  </div><div class="line">  target <span class="string">'TingTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  target <span class="string">'TingUITests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>现在是我们依赖的是公开库，直接升级 CocoaPods 私有库就可以，但是如果依赖的是另外一个私有库，这个依赖关系最终还要上传到私有索引库中，这样其他人在使用的时候才会知道这个依赖关系，现在走一下升级的流程，你会得到类似这个报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[!] The `TargetComponent.podspec` specification does not validate.</div></pre></td></tr></table></figure>
<p>这个报错是因为 <code>TargetComponent</code> 这个库没有在官方的索引库当中，忽略就可以了，当然，在使用的时候，<code>TargetComponent</code> 这个库可以在你的本地索引文件中找到，否则无法使用。</p>
<h2 id="CocoaPods-资源依赖"><a href="#CocoaPods-资源依赖" class="headerlink" title="CocoaPods 资源依赖"></a>CocoaPods 资源依赖</h2><p>现在我们可以让一个库依赖另外一个库，但是看下面这段代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 获取中间的视图</span></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">tabBarMiddleView</span>() -&gt; <span class="title">TZYTabBarMiddleView</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> view = <span class="type">Bundle</span>.main.loadNibNamed(<span class="string">"TZYTabBarMiddleView"</span>, owner: <span class="literal">nil</span>, options: <span class="literal">nil</span>)?.first</div><div class="line">    <span class="keyword">return</span> (view <span class="keyword">as</span>? <span class="type">TZYTabBarMiddleView</span>) ?? <span class="type">TZYTabBarMiddleView</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码读取了一个 XIB 文件，这个库的结构是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Assets</div><div class="line">└── Classes</div><div class="line">    └── MainModule</div><div class="line">        ├── Controller</div><div class="line">        │   ├── TZYNavBarC.swift</div><div class="line">        │   └── TZYTabBarC.swift</div><div class="line">        └── View</div><div class="line">            ├── TZYNavBar.swift</div><div class="line">            ├── TZYTabBar.swift</div><div class="line">            ├── TZYTabBarMiddleView.swift</div><div class="line">            └── TZYTabBarMiddleView.xib</div></pre></td></tr></table></figure>
<p>我们可以成功调用这个方法吗？不能，因为 <code>TZYTabBarMiddleView.xib</code> 这个文件的 Target 是 <code>MainModule</code>，使用 CocoaPods 把这个库安装到我们项目后，XIB 文件即使在，也是在 Pods 这个工程里，而我们在壳工程中使用 <code>TZYTabBarMiddleView.xib</code>，也是必然找不到的。</p>
<p>下面我们把模板库的测试工程编译一下，打开 Products 目录下的 <code>.app</code> 文件，看一下文件结构：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Base.lproj</div><div class="line">│   ├── LaunchScreen.nib</div><div class="line">│   └── Main.storyboardc</div><div class="line">├── Frameworks</div><div class="line">│   ├── Alamofire.framework</div><div class="line">│   │   ├── Alamofire</div><div class="line">│   │   ├── Info.plist</div><div class="line">│   │   └── _CodeSignature</div><div class="line">│   │       └── CodeResources</div><div class="line">│   ├── BaseComponent.framework</div><div class="line">│   │   ├── BaseComponent</div><div class="line">│   │   ├── Info.plist</div><div class="line">│   │   └── _CodeSignature</div><div class="line">│   │       └── CodeResources</div><div class="line">│   ├── SDWebImage.framework</div><div class="line">│   │   ├── Info.plist</div><div class="line">│   │   ├── SDWebImage</div><div class="line">│   │   └── _CodeSignature</div><div class="line">│   │       └── CodeResources</div><div class="line">│   ├── TargetComponent.framework</div><div class="line">│   │   ├── Info.plist</div><div class="line">│   │   ├── TZYTabBarMiddleView.nib</div><div class="line">│   │   ├── TargetComponent</div><div class="line">│   │   └── _CodeSignature</div><div class="line">│   │       └── CodeResources</div><div class="line">├── Info.plist</div><div class="line">├── PkgInfo</div><div class="line">├── TargetComponent_Example</div><div class="line">├── _CodeSignature</div><div class="line">│   └── CodeResources</div><div class="line">└── libswiftRemoteMirror.dylib</div></pre></td></tr></table></figure>
<p>通过路径可以看到，<code>TZYTabBarMiddleView.nib</code> 是在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainBundle/Frameworks/TargetComponent.framework</div></pre></td></tr></table></figure>
<p>这个路径下面，因此 <code>mainBundle.loadXIb</code> 肯定是找不到资源文件的，那么该如何修改呢？</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">tabBarMiddleView</span>() -&gt; <span class="title">TZYTabBarMiddleView</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> view = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">TZYTabBarMiddleView</span>.<span class="keyword">self</span>).loadNibNamed(<span class="string">"TZYTabBarMiddleView"</span>, owner: <span class="literal">nil</span>, options: <span class="literal">nil</span>)?.first</div><div class="line">    <span class="comment">//let view = Bundle.main.loadNibNamed("TZYTabBarMiddleView", owner: nil, options: nil)?.first</span></div><div class="line">    <span class="keyword">return</span> (view <span class="keyword">as</span>? <span class="type">TZYTabBarMiddleView</span>) ?? <span class="type">TZYTabBarMiddleView</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这部分的重点就是 <code>Bundle(for aClass: Swift.AnyClass)</code> 这个方法。</p>
<h2 id="CocoaPods-图片依赖"><a href="#CocoaPods-图片依赖" class="headerlink" title="CocoaPods 图片依赖"></a>CocoaPods 图片依赖</h2><p>上面我们讲到了怎样使用 Pod 库里面的 XIB 文件，但是还有其他资源文件，例如图片、音频、视频，图片我们一般是放在 <code>Assets.xcassets</code>，但是 Pod 库并没有对应的路径，那么它所需要的图片放在哪里，已经如何使用呢？现在使用 <code>pod lib create</code> 命令创建一个 Pod 库，进入以下路径：    </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">组件名/Assets</div></pre></td></tr></table></figure>
<p>把一些图片拖入到 <code>Assets</code> 文件夹内，然后在 <code>podspec</code> 文件中加入以下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">s.resource_bundles = &#123;</div><div class="line">  &apos;组件名&apos; =&gt; [&apos;组件名/Assets/*.png&apos;] //只加载 png 文件</div><div class="line">  # &apos;组件名&apos; =&gt; [&apos;组件名/Assets/*&apos;] //加载所有文件</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后执行 <code>pod install</code>，Pod 库中就出现了之前拖入 <code>Assets</code> 文件夹的图片，但是现在还不能使用，我们先来看一下打包以后这些图片的路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── Base.lproj</div><div class="line">│   ├── LaunchScreen.nib</div><div class="line">│   └── Main.storyboardc</div><div class="line">│       ├── Info.plist</div><div class="line">│       ├── UIViewController-vXZ-lx-hvc.nib</div><div class="line">│       └── vXZ-lx-hvc-view-kh9-bI-dsS.nib</div><div class="line">├── Frameworks</div><div class="line">│   ├── TargetComponent.framework</div><div class="line">│   │   ├── Info.plist</div><div class="line">│   │   ├── TZYTabBarMiddleView.nib</div><div class="line">│   │   ├── TargetComponent</div><div class="line">│   │   ├── TargetComponent.bundle</div><div class="line">│   │   │   ├── Info.plist</div><div class="line">│   │   │   ├── tabbar_bg_320x49_@3x.png</div><div class="line">│   │   │   └── zxy_icon_48x48_@2x.png</div><div class="line">│   │   └── _CodeSignature</div><div class="line">│   │       └── CodeResources</div><div class="line">│   └── libswiftUIKit.dylib</div><div class="line">├── Info.plist</div><div class="line">├── PkgInfo</div><div class="line">├── TargetComponent_Example</div><div class="line">├── _CodeSignature</div><div class="line">│   └── CodeResources</div><div class="line">├── embedded.mobileprovision</div><div class="line">└── libswiftRemoteMirror.dylib</div></pre></td></tr></table></figure>
<p>可以看到，打包后的路径在：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mainBundle/Frameworks/TargetComponent.framework/TargetComponent.bundle</div></pre></td></tr></table></figure>
<p>这个路径下面，而代码中的 <code>UIImage(named: &quot;tabbar_bg&quot;)</code> 读取的是 <code>mainBundle</code> 下的资源文件，因此还是找不到的，那么这时使用图片，应该将代码改成这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">backgroundImage = <span class="type">UIImage</span>.image(withName: <span class="string">"tabbar_bg_320x49_@3x.png"</span>)</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIImage</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">image</span>(<span class="title">withName</span> <span class="title">name</span>: <span class="title">String</span>) -&gt; <span class="title">UIImage</span>? </span>&#123;</div><div class="line">        <span class="keyword">let</span> bundle = <span class="type">Bundle</span>(<span class="keyword">for</span>: <span class="type">UIImage</span>.<span class="keyword">self</span>)</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> path = bundle.path(forResource: name, ofType: <span class="literal">nil</span>, inDirectory: <span class="string">"TargetComponent.bundle"</span>) <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="type">UIImage</span>(contentsOfFile: path)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 这里需要注意的是，<strong>文件名需要完整</strong>。以上是在代码中加载图片，如果是在 XIB 中加载图片，应该怎样做呢？那么再看一下上面的目录结构，<code>TZYTabBarMiddleView.nib</code> 和 <code>TargetComponent.bundle</code> 处于同一个目录，我们可以在 <code>TZYTabBarMiddleView.xib</code> 中通过相对路径，使用 <code>TargetComponent.bundle</code> 里面的图片，因此在 XIB 中，图片名应该是这样的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TargetComponent.bundle/tabbar_bg_320x49_@3x</div></pre></td></tr></table></figure>
<h2 id="CocoaPods-子库"><a href="#CocoaPods-子库" class="headerlink" title="CocoaPods 子库"></a>CocoaPods 子库</h2><p>现在我们实现了一个完整的远程私有库，可以升级，依赖其他的库，提供给其他人使用，但是现在还有一点问题，其他人如果要用我们的库，就需要把 <code>BaseComponent</code> 完整的克隆过来，但是他可能只需要 <code>BaseComponent</code> 里面的 <code>Network</code>，其他的扩展、工具等并不想使用，也不想导入过来，怎么办？有两种方案：</p>
<ol>
<li>把 <code>Network</code> 剥离出来，再单独建一个远程私有库；</li>
<li>使用子库迁出 <code>Network</code>；</li>
</ol>
<p>第一种方案大家已经知道了，就是上面的一大篇，麻烦不说，而且东西一多起来，这里一个库，那里一个库，也不容易管理，所以，下面就有请子库隆重登场。</p>
<p>在开始之前，我们先来开一个东西，下面是 <code>pod search AFN</code> 中的一条记录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-&gt; AFNetworking (3.1.0)</div><div class="line">   A delightful iOS and OS X networking framework.</div><div class="line">   pod &apos;AFNetworking&apos;, &apos;~&gt; 3.1.0&apos;</div><div class="line">   - Homepage: https://github.com/AFNetworking/AFNetworking</div><div class="line">   - Source:   https://github.com/AFNetworking/AFNetworking.git</div><div class="line">   - Versions: 3.1.0, 3.0.4, 3.0.3, 3.0.2, 3.0.1, 3.0.0, 3.0.0-beta.3, 3.0.0-beta.2, 3.0.0-beta.1, 2.6.3, 2.6.2, 2.6.1, 2.6.0, 2.5.4, 2.5.3, 2.5.2, 2.5.1, 2.5.0, 2.4.1,</div><div class="line">   2.4.0, 2.3.1, 2.3.0, 2.2.4, 2.2.3, 2.2.2, 2.2.1, 2.2.0, 2.1.0, 2.0.3, 2.0.2, 2.0.1, 2.0.0, 2.0.0-RC3, 2.0.0-RC2, 2.0.0-RC1, 1.3.4, 1.3.3, 1.3.2, 1.3.1, 1.3.0, 1.2.1,</div><div class="line">   1.2.0, 1.1.0, 1.0.1, 1.0, 1.0RC3, 1.0RC2, 1.0RC1, 0.10.1, 0.10.0, 0.9.2, 0.9.1, 0.9.0, 0.7.0, 0.5.1 [master repo]</div><div class="line">   - Subspecs:</div><div class="line">     - AFNetworking/Serialization (3.1.0)</div><div class="line">     - AFNetworking/Security (3.1.0)</div><div class="line">     - AFNetworking/Reachability (3.1.0)</div><div class="line">     - AFNetworking/NSURLSession (3.1.0)</div><div class="line">     - AFNetworking/UIKit (3.1.0)</div></pre></td></tr></table></figure>
<p>注意 <code>Subspecs</code> 这里，它就是本节要讲的东西，首先将 <code>spec</code> 改成下面这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new <span class="keyword">do</span> <span class="params">|s|</span></div><div class="line">  s.name             = <span class="string">'BaseComponent'</span></div><div class="line">  s.version          = <span class="string">'0.4.0'</span></div><div class="line">  s.summary          = <span class="string">'基础组价'</span></div><div class="line">  s.description      = <span class="string">'包括基本配置，常量，扩展，工具类等'</span></div><div class="line">  s.homepage         = <span class="string">'https://coding.net/u/tianziyao/p/BaseComponent'</span></div><div class="line">  s.license          = &#123; <span class="symbol">:type</span> =&gt; <span class="string">'MIT'</span>, <span class="symbol">:file</span> =&gt; <span class="string">'LICENSE'</span> &#125;</div><div class="line">  s.author           = &#123; <span class="string">'tianziyao'</span> =&gt; <span class="string">'ziyao.tian@gmail.com'</span> &#125;</div><div class="line">  s.source           = &#123; <span class="symbol">:git</span> =&gt; <span class="string">'https://git.coding.net/tianziyao/BaseComponent.git'</span>, <span class="symbol">:tag</span> =&gt; s.version.to_s &#125;</div><div class="line">  s.ios.deployment_target = <span class="string">'8.0'</span></div><div class="line">  <span class="comment"># s.source_files = 'BaseComponent/Classes/**/*'</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'Network'</span> <span class="keyword">do</span> <span class="params">|n|</span></div><div class="line">    n.source_files = <span class="string">'BaseComponent/Classes/Network/**/*'</span></div><div class="line">    n.dependency <span class="string">'Alamofire'</span></div><div class="line">    n.dependency <span class="string">'SDWebImage'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'Const'</span> <span class="keyword">do</span> <span class="params">|c|</span></div><div class="line">    c.source_files = <span class="string">'BaseComponent/Classes/Const/**/*'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'Extension'</span> <span class="keyword">do</span> <span class="params">|e|</span></div><div class="line">    e.source_files = <span class="string">'BaseComponent/Classes/Extension/**/*'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  s.subspec <span class="string">'Tool'</span> <span class="keyword">do</span> <span class="params">|t|</span></div><div class="line">    t.source_files = <span class="string">'BaseComponent/Classes/Tool/**/*'</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>在这里要注意 <code>source_files</code> 和 <code>dependency</code> 以及版本的变化，修改完成推到远程索引库，并打好 <code>0.4.0</code> 的分支，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pod spec lint</div><div class="line">pod repo push TZYSpecs BaseComponent.podspec</div><div class="line">pod update --no-repo-update</div><div class="line">pod search Base</div></pre></td></tr></table></figure>
<p>现在就可以找到了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-&gt; BaseComponent (0.4.0)</div><div class="line">   基础组价</div><div class="line">   pod &apos;BaseComponent&apos;, &apos;~&gt; 0.4.0&apos;</div><div class="line">   - Homepage: https://coding.net/u/tianziyao/p/BaseComponent</div><div class="line">   - Source:   https://git.coding.net/tianziyao/BaseComponent.git</div><div class="line">   - Versions: 0.4.0, 0.3.0, 0.2.0, 0.1.0 [TZYSpecs repo]</div><div class="line">   - Subspecs:</div><div class="line">     - BaseComponent/Network (0.4.0)</div><div class="line">     - BaseComponent/Const (0.4.0)</div><div class="line">     - BaseComponent/Extension (0.4.0)</div><div class="line">     - BaseComponent/Tool (0.4.0)</div></pre></td></tr></table></figure>
<p>那么如何使用呢？把 <code>Podfile</code> 改成这样：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">project <span class="string">'Ting.xcodeproj'</span></div><div class="line"></div><div class="line">source <span class="string">'https://github.com/CocoaPods/Specs.git'</span></div><div class="line">source <span class="string">'git@git.coding.net:tianziyao/TZYSpecs.git'</span></div><div class="line"></div><div class="line">target <span class="string">'Ting'</span> <span class="keyword">do</span></div><div class="line"></div><div class="line">  use_frameworks!</div><div class="line">  </div><div class="line">  pod <span class="string">'BaseComponent/Network'</span></div><div class="line">  </div><div class="line">  <span class="comment"># 也可以用下面的写法</span></div><div class="line">  <span class="comment"># pod 'BaseComponent', :subspecs =&gt; ['Network', 'Extension']</span></div><div class="line">  </div><div class="line">  target <span class="string">'TingTests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  target <span class="string">'TingUITests'</span> <span class="keyword">do</span></div><div class="line">    inherit! <span class="symbol">:search_paths</span></div><div class="line">    </div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>现在 <code>pod install</code>，就完成了子库的创建和使用。</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>这篇文章断断续续写了快一周，其实一般我们用不到 CocoaPods 这些功能，不过了解一下 CocoaPods 的工作原理也是没有坏处的。</p>
<p>这篇文章主要是为了使用 CocoaPods 进行组件化开发，关于组件化开发的思想，可以看下面这篇文章：</p>
<p><a href="https://juejin.im/post/59f2cc5d6fb9a04525775bce" target="_blank" rel="external">iOS 组件化实践思考</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CocoaPods 可以说是 iOS 开发应用最广泛的包管理工具，本篇文章主要介绍 CocoaPods 的第三方库是怎样从网络集成到我们本地的项目当中，也是制作私有库、开源库和 iOS 项目组件化的一个知识铺垫。&lt;/p&gt;
&lt;p&gt;让我们从一张图片开始：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;CocoaPods 工作流程&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/10/27/2c5a3729f05e0ed26c16d83ae0ac13f0&quot; alt=&quot;未命名文件&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="CocoaPods" scheme="http://yoursite.com/tags/CocoaPods/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="组件化" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>iOS - Runloop 最佳实践</title>
    <link href="http://yoursite.com/2017/10/12/iOS%20-%20Runloop-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/10/12/iOS - Runloop-最佳实践/</id>
    <published>2017-10-11T17:21:00.000Z</published>
    <updated>2017-10-28T06:58:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于 Runloop，这篇文章写的非常棒，<a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="external">深入理解RunLoop</a>。我写这篇文章在深度上是不如它的，但是为什么还想写一下呢？</p>
<p>Runloop 是一个偏门的东西，在我的工作经历中，几乎没有使用到它的地方，在我当时学习它时，因为本身对 iOS 整个生态了解不够，很多概念让我非常头疼。</p>
<p>因此这篇文章我希望可以换一下因果关系，先不要管 Runloop 是什么，让我们从需求入手，看看 Runloop 能做什么，当你实现过一次之后，回头看这些高屋建瓴的文章，可能会更有启发性。</p>
<p>本文涉及的代码托管在：<a href="https://github.com/tianziyao/Runloop" target="_blank" rel="external">https://github.com/tianziyao/Runloop</a></p>
<p>首先先记下 Runloop 负责做什么事情：</p>
<ul>
<li>保证程序不退出；</li>
<li>负责监听事件，如触摸事件，计时器事件，网络事件等；</li>
<li>负责渲染屏幕上所有的 UI，一次 Runloop 循环，需要渲染屏幕上所有变化的像素点；</li>
<li>节省 CPU 的开销，让程序该工作时工作，改休息时休息；</li>
</ul>
<p>保证程序不退出和监听应该比较容易理解，用伪代码来表示，大致是这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 退出</span></div><div class="line"><span class="keyword">var</span> exit = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">// 事件</span></div><div class="line"><span class="keyword">var</span> event: <span class="type">UIEvent</span>? = <span class="literal">nil</span></div><div class="line"></div><div class="line"><span class="comment">// 事件队列</span></div><div class="line"><span class="keyword">var</span> events: [<span class="type">UIEvent</span>] = [<span class="type">UIEvent</span>]()</div><div class="line"></div><div class="line"><span class="comment">// 事件分发/响应链</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">handle</span><span class="params">(event: UIEvent)</span></span> -&gt; <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 主线程 Runloop</span></div><div class="line"><span class="keyword">repeat</span> &#123;</div><div class="line">    <span class="comment">// 出现新的事件</span></div><div class="line">    <span class="keyword">if</span> event != <span class="literal">nil</span> &#123;</div><div class="line">        <span class="comment">// 将事件加入队列</span></div><div class="line">        events.append(event!)</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 如果队列中有事件</span></div><div class="line">    <span class="keyword">if</span> events.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</div><div class="line">        <span class="comment">// 处理队列中第一个事件</span></div><div class="line">        <span class="keyword">let</span> result = handle(event: events.first!)</div><div class="line">        <span class="comment">// 处理完成移除第一个事件</span></div><div class="line">        <span class="keyword">if</span> result &#123;</div><div class="line">            events.removeFirst()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 再次进入发现事件-&gt;添加到队列-&gt;事件分发-&gt;处理事件-&gt;移除事件</span></div><div class="line">    <span class="comment">// 直到 exit=true，主线程退出</span></div><div class="line">&#125; <span class="keyword">while</span> exit == <span class="literal">false</span></div></pre></td></tr></table></figure>
<p>负责渲染屏幕上所有的 UI，也就是在一次 Runloop 中，事件引起了 UI 的变化，再通过像素点的重绘表现出来。</p>
<p>上面讲到的，全部是 Runloop 在系统层面的用处，那么在应用层面，Runloop 能做什么，以及应用在什么地方呢？首先我们从一个计时器开始。</p>
<a id="more"></a>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>当我们使用计时器的时候，应该有了解过 timer 的几种构造方法，有的需要加入到 Runloop 中，有的不需要。</p>
<p>实际上，就算我们不需要手动将 timer 加入到 Runloop，它也是在 Runloop 中，下面的两种初始化方式是等价的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> timer = <span class="type">Timer</span>(timeInterval: <span class="number">1</span>,</div><div class="line">                  target: <span class="keyword">self</span>,</div><div class="line">                  selector: #selector(<span class="keyword">self</span>.run),</div><div class="line">                  userInfo: <span class="literal">nil</span>,</div><div class="line">                  repeats: <span class="literal">true</span>)</div><div class="line"></div><div class="line"><span class="type">RunLoop</span>.current.add(timer, forMode: .defaultRunLoopMode)</div><div class="line"></div><div class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> scheduledTimer = <span class="type">Timer</span>.scheduledTimer(timeInterval: <span class="number">1</span>,</div><div class="line">                                 target: <span class="keyword">self</span>,</div><div class="line">                                 selector: #selector(<span class="keyword">self</span>.run),</div><div class="line">                                 userInfo: <span class="literal">nil</span>,</div><div class="line">                                 repeats: <span class="literal">true</span>)</div></pre></td></tr></table></figure>
<p>现在新建一个项目，添加一个 <code>TextView</code>，你的 ViewController 文件应该是这样：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> num = <span class="number">0</span></div><div class="line">    </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        <span class="keyword">let</span> timer = <span class="type">Timer</span>(timeInterval: <span class="number">1</span>,</div><div class="line">                          target: <span class="keyword">self</span>,</div><div class="line">                          selector: #selector(<span class="keyword">self</span>.run),</div><div class="line">                          userInfo: <span class="literal">nil</span>,</div><div class="line">                          repeats: <span class="literal">true</span>)</div><div class="line">        <span class="type">RunLoop</span>.current.add(timer, forMode: .defaultRunLoopMode)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</div><div class="line">        num += <span class="number">1</span></div><div class="line">        <span class="built_in">print</span>(<span class="type">Thread</span>.current ,num)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照直觉，当 App 运行后，控制台会每秒打印一次，<strong>但是当你滚动 <code>TextView</code> 时，会发现打印停止了，<code>TextView</code> 停止滚动时，打印又继续进行。</strong></p>
<p>这是什么原因呢？在学习线程的时候我们知道，主线程的优先级是最高的，主线程也叫做 UI 线程，UI 的变化不允许在子线程进行。因此在 iOS 中，UI 事件的优先级是最高的。</p>
<p>Runloop 也有一样的概念，Runloop 分为几种模式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// App 的默认 Mode，通常主线程是在这个 Mode 下运行</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> defaultRunLoopMode: <span class="type">RunLoopMode</span></div><div class="line"><span class="comment">// 这是一个占位用的Mode，不是一种真正的Mode，用于区分 defaultMode </span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> commonModes: <span class="type">RunLoopMode</span></div><div class="line"><span class="comment">// 界面跟踪 Mode，用于 ScrollView 追踪触摸滑动，保证界面滑动时不受其他 Mode 影响</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">UITrackingRunLoopMode</span>: <span class="type">RunLoopMode</span></div></pre></td></tr></table></figure>
<p>看到这里大家应该可以明白，我们的 timer 是在 <code>defaultRunLoopMode</code> 中，而 <code>TextView</code> 的滚动则处于 <code>UITrackingRunLoopMode</code> 中，因此两者不能同时进行。</p>
<p>这个问题会在什么场景下出现呢？比如你使用定时器做了轮播，当下面的列表滚动时，轮播图停住了。</p>
<p>那么现在将 timer 的 <code>Mode</code> 修改为 <code>commonModes</code> 和 <code>UITrackingRunLoopMode</code> 再试一下，看看会发生什么有趣的事情？</p>
<p><code>commonModes</code> 模式下，<code>run</code> 方法会持续进行，不受 <code>TextView</code> 滚动和静止的影响，<code>UITrackingRunLoopMode</code> 模式下，当 <code>TextView</code> 滚动时，<code>run</code> 方法执行，当 <code>TextView</code> 静止时，<code>run</code> 方法停止执行。</p>
<h3 id="阻塞"><a href="#阻塞" class="headerlink" title="阻塞"></a>阻塞</h3><p>如果看过一些关于 Runloop 的介绍，我们应该知道，每个线程都有 Runloop，主线程默认开启，子线程需手动开启，在上面的例子中，当 Mode 是 <code>commonModes</code> 时，定时器和 UI 滚动同时进行，看起来像是在同时进行，但实际上无论 Runloop Mode 如何变化，它始终是在这条线程上循环往复。</p>
<p>大家都知道，在 iOS 开发中有一条铁律，永远不能阻塞主线程。因此，在主线程的任何 Mode 上，也不能进行耗时操作，现在将 <code>run</code> 方法改成下面这样试下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">run</span><span class="params">()</span></span> &#123;</div><div class="line">    num += <span class="number">1</span></div><div class="line">    <span class="built_in">print</span>(<span class="type">Thread</span>.current ,num)</div><div class="line">    <span class="type">Thread</span>.sleep(forTimeInterval: <span class="number">3</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="应用-Runloop-的思路"><a href="#应用-Runloop-的思路" class="headerlink" title="应用 Runloop 的思路"></a>应用 Runloop 的思路</h2><p>现在我们了解了 Runloop 是怎样运行的，以及运行的几种 Mode，下面我们尝试解决一个实际的问题，<code>TableCell</code> 的内容加载。</p>
<p>在日常的开发中，我们大致会将 <code>TableView</code> 的加载分为两部分处理：</p>
<ol>
<li>将网络请求、缓存读写、数据解析、构造模型等耗时操作放在子线程处理；</li>
<li>模型数组准备完毕，回调主线程刷新 <code>TableView</code>，使用模型数据填充 <code>TableCell</code>；</li>
</ol>
<p>为什么我们大多会这样处理？实际上还是上面的原则：永远不能阻塞主线程。因此，为了 UI 的流畅，我们会想方设法将耗时操作从主线程中剥离，才有了上面的方案。</p>
<p>但是有一点，UI 的操作是必须在主线程中完成的，那么，如果<strong>使用模型数据填充 <code>TableCell</code></strong> 也是一个耗时操作，该怎么办？</p>
<p>比如像下面这种操作：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"rose"</span>, ofType: <span class="string">"jpg"</span>)</div><div class="line"><span class="keyword">let</span> image = <span class="type">UIImage</span>(contentsOfFile: path ?? <span class="string">""</span>) ?? <span class="type">UIImage</span>()</div><div class="line">cell.config(image: image)</div></pre></td></tr></table></figure>
<p>在这个例子中，<code>rose.jpg</code> 是一张很大的图片，每个 <code>TableCell</code> 上有 3 张这样的图片，我们当然可以将图片在子线程中读取完毕后再更新，不过我们需要模拟一个耗时的 UI 操作，因此先这样处理。</p>
<p>大家可以下载代码运行一下，滚动 <code>TableView</code>，FPS 最低会降到 40 以下，这种现象是如何产生的呢？</p>
<p><strong>上面我们讲到过，Runloop 负责渲染屏幕的 UI 和监听触摸事件，手指滑动时，<code>TableView</code> 随之移动，触发屏幕上的 UI 变化，UI 的变化触发 Cell 的复用和渲染，而 Cell 的渲染是一个耗时操作，导致 Runloop 循环一次的时间变长，因此造成 UI 的卡顿。</strong></p>
<p>那么针对这个过程，我们怎样改善呢？既然 Cell 的渲染是耗时操作，那么需要把 Cell 的渲染剥离出来，使其不影响 <code>TableView</code> 的滚动，保证 UI 的流畅后，在合适的时机再执行 Cell 的渲染，总结一下，也就是下面这样的过程：</p>
<ol>
<li>声明一个数组，用来存放渲染 Cell 的代码；</li>
<li>在 <code>cellForRowAtIndexPath</code> 代理中直接返回 Cell；</li>
<li>监听 Runloop 的循环，循环完成，进入休眠后取出数组中的代码执行；</li>
</ol>
<p>数组存放代码大家应该可以理解，也就是一个 Block 的数组，但是 Runloop 如何监听呢？</p>
<h2 id="监听-Runloop"><a href="#监听-Runloop" class="headerlink" title="监听 Runloop"></a>监听 Runloop</h2><p>我们需要知道 Runloop 循环在何时开始，在何时结束，Demo 如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">addRunLoopObServer</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">let</span> block = &#123; (ob: <span class="type">CFRunLoopObserver</span>?, ac: <span class="type">CFRunLoopActivity</span>) <span class="keyword">in</span></div><div class="line">            <span class="keyword">if</span> ac == .entry &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"进入 Runloop"</span>)</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ac == .beforeTimers &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"即将处理 Timer 事件"</span>)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ac == .beforeSources &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"即将处理 Source 事件"</span>)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ac == .beforeWaiting &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"Runloop 即将休眠"</span>)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ac == .afterWaiting &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"Runloop 被唤醒"</span>)</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ac == .exit &#123;</div><div class="line">                <span class="built_in">print</span>(<span class="string">"退出 Runloop"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">let</span> ob = <span class="keyword">try</span> createRunloopObserver(block: block)</div><div class="line"></div><div class="line">        <span class="comment">/// - Parameter rl: 要监听的 Runloop</span></div><div class="line">        <span class="comment">/// - Parameter observer: Runloop 观察者</span></div><div class="line">        <span class="comment">/// - Parameter mode: 要监听的 mode</span></div><div class="line">        <span class="type">CFRunLoopAddObserver</span>(<span class="type">CFRunLoopGetCurrent</span>(), ob, .defaultMode)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> <span class="type">RunloopError</span>.canNotCreate &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"runloop 观察者创建失败"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">createRunloopObserver</span><span class="params">(block: @escaping <span class="params">(CFRunLoopObserver?, CFRunLoopActivity)</span></span></span> -&gt; <span class="type">Void</span>) <span class="keyword">throws</span> -&gt; <span class="type">CFRunLoopObserver</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     *</div><div class="line">     allocator: 分配空间给新的对象。默认情况下使用NULL或者kCFAllocatorDefault。</div><div class="line"></div><div class="line">     activities: 设置Runloop的运行阶段的标志，当运行到此阶段时，CFRunLoopObserver会被调用。</div><div class="line"></div><div class="line">         public struct CFRunLoopActivity : OptionSet &#123;</div><div class="line">             public init(rawValue: CFOptionFlags)</div><div class="line">             public static var entry             //进入工作</div><div class="line">             public static var beforeTimers      //即将处理Timers事件</div><div class="line">             public static var beforeSources     //即将处理Source事件</div><div class="line">             public static var beforeWaiting     //即将休眠</div><div class="line">             public static var afterWaiting      //被唤醒</div><div class="line">             public static var exit              //退出RunLoop</div><div class="line">             public static var allActivities     //监听所有事件</div><div class="line">         &#125;</div><div class="line"></div><div class="line">     repeats: CFRunLoopObserver是否循环调用</div><div class="line"></div><div class="line">     order: CFRunLoopObserver的优先级，正常情况下使用0。</div><div class="line"></div><div class="line">     block: 这个block有两个参数：observer：正在运行的run loop observe。activity：runloop当前的运行阶段。返回值：新的CFRunLoopObserver对象。</div><div class="line">     */</div><div class="line">    <span class="keyword">let</span> ob = <span class="type">CFRunLoopObserverCreateWithHandler</span>(kCFAllocatorDefault, <span class="type">CFRunLoopActivity</span>.allActivities.rawValue, <span class="literal">true</span>, <span class="number">0</span>, block)</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> observer = ob <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="type">RunloopError</span>.canNotCreate</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> observer</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="利用-Runloop-休眠"><a href="#利用-Runloop-休眠" class="headerlink" title="利用 Runloop 休眠"></a>利用 Runloop 休眠</h2><p>根据上面的 Demo，我们可以监听到 Runloop 的开始和结束了，现在在控制器中加入一个 <code>TableView</code>，和一个 Runloop 的观察者，你的控制器现在应该是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">        </div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.viewDidLoad()</div><div class="line">        addRunloopObserver()</div><div class="line">        view.addSubview(tableView)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fileprivate <span class="function"><span class="keyword">func</span> <span class="title">addRunloopObserver</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 获取当前的 Runloop</span></div><div class="line">        <span class="keyword">let</span> runloop = <span class="type">CFRunLoopGetCurrent</span>()</div><div class="line">        <span class="comment">// 需要监听 Runloop 的哪个状态</span></div><div class="line">        <span class="keyword">let</span> activities = <span class="type">CFRunLoopActivity</span>.beforeWaiting.rawValue</div><div class="line">        <span class="comment">// 创建 Runloop 观察者</span></div><div class="line">        <span class="keyword">let</span> observer = <span class="type">CFRunLoopObserverCreateWithHandler</span>(<span class="literal">nil</span>, activities, <span class="literal">true</span>, <span class="type">Int</span>.<span class="built_in">max</span> - <span class="number">999</span>, runLoopBeforeWaitingCallBack)</div><div class="line">        <span class="comment">// 注册 Runloop 观察者</span></div><div class="line">        <span class="type">CFRunLoopAddObserver</span>(runloop, observer, .defaultMode)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fileprivate <span class="keyword">let</span> runLoopBeforeWaitingCallBack = &#123; (ob: <span class="type">CFRunLoopObserver</span>?, ac: <span class="type">CFRunLoopActivity</span>) <span class="keyword">in</span></div><div class="line">        <span class="built_in">print</span>(<span class="string">"runloop 循环完毕"</span>)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fileprivate <span class="built_in">lazy</span> <span class="keyword">var</span> tableView: <span class="type">UITableView</span> = &#123;</div><div class="line">        <span class="keyword">let</span> table = <span class="type">UITableView</span>(frame: <span class="keyword">self</span>.view.frame)</div><div class="line">        table.delegate = <span class="keyword">self</span></div><div class="line">        table.dataSource = <span class="keyword">self</span></div><div class="line">        table.register(<span class="type">TableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">"tableViewCell"</span>)</div><div class="line">        <span class="keyword">return</span> table</div><div class="line">    &#125;()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在运行起来，打印信息如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">runloop 循环完毕</div><div class="line">runloop 循环完毕</div><div class="line">runloop 循环完毕</div><div class="line">runloop 循环完毕</div></pre></td></tr></table></figure>
<p>从这里我们看到，从控制器的 <code>viewDidLoad</code> 开始，经过几次 Runloop，<code>TableView</code> 成功在屏幕出现，然后进入休眠，当我们滑动屏幕或者触发陀螺仪、耳机等事件发生时，Runloop 进入工作，处理完毕后再次进入休眠。</p>
<p><strong>而我们的目的是利用 Runloop 的休眠时间，在用户没有产生事件的时候，可以处理 Cell 的渲染任务。本文的开头我们提到 Runloop 负责的事情，触摸和网络等事件一般是由用户触发，且执行完 Runloop 会再次进入休眠，那么合适的的事件，也就是时钟了。</strong></p>
<p>因此我们监听了 <code>defaultMode</code>，并需要在观察者的回调中启动一个时钟事件，让 Runloop 始终保持在活动状态，但是这个时钟也不需要它执行什么事情，所以我开启了一个 <code>CADisplayLink</code>，用来显示 FPS。不了解 <code>CADisplayLink</code> 的同学，将它想象为一个大约 1/60 秒执行一次的定时器就可以了，执行的动作是输出一个数字。</p>
<h2 id="实现-Runloop-应用"><a href="#实现-Runloop-应用" class="headerlink" title="实现 Runloop 应用"></a>实现 Runloop 应用</h2><p>首先我们声明几个变量：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 是否使用 Runloop 优化</span></div><div class="line">fileprivate <span class="keyword">let</span> useRunloop: <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line"></div><div class="line"><span class="comment">/// cell 的高度</span></div><div class="line">fileprivate <span class="keyword">let</span> rowHeight: <span class="type">CGFloat</span> = <span class="number">120</span></div><div class="line"></div><div class="line"><span class="comment">/// runloop 空闲时执行的代码</span></div><div class="line">fileprivate <span class="keyword">var</span> runloopBlockArr: [<span class="type">RunloopBlock</span>] = [<span class="type">RunloopBlock</span>]()</div><div class="line"></div><div class="line"><span class="comment">/// runloopBlockArr 中的最大任务数</span></div><div class="line">fileprivate <span class="keyword">var</span> maxQueueLength: <span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="type">Int</span>(<span class="type">UIScreen</span>.main.bounds.height / rowHeight) + <span class="number">2</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 <code>addRunloopObserver</code> 方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 注册 Runloop 观察者</span></div><div class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">addRunloopObserver</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 获取当前的 Runloop</span></div><div class="line">    <span class="keyword">let</span> runloop = <span class="type">CFRunLoopGetCurrent</span>()</div><div class="line">    <span class="comment">// 需要监听 Runloop 的哪个状态</span></div><div class="line">    <span class="keyword">let</span> activities = <span class="type">CFRunLoopActivity</span>.beforeWaiting.rawValue</div><div class="line">    <span class="comment">// 创建 Runloop 观察者</span></div><div class="line">    <span class="keyword">let</span> observer = <span class="type">CFRunLoopObserverCreateWithHandler</span>(<span class="literal">nil</span>, activities, <span class="literal">true</span>, <span class="number">0</span>) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] (ob, ac) <span class="keyword">in</span></div><div class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> `<span class="keyword">self</span>` = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="keyword">guard</span> <span class="keyword">self</span>.runloopBlockArr.<span class="built_in">count</span> != <span class="number">0</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">        <span class="comment">// 是否退出任务组</span></div><div class="line">        <span class="keyword">var</span> quit = <span class="literal">false</span></div><div class="line">        <span class="comment">// 如果不退出且任务组中有任务存在</span></div><div class="line">        <span class="keyword">while</span> quit == <span class="literal">false</span> &amp;&amp; <span class="keyword">self</span>.runloopBlockArr.<span class="built_in">count</span> &gt; <span class="number">0</span> &#123;</div><div class="line">            <span class="comment">// 执行任务</span></div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> block = <span class="keyword">self</span>.runloopBlockArr.first <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</div><div class="line">            <span class="comment">// 是否退出任务组</span></div><div class="line">            quit = block()</div><div class="line">            <span class="comment">// 删除已完成的任务</span></div><div class="line">            <span class="keyword">let</span> <span class="number">_</span> = <span class="keyword">self</span>.runloopBlockArr.removeFirst()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 注册 Runloop 观察者</span></div><div class="line">    <span class="type">CFRunLoopAddObserver</span>(runloop, observer, .defaultMode)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建 <code>addRunloopBlock</code> 方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 添加代码块到数组，在 Runloop BeforeWaiting 时执行</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - Parameter block: &lt;#block description#&gt;</span></div><div class="line">fileprivate <span class="function"><span class="keyword">func</span> <span class="title">addRunloopBlock</span><span class="params">(block: @escaping RunloopBlock)</span></span> &#123;</div><div class="line">    runloopBlockArr.append(block)</div><div class="line">    <span class="comment">// 快速滚动时，没有来得及显示的 cell 不会进行渲染，只渲染屏幕中出现的 cell</span></div><div class="line">    <span class="keyword">if</span> runloopBlockArr.<span class="built_in">count</span> &gt; maxQueueLength &#123;</div><div class="line">       <span class="keyword">let</span> <span class="number">_</span> = runloopBlockArr.removeFirst()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后将渲染 cell 的 Block 丢进 <code>runloopBlockArr</code>:</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">if</span> useRunloop &#123;</div><div class="line">        <span class="keyword">return</span> loadCellWithRunloop()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> loadCell()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">loadCellWithRunloop</span><span class="params">()</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"tableViewCell"</span>) <span class="keyword">as</span>? <span class="type">TableViewCell</span> <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="type">UITableViewCell</span>()</div><div class="line">    &#125;</div><div class="line">    addRunloopBlock &#123; () -&gt; (<span class="type">Bool</span>) <span class="keyword">in</span></div><div class="line">        <span class="keyword">let</span> path = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"rose"</span>, ofType: <span class="string">"jpg"</span>)</div><div class="line">        <span class="keyword">let</span> image = <span class="type">UIImage</span>(contentsOfFile: path ?? <span class="string">""</span>) ?? <span class="type">UIImage</span>()</div><div class="line">        cell.config(image: image)</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> cell</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h2><p><a href="https://github.com/tianziyao/Runloop" target="_blank" rel="external">https://github.com/tianziyao/Runloop</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于 Runloop，这篇文章写的非常棒，&lt;a href=&quot;https://blog.ibireme.com/2015/05/18/runloop/&quot;&gt;深入理解RunLoop&lt;/a&gt;。我写这篇文章在深度上是不如它的，但是为什么还想写一下呢？&lt;/p&gt;
&lt;p&gt;Runloop 是一个偏门的东西，在我的工作经历中，几乎没有使用到它的地方，在我当时学习它时，因为本身对 iOS 整个生态了解不够，很多概念让我非常头疼。&lt;/p&gt;
&lt;p&gt;因此这篇文章我希望可以换一下因果关系，先不要管 Runloop 是什么，让我们从需求入手，看看 Runloop 能做什么，当你实现过一次之后，回头看这些高屋建瓴的文章，可能会更有启发性。&lt;/p&gt;
&lt;p&gt;本文涉及的代码托管在：&lt;a href=&quot;https://github.com/tianziyao/Runloop&quot;&gt;https://github.com/tianziyao/Runloop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先先记下 Runloop 负责做什么事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证程序不退出；&lt;/li&gt;
&lt;li&gt;负责监听事件，如触摸事件，计时器事件，网络事件等；&lt;/li&gt;
&lt;li&gt;负责渲染屏幕上所有的 UI，一次 Runloop 循环，需要渲染屏幕上所有变化的像素点；&lt;/li&gt;
&lt;li&gt;节省 CPU 的开销，让程序该工作时工作，改休息时休息；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;保证程序不退出和监听应该比较容易理解，用伪代码来表示，大致是这样：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 退出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; exit = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; event: &lt;span class=&quot;type&quot;&gt;UIEvent&lt;/span&gt;? = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 事件队列&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; events: [&lt;span class=&quot;type&quot;&gt;UIEvent&lt;/span&gt;] = [&lt;span class=&quot;type&quot;&gt;UIEvent&lt;/span&gt;]()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 事件分发/响应链&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(event: UIEvent)&lt;/span&gt;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;type&quot;&gt;Bool&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 主线程 Runloop&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;repeat&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 出现新的事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; event != &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将事件加入队列&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        events.append(event!)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 如果队列中有事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; events.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 处理队列中第一个事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = handle(event: events.first!)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 处理完成移除第一个事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; result &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            events.removeFirst()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 再次进入发现事件-&amp;gt;添加到队列-&amp;gt;事件分发-&amp;gt;处理事件-&amp;gt;移除事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 直到 exit=true，主线程退出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; exit == &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;负责渲染屏幕上所有的 UI，也就是在一次 Runloop 中，事件引起了 UI 的变化，再通过像素点的重绘表现出来。&lt;/p&gt;
&lt;p&gt;上面讲到的，全部是 Runloop 在系统层面的用处，那么在应用层面，Runloop 能做什么，以及应用在什么地方呢？首先我们从一个计时器开始。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Runloop" scheme="http://yoursite.com/tags/Runloop/"/>
    
  </entry>
  
  <entry>
    <title>架构 - 注册、登录和 token 的安全之道</title>
    <link href="http://yoursite.com/2017/08/26/%E6%9E%B6%E6%9E%84%20-%20%E6%B3%A8%E5%86%8C%E3%80%81%E7%99%BB%E5%BD%95%E5%92%8C-token-%E7%9A%84%E5%AE%89%E5%85%A8%E4%B9%8B%E9%81%93/"/>
    <id>http://yoursite.com/2017/08/26/架构 - 注册、登录和-token-的安全之道/</id>
    <published>2017-08-25T17:21:00.000Z</published>
    <updated>2017-10-28T07:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近想要做一个小项目，由于前后都是一个人，在登录和注册的接口上就被卡住了，因此想登录、注册、口令之间的关系，使用 PHP 实现登录注册模块，和访问口令。</p>
<p>出于安全的考虑，首先定下三项原则：</p>
<ol>
<li>在传输中，不允许明文传输用户隐私数据；</li>
<li>在本地，不允许明文保存用户隐私数据；</li>
<li>在服务器，不允许明文保存用户隐私数据；</li>
</ol>
<p>在网络来说，我们知道不论 POST 请求和 GET 请求都会被抓包，在没有使用 HTTPS 的情况下，抓包我们是防不住的，如果明文传输用户隐私，那后果就不说了。</p>
<p>本地和服务器也是如此，比如 iOS 设备，如果存储在本地，越狱之后通过设备 Finder 之类的功能，也能轻易找到我们存储在本地的用户隐私。</p>
<blockquote>
<p>使用 Keychain 在本地也有保存，但不在沙盒，暂且忽略。</p>
</blockquote>
<p>上面讲到，用户隐私数据总归可以被拿到的，如何保证被拿到之后不会被用来做坏事？</p>
<a id="more"></a>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>将用户的隐私数据加密，那么就算被拿到，也无法被拿来使用。在这里呢，我们先不谈加密，而是先纠正一个误区，有些朋友会认为 Base64 可以加密，甚至有 Base64 加密的说法。</p>
<p>Base64 主要不是加密，它主要的用途是把二进制数据序列转化为 ASCII 字符序列，用以数据传输。二进制数据是什么呢？计算机上存储的所有数据，都是二进制数据。</p>
<p>Base64 最常见的应用场景是 URL，因为 URL 只能是特定的一些 ASCII 字符。这时需要用到 Base64 编码，当然这也只是对二进制数据本身的编码，编码后的数据里面可能包含 <code>+/=</code> 等符号，真正放到 URL 里面时候，还需要URL-Encoding，变成 <code>%XX</code> 模式，以消除这些符号的歧义。其次就是将图片转为 Base64 的字符串。</p>
<p><strong>因此，Base64 只是一种编码方式，而不是加密方式。</strong></p>
<p>好了，现在回到我们的主题，先说登录和注册之间的关系，这 3 个模块需要做什么事情呢？</p>
<ul>
<li>注册：将用户输入的隐私数据，发送给服务器，服务器进行保存；</li>
<li>登录：将用户输入的隐私数据，发送给服务器，服务器进行比对，确认是否有权限登录；</li>
<li>token：确保用户在登录中；</li>
</ul>
<p>我们把用户输入的隐私数据再具象一些，比如账号和密码，结合我们上面提到的安全原则，那么分解开来，实际我们要做以下几件事：</p>
<ul>
<li>服务器-注册接口：接收客户端传来的账号和密码，将其保存在数据库中；</li>
<li>服务器-登录接口：接收客户端传来的账号和密码，与数据库比对，完全命中则登录成功，否则登录失败；<ul>
<li>登录成功后，生成或更新 token 和过期时间，保存在数据库， token 返回给客户端；</li>
<li>服务器定期清除 token；</li>
</ul>
</li>
<li>客户端-注册模块：向服务器注册接口发送账号和密码；</li>
<li>客户端-登录模块：向服务器登录接口发送账号和密码；<ul>
<li>登录成功后，保存 token 到本地；</li>
<li>退出登录后，清除 token；</li>
</ul>
</li>
<li>发送的账号和密码需要加密；</li>
<li>数据库中需要保存的是加密后的账号和密码；</li>
<li>请求敏感数据时，将客户端传来的 token 和服务器验证，不通过则提示客户端登录；</li>
</ul>
<p>上面逻辑理清楚后，相信对于大家来说并不难实现，以下是服务器注册接口做的事情：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取 get 请求传递的参数*/</span></div><div class="line">$account = $_GET[<span class="string">'account'</span>];</div><div class="line">$password = $_GET[<span class="string">'password'</span>];</div><div class="line"></div><div class="line"><span class="comment">/*创建数据连接*/</span></div><div class="line">$db = <span class="keyword">new</span> DataBase();</div><div class="line"></div><div class="line"><span class="comment">/*检查用户名是否存在*/</span></div><div class="line">$is_exist = $db-&gt;check_user_exist($account);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($is_exist) &#123;</div><div class="line">    <span class="keyword">echo</span> return_value(<span class="number">10001</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">/*检查用户名是否添加成功*/</span></div><div class="line">    $result = $db-&gt;add_user($account, $password);</div><div class="line">    <span class="keyword">if</span> ($result) &#123;</div><div class="line">        <span class="keyword">echo</span> return_value(<span class="number">0</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> return_value(<span class="number">20001</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在是服务器登录接口做的事情：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取 get 请求传递的参数*/</span></div><div class="line">$account = $_GET[<span class="string">'account'</span>];</div><div class="line">$password = $_GET[<span class="string">'password'</span>];</div><div class="line"></div><div class="line"><span class="comment">/*创建数据连接*/</span></div><div class="line">$db = <span class="keyword">new</span> DataBase();</div><div class="line"></div><div class="line"><span class="comment">/*是否命中用户名和密码*/</span></div><div class="line">$should_login = $db-&gt;should_login($account, $password);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($should_login) &#123;</div><div class="line">    <span class="comment">/*更新 token*/</span></div><div class="line">    $token = $db-&gt;insert_token($account);</div><div class="line">    <span class="keyword">if</span> ($token == <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">echo</span> response(<span class="number">40001</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        $data = [<span class="string">'token'</span> =&gt; $token];</div><div class="line">        <span class="keyword">echo</span> response(<span class="number">0</span>, $data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">echo</span> response(<span class="number">30001</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>剩下的无非是加密算法的不同，我最常用的是 md5，那么我们经过 md5 加密以后，其实还是不太安全，为什么呢？因为 md5 本身就不安全。虽然 md5 是不可逆的 hash 算法，反向算出来虽然困难，但是如果反向查询，密码设置的简单，也很容易被攻破。</p>
<p>比如我们使用 md5 加密一个密码 <code>123456</code>，对应的 md5 是 <code>e10adc3949ba59abbe56e057f20f883e</code>，找到一个 md5 解密的网站，比如 <a href="http://cmd5.com/，很容易就被破解了密码，怎么办呢？" target="_blank" rel="external">http://cmd5.com/，很容易就被破解了密码，怎么办呢？</a></p>
<h2 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h2><p>工作一段时间的同学对这个名词应该不会陌生，这种方式算是给用户的隐私数据加上密了，其实就是一段隐私数据加一段乱码再进行 md5，用代码表示大致是这样：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 伪代码</div><div class="line">salt = <span class="string">'#^&amp;%**(^&amp;(&amp;*)_)_(*&amp;^&amp;#$%GVHKBJ(*^&amp;*%^%&amp;^&amp;'</span></div><div class="line">password = <span class="string">'123456'</span></div><div class="line">post_body = salt + password</div><div class="line"><span class="keyword">print</span> post_body.md5()</div><div class="line">// ffb34d898f6573a1cf14fdc34d3343c0</div></pre></td></tr></table></figure>
<p>现在，密码看起来挺靠谱的了，但是，我们知道加盐这种方式是比较早期的处理方式了，既然现在没有在大范围使用了，就说明单纯加盐还是存在缺陷的。</p>
<h3 id="有泄露的可能"><a href="#有泄露的可能" class="headerlink" title="有泄露的可能"></a>有泄露的可能</h3><p>现在我们在客户端对密码做了 md5 加盐，服务器保存的也是加密后的内容，但是，盐是写在了客户端的源代码中，一旦对源代码进行反编译，找到 <code>salt</code> 这个字符串，那么加盐的做法也就形同虚设了。</p>
<p>反编译源代码的代价也很高，一般对于安全性能要求不高的话，也够用了，但是，对于一些涉及资金之类的 App  来说，仅仅加盐还是不够的。</p>
<p>比如离职的技术同学不是很开心，又或者有人想花钱买这串字符等等，盐一旦被泄露，就是一场灾难，这也是盐最大的缺陷。</p>
<h3 id="依赖性太强"><a href="#依赖性太强" class="headerlink" title="依赖性太强"></a>依赖性太强</h3><p>盐一旦被设定，那么再做修改的话就非常困难了，因为服务器存储的全部是加盐后的数据，如果换盐，那么这些数据全部都需要改动。<strong>但是可怕的不在于此，如果将服务器的数据改动后，旧版本的用户再访问又都不可以了，因为他们用的是之前的盐。</strong></p>
<h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p>目前最常见的方式，应该就是 HMAC 了，HMAC 算法主要应用于身份验证，与加盐的不同点在于，盐被移到了服务器，服务器返回什么，就用什么作为盐。</p>
<p>这么做有什么好处呢？ 如果我们在登录的过程中，黑客截获了我们发送的数据，他也只能得到 HMAC 加密过后的结果，由于不知道密钥，根本不可能获取到用户密码，从而保证了安全性。</p>
<p>但是还有一个问题，前面我们讲到，<strong>盐被获取以后很危险，如果从服务器获取盐，也会被抓包，那还不如写在源代码里面呢，至少被反编译还困难点，那如果解决这个隐患呢</strong>？</p>
<p>那就是，在用户注册时就生成和获取这个秘钥，以代码示例：</p>
<p>现在我们发送一个请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET http://localhost:8888/capsule/register.php?account=joy&amp;password=789</div></pre></td></tr></table></figure>
<p>服务器收到请求后，做了下面的事情：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取 get 请求传递的参数*/</span></div><div class="line">$account = $_GET[<span class="string">'account'</span>];</div><div class="line">$password = $_GET[<span class="string">'password'</span>];  <span class="comment">//123456</span></div><div class="line"></div><div class="line"><span class="comment">/*创建数据连接*/</span></div><div class="line">$db = <span class="keyword">new</span> DataBase();</div><div class="line"></div><div class="line"><span class="comment">/*制作一个随机的盐*/</span></div><div class="line">$salt = salt();</div><div class="line"></div><div class="line"><span class="comment">/*检查用户名是否存在*/</span></div><div class="line">$is_exist = $db-&gt;check_user_exist($account);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($is_exist) &#123;</div><div class="line">    <span class="keyword">echo</span> response(<span class="number">10001</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">    <span class="comment">/*将密码进行 hmac 加密*/</span></div><div class="line">    $password = str_hmac($password,  $salt);</div><div class="line"></div><div class="line">    <span class="comment">/*检查用户名是否添加成功*/</span></div><div class="line">    $result = $db-&gt;add_user($account, $password);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($result) &#123;</div><div class="line">        $data = [<span class="string">'salt'</span>=&gt;$salt];</div><div class="line">        <span class="keyword">echo</span> response(<span class="number">0</span>, $data);</div><div class="line">        <span class="comment">//echo response(0, true);</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> response(<span class="number">20001</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务器现在保存的是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">account: joy</div><div class="line">password: 05575c24576</div></pre></td></tr></table></figure>
<p>客户端拿到的结果是：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"rc"</span>: <span class="number">0</span>,</div><div class="line">  <span class="attr">"data"</span>: &#123;</div><div class="line">    <span class="attr">"salt"</span>: <span class="string">"5633905fdc65b6c57be8698b1f0e884948c05d7f"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"errorInfo"</span>: <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么客户端接下来应该做什么呢？把 <code>salt</code> 做本地的持久化，登录时将用户输入的密码做一次同样的 hmac，那么就能通过服务器的 <code>password: 05575c24576</code> 校验了，发起登录请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GET http://localhost:8888/capsule/login.php?account=joy&amp;password=789 </div><div class="line">// fail</div><div class="line">GET http://localhost:8888/capsule/login.php?account=joy&amp;password=05575c24576 </div><div class="line">// success</div></pre></td></tr></table></figure>
<p>现在我们解决了依赖性太强的问题，盐我们可以随意的更改，甚至可以是随机的，每个用户都不一样。这样单个用户的安全性虽然没有加强，但是整个平台的安全性缺大大提升了，很少有人会针对一个用户搞事情。但是细心的同学应该可以想到，现在的盐，也就是秘钥是保存在本地的，如果用户的秘钥丢失，比如换手机了，那么岂不是<strong>有正确的密码，也无法登陆了吗</strong>？</p>
<p>针对这个问题，核心就是用户没有了秘钥，那么在用户登陆的时候，逻辑就需要变一下。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 伪代码</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">login</span><span class="params">(account, password)</span></span> &#123;</div><div class="line">    <span class="comment">//如果有盐</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> salt = getSalt() &#123;</div><div class="line">        <span class="comment">//将密码进行 hmac，请求登陆接口</span></div><div class="line">        network.login(account, password.hmac(salt))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//请求 getSalt 接口，请求参数为账户+应用标识</span></div><div class="line">        network.getSalt(account + bundleId, &#123; salt <span class="keyword">in</span></div><div class="line">            <span class="comment">//将盐保存在本地，再次调用自身。</span></div><div class="line">            savaSalt(salt)</div><div class="line">            login(account, password)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么可想而知，我们的注册接口现在也需要新加一个 <code>bundleId</code> 的请求参数，然后用 <code>account + bundleId</code> 作为 key，来保存 <code>salt</code>：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取 get 请求传递的参数*/</span></div><div class="line">$account = $_GET[<span class="string">'account'</span>];</div><div class="line">$password = $_GET[<span class="string">'password'</span>];  <span class="comment">//123456</span></div><div class="line">$bundle_id = $_GET[<span class="string">'bundleId'</span>];</div><div class="line"></div><div class="line"><span class="comment">/*创建数据连接*/</span></div><div class="line">$db = <span class="keyword">new</span> DataBase();</div><div class="line"></div><div class="line"><span class="comment">/*制作一个随机的盐*/</span></div><div class="line">$salt = salt();</div><div class="line"></div><div class="line"><span class="comment">/*检查用户名是否存在*/</span></div><div class="line">$is_exist = $db-&gt;check_user_exist($account);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($is_exist) &#123;</div><div class="line">    <span class="keyword">echo</span> response(<span class="number">10001</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">/*将密码进行 hmac 加密*/</span></div><div class="line">    $password = str_hmac($password,  $salt);</div><div class="line"></div><div class="line">    <span class="comment">/*检查用户名是否添加成功*/</span></div><div class="line">    $result = $db-&gt;add_user($account, $password);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ($result) &#123;</div><div class="line"></div><div class="line">        <span class="comment">/*检查秘钥是否保存成功*/</span></div><div class="line">        $save_salt = $db-&gt;save_salt($salt, $account, $bundle_id);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ($save_salt) &#123;</div><div class="line">            $data = [<span class="string">'salt'</span>=&gt;$salt];</div><div class="line">            <span class="keyword">echo</span> response(<span class="number">0</span>, $data);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">echo</span> response(<span class="number">20001</span>, <span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">echo</span> response(<span class="number">20001</span>, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时我们需要创建一个获取 <code>salt</code> 的接口：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*获取 get 请求传递的参数*/</span></div><div class="line">$account = $_GET[<span class="string">'account'</span>];</div><div class="line">$bundle_id = $_GET[<span class="string">'bundleId'</span>];</div><div class="line"></div><div class="line"><span class="comment">/*创建数据连接*/</span></div><div class="line">$db = <span class="keyword">new</span> DataBase();</div><div class="line"></div><div class="line"><span class="comment">/*获取秘钥*/</span></div><div class="line">$salt = $db-&gt;get_salt($account, $bundle_id);</div><div class="line"></div><div class="line"><span class="keyword">if</span> ($salt == <span class="string">''</span>) &#123;</div><div class="line">    <span class="keyword">echo</span> response(<span class="number">40001</span>, <span class="keyword">false</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">    $data = [<span class="string">'salt'</span>=&gt;$salt];</div><div class="line">    <span class="keyword">echo</span> response(<span class="number">0</span>, $data);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写到这里，就可以给大家介绍一个比较好玩的东西了。</p>
<h3 id="设备锁"><a href="#设备锁" class="headerlink" title="设备锁"></a>设备锁</h3><p>一些 App 具有设备锁的功能，比如 QQ，这个功能是将账号与设备进行绑定，如果其他人知道了用户的账号和密码，但是设备不符，同样无法登录，怎样实现呢？</p>
<p>就是用户开启设备锁之后，如果设备中没有 <code>salt</code>，那么就不再请求 <code>getSalt</code> 接口，而是转为其他验证方式，通过之后，才可以请求 <code>getSalt</code>。</p>
<h3 id="提升单个用户的安全性"><a href="#提升单个用户的安全性" class="headerlink" title="提升单个用户的安全性"></a>提升单个用户的安全性</h3><p>现在这个 App 相对来说比较安全了，上面说到，因为每个用户的 <code>salt</code> 都不一样，破解单个用户的利益不大，所以，对于平台来说安全性已经比较高了，但凡是都有例外，如果这个破坏者就是铁了心要搞事情，就针对一个用户，现在这个方案，还有哪些问题存在呢？</p>
<ol>
<li>注册时返回的 <code>salt</code> 被抓包时有可能会泄露；</li>
<li>更换设备后，获取的 <code>salt</code> 被抓包时有可能会泄露；</li>
<li>保存在本地的 <code>salt</code> ，有可能通过文件路径获取到；</li>
<li><p>抓包的人就算不知道密码，通过 hmac 加密后的字符，也可以进行登录；</p>
<p>怎么处理呢？首先我们需要清楚的是，之所以会被破解，是拿到了我们加密时的因子，或者叫种子，这个种子服务器和客户端都必须要有，如果没有的话，两者就无法进行通信了，但是我们也不能在客户端将种子写死，在服务器给客户端种子时，总会有可能被获取。</p>
</li>
</ol>
<p>我们要设计一种思路，需要有一个种子，服务器和客户端之间无需通讯，但是都可以被理解的种子。</p>
<p>同时我们需要这个种子是动态的，每次加密的结果都不一样，那么就算抓到了加密后的密码，这个密码也随之失效了。</p>
<p><strong>所以，我们需要一个无需服务器和客户端通讯的，动态的种子，时间。</strong></p>
<h2 id="HMAC-时间"><a href="#HMAC-时间" class="headerlink" title="HMAC+时间"></a>HMAC+时间</h2><p>这个动态的种子是如何使用的呢？</p>
<ol>
<li>客户端发送注册请求，服务器返回 <code>salt</code>，保存 hmac 后的密码；</li>
<li>客户端保存 <code>salt</code>；</li>
<li>客户端发送登录请求，参数为 hmac 后的密码，加上当前的时间；</li>
<li>服务器收到登录请求，将数据库中的密码，加上当前的时间，进行比对；</li>
</ol>
<p>客户端代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 秘钥</span></div><div class="line"><span class="keyword">const</span> salt = <span class="string">''</span></div><div class="line"><span class="comment">// 当前时间，精确到分钟</span></div><div class="line"><span class="keyword">const</span> currentTime = <span class="string">'201709171204'</span></div><div class="line"><span class="comment">// 用户输入的密码</span></div><div class="line"><span class="keyword">let</span> password = <span class="string">'123456'</span></div><div class="line"><span class="comment">// (hmac+currentTime).md5</span></div><div class="line">password = (password.hmac(salt) + currentTime).md5()</div><div class="line">network(<span class="string">'login'</span>, &#123;method: <span class="string">'GET'</span>, params: &#123;password:password&#125;&#125;)</div></pre></td></tr></table></figure>
<p>服务器代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">should_login</span><span class="params">($account, $password)</span></span></div><div class="line">&#123;</div><div class="line">    $account = mysqli_real_escape_string(<span class="keyword">$this</span>-&gt;connection ,$account);</div><div class="line">    $password = mysqli_real_escape_string(<span class="keyword">$this</span>-&gt;connection, $password);</div><div class="line">    $user = <span class="keyword">$this</span>-&gt;get_user($account);</div><div class="line">    <span class="keyword">if</span> ($user == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    $password_local = $user[<span class="string">'password'</span>];</div><div class="line">    <span class="keyword">if</span> ($password_local == <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    $password_local = md5($password_local.current_time());</div><div class="line">    <span class="keyword">if</span> ($password_local == $password) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是现在还有一点问题，那就是对时间的容错上，如果客户端发送的时候是 <code>201709171204</code>，服务器响应时却已经到了 <code>201709171205</code> 了，那么这样势必是不能通过的，这种情况，只需要服务器把当前的时间减去一分钟，再校验一次，符合其中之一就可以。</p>
<p>聪明的你应该可以想到，这也就是<strong>验证码 5 分钟内有效期的实现</strong>。</p>
<p>现在这个 App，就算注册时拿到了 <code>salt</code>，也很难在 1 分钟内反推出密码，同时，抓包的密码一分钟后也就失效了，对于单个用户的安全性，也有了进一步的提升。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近想要做一个小项目，由于前后都是一个人，在登录和注册的接口上就被卡住了，因此想登录、注册、口令之间的关系，使用 PHP 实现登录注册模块，和访问口令。&lt;/p&gt;
&lt;p&gt;出于安全的考虑，首先定下三项原则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在传输中，不允许明文传输用户隐私数据；&lt;/li&gt;
&lt;li&gt;在本地，不允许明文保存用户隐私数据；&lt;/li&gt;
&lt;li&gt;在服务器，不允许明文保存用户隐私数据；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在网络来说，我们知道不论 POST 请求和 GET 请求都会被抓包，在没有使用 HTTPS 的情况下，抓包我们是防不住的，如果明文传输用户隐私，那后果就不说了。&lt;/p&gt;
&lt;p&gt;本地和服务器也是如此，比如 iOS 设备，如果存储在本地，越狱之后通过设备 Finder 之类的功能，也能轻易找到我们存储在本地的用户隐私。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Keychain 在本地也有保存，但不在沙盒，暂且忽略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面讲到，用户隐私数据总归可以被拿到的，如何保证被拿到之后不会被用来做坏事？&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="http://yoursite.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Swift - Mirror反射</title>
    <link href="http://yoursite.com/2017/07/18/%10Swift%20-%20Mirror%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2017/07/18/Swift - Mirror反射/</id>
    <published>2017-07-17T18:46:00.000Z</published>
    <updated>2017-07-18T12:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常能听到映射和反射，那么它们代表的含义是什么呢？</p>
<p>映射只是一种概念，通常是用代码方式来表示一个比较复杂的意义。例如访问网站时 404 错误的含义是“找不到当前页”，500错误是“服务器内部错误”。那么我们会把这些错误的原因和一些固定的数字对应起来，这就是一种映射。</p>
<p>体现在程序里，映射用的比较多的地方就是和数据库打交道。我们通常会期望不直接操作数据库而对数据库做出一些改变。那么我们会声明一个类去对应数据库的一张数据表。</p>
<p>例如有一张学生表，有学号和姓名两个字段。我们可以在代码里建一个学生类，下面有学号和姓名两个属性，通过一定的技术可以把这个类和那张学生表对应起来，可以实现在操作这个类的时候，却去改变那张表的数据的效果，我们可以称这是一种映射。</p>
<p>熟悉 C#、Java 的朋友应该不难理解反射的，反射是一种技术，很多高级语言都有这种技术。具体作用就是通过一个独立存在的对象，可以找到该对象的其他信息。</p>
<p>例如该对象是由哪个类实例化而成的，例如有一条狗和一个人，我们通过反射技术，可以得知狗是犬科，人是灵长目的。犬科和灵长目就是我们通过反射所得到的信息，这两个词语不是一个层面的东西。</p>
<p><strong>用代码来说，映射就是 <code>a -&gt; b</code>，反射就是 <code>a.id</code>、<code>a.func()</code> 等。</strong></p>
<a id="more"></a>
<p>在使用 <code>Objective-C</code> 开发时很少强调其反射概念，因为 <code>Objective-C</code> 的 <code>Runtime</code> 要比其他语言中的反射强大的多。在 <code>Objective-C</code> 中可以很简单的实现字符串和类型的转换 <code>NSClassFromString</code>，实现动态方法调用 <code>performSelector: withObject:</code>，动态赋值 <code>KVC</code> 等等。</p>
<p>这些功能大家已经习以为常，但是在其他语言中要实现这些功能却要跨过较高的门槛，而且有些根本就是无法实现的。不过在 <code>Swift</code> 中并不提倡使用 <code>Runtime</code>，而是像其他语言一样使用反射 <code>Reflect</code>。</p>
<p><code>Swift</code> 的反射机制是基于一个叫 <strong>Mirror</strong> 的 <code>struct</code> 来实现的。你为具体的 <code>subject</code> 创建一个 <code>Mirror</code>，然后就可以通过它查询这个对象 <code>subject</code> 。</p>
<p>在我们创建 <code>Mirror</code> 之前，我们先创建一个可以让我们当做对象来使用的简单数据结构。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> storesToDisk: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookmarkStore</span>: <span class="title">Store</span> </span>&#123;</div><div class="line">    <span class="keyword">let</span> itemCount: <span class="type">Int</span> = <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">struct</span> <span class="title">Bookmark</span> </span>&#123;</div><div class="line">   <span class="class"><span class="keyword">enum</span> <span class="title">Group</span> </span>&#123;</div><div class="line">      <span class="keyword">case</span> <span class="type">Tech</span></div><div class="line">      <span class="keyword">case</span> <span class="type">News</span></div><div class="line">   &#125;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">let</span> store = &#123;</div><div class="line">       <span class="keyword">return</span> <span class="type">BookmarkStore</span>()</div><div class="line">   &#125;()</div><div class="line">   <span class="keyword">let</span> title: <span class="type">String</span>?</div><div class="line">   <span class="keyword">let</span> url: <span class="type">NSURL</span></div><div class="line">   <span class="keyword">let</span> keywords: [<span class="type">String</span>]</div><div class="line">   <span class="keyword">let</span> group: <span class="type">Group</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> aBookmark = <span class="type">Bookmark</span>(title: <span class="string">"Appventure"</span>, url: <span class="type">NSURL</span>(string: <span class="string">"appventure.me"</span>)!, keywords: [<span class="string">"Swift"</span>, <span class="string">"iOS"</span>, <span class="string">"OSX"</span>], group: .<span class="type">Tech</span>)</div></pre></td></tr></table></figure>
<h2 id="创建一个-Mirror"><a href="#创建一个-Mirror" class="headerlink" title="创建一个 Mirror"></a>创建一个 Mirror</h2><p>创建 <code>Mirror</code> 最简单的方式就是使用 <code>reflecting</code> 构造器：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>(reflecting subject: <span class="type">Any</span>)</div></pre></td></tr></table></figure>
<p>然后在 <code>aBookmark</code> <code>struct</code> 上使用它：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> aMirror = <span class="type">Mirror</span>(reflecting: aBookmark)</div><div class="line"><span class="built_in">print</span>(aMirror)</div><div class="line"><span class="comment">// 输出 : Mirror for Bookmark</span></div></pre></td></tr></table></figure>
<p>这段代码创建了 <code>Bookmark</code> 的 <code>Mirror</code>。正如你所见，对象的类型是 <code>Any</code>。这是 <code>Swift</code> 中最通用的类型。<code>Swift</code> 中的任何东西至少都是 <code>Any</code> 类型的。这样一来 <code>mirror</code> 就可以兼容 <code>struct</code>, <code>class</code>, <code>enum</code>, <code>Tuple</code>, <code>Array</code>, <code>Dictionary</code>, <code>set</code> 等。</p>
<p><code>Mirror</code> 结构体还有另外三个构造器，然而这三个都是在你需要自定义 <code>mirror</code> 这种情况下使用的。我们会在接下来讨论自定义 <code>mirror</code> 时详细讲解这些额外的构造器。</p>
<h2 id="Mirror-中都有什么？"><a href="#Mirror-中都有什么？" class="headerlink" title="Mirror 中都有什么？"></a>Mirror 中都有什么？</h2><p><code>Mirror struct</code> 中包含几个 <code>types</code> 来帮助确定你想查询的信息。</p>
<p>第一个是 <code>DisplayStyle</code> <code>enum</code>，它会告诉你对象的类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DisplayStyle</span> </span>&#123;</div><div class="line">    <span class="keyword">case</span> <span class="type">Struct</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Class</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Enum</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Tuple</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Optional</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Collection</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Dictionary</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Set</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些都是反射 API 的辅助类型。正如之前我们知道的，反射只要求对象是 <code>Any</code> 类型，而且 <code>Swift</code> 标准库中还有很多类型为 <code>Any</code> 的东西没有被列举在上面的 <code>DisplayStyle</code> <code>enum</code> 中。如果试图反射它们中间的某一个又会发生什么呢？比如 <code>closure</code>。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> closure = &#123; (a: <span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> a * <span class="number">2</span> &#125;</div><div class="line"><span class="keyword">let</span> aMirror = <span class="type">Mirror</span>(reflecting: closure)</div></pre></td></tr></table></figure>
<p>在这种情况下，这里你会得到一个 <code>mirror</code>，但是 <code>DisplayStyle</code> 为 <code>nil</code>。</p>
<p>也有提供给 <code>Mirror</code> 的子节点使用的 <code>typealias</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">Child</span> = (label: <span class="type">String</span>?, value: <span class="type">Any</span>)</div></pre></td></tr></table></figure>
<p>所以每个 <code>Child</code> 都包含一个可选的 <code>label</code> 和 <code>Any</code> 类型的 <code>value</code>。为什么 <code>label</code> 是 <code>Optional</code> 的？如果你仔细考虑下，其实这是非常有意义的，并不是所有支持反射的数据结构都包含有名字的子节点。 <code>struct</code> 会以属性的名字做为 <code>label</code>，但是 <code>Collection</code> 只有下标，没有名字。<code>Tuple</code> 同样也可能没有给它们的条目指定名字。</p>
<p>接下来是 <code>AncestorRepresentation</code> <code>enum</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">AncestorRepresentation</span> </span>&#123;</div><div class="line">    <span class="comment">/// 为所有 ancestor class 生成默认 mirror。</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Generated</span></div><div class="line">    <span class="comment">/// 使用最近的 ancestor 的 customMirror() 实现来给它创建一个 mirror。    </span></div><div class="line">    <span class="keyword">case</span> <span class="type">Customized</span>(() -&gt; <span class="type">Mirror</span>)</div><div class="line">    <span class="comment">/// 禁用所有 ancestor class 的行为。Mirror 的 superclassMirror() 返回值为 nil。</span></div><div class="line">    <span class="keyword">case</span> <span class="type">Suppressed</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个 <code>enum</code> 用来定义被反射的对象的父类应该如何被反射。也就是说，这只应用于 <code>class</code> 类型的对象。默认情况下 <code>Swift</code> 会为每个父类生成额外的 <code>mirror</code>。然而，如果你需要做更复杂的操作，你可以使用 <code>AncestorRepresentation enum</code> 来定义父类被反射的细节。</p>
<h2 id="如何使用一个-Mirror"><a href="#如何使用一个-Mirror" class="headerlink" title="如何使用一个 Mirror"></a>如何使用一个 Mirror</h2><p>现在我们有了给 <code>Bookmark</code> 类型的对象 <code>aBookmark</code> 做反射的实例变量 <code>aMirror</code>。可以用它来做什么呢？</p>
<p>下面列举了 <code>Mirror</code> 可用的属性 / 方法：</p>
<ul>
<li><code>let children: Children</code>：对象的子节点。</li>
<li><code>displayStyle: Mirror.DisplayStyle?</code>：对象的展示风格</li>
<li><code>let subjectType: Any.Type</code>：对象的类型</li>
<li><code>func superclassMirror() -&gt; Mirror?</code>：对象父类的 <code>mirror</code></li>
</ul>
<p>下面我们会分别对它们进行解析。</p>
<h3 id="DisplayStyle"><a href="#DisplayStyle" class="headerlink" title="DisplayStyle"></a>DisplayStyle</h3><p>很简单，它会返回 <code>DisplayStyle</code> <code>enum</code> 的其中一种情况。如果你想要对某种不支持的类型进行反射，你会得到一个空的 <code>Optional</code> 值（这个之前解释过）。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span> (aMirror.displayStyle)</div><div class="line"><span class="comment">// 此处输出：Optional(Struct)</span></div></pre></td></tr></table></figure>
<h3 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h3><p>这会返回一个包含了对象所有的子节点的 <code>AnyForwardCollection&lt;Child&gt;</code>。这些子节点不单单限于 <code>Array</code> 或者 <code>Dictionary</code> 中的条目。诸如 <code>struct</code> 或者 <code>class</code> 中所有的属性也是由 <code>AnyForwardCollection&lt;Child&gt;</code> 这个属性返回的子节点。<code>AnyForwardCollection</code> 协议意味着这是一个支持遍历的 <code>Collection</code> 类型。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, value) <span class="keyword">in</span> aMirror.children &#123;</div><div class="line">    <span class="built_in">print</span> (label, value)</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出:</span></div><div class="line"><span class="comment">//: store main.BookmarkStore</span></div><div class="line"><span class="comment">//: title Optional("Appventure")</span></div><div class="line"><span class="comment">//: url appventure.me</span></div><div class="line"><span class="comment">//: keywords ["Swift", "iOS", "OSX"]</span></div><div class="line"><span class="comment">//: group Tech</span></div></pre></td></tr></table></figure>
<h3 id="SubjectType"><a href="#SubjectType" class="headerlink" title="SubjectType"></a>SubjectType</h3><p>这是对象的类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">print</span>(aMirror.subjectType)</div><div class="line"><span class="comment">//输出 : Bookmark</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="number">5</span>).subjectType)</div><div class="line"><span class="comment">//输出 : Int</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="string">"test"</span>).subjectType)</div><div class="line"><span class="comment">//输出 : String</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: <span class="type">NSNull</span>()).subjectType)</div><div class="line"><span class="comment">//输出 : NSNull</span></div></pre></td></tr></table></figure>
<p>然而，<code>Swift</code> 的文档中有下面一句话：</p>
<blockquote>
<p>“当 <code>self</code> 是另外一个 <code>mirror</code> 的 <code>superclassMirror()</code> 时，这个类型和对象的动态类型可能会不一样。”</p>
</blockquote>
<h3 id="SuperclassMirror"><a href="#SuperclassMirror" class="headerlink" title="SuperclassMirror"></a>SuperclassMirror</h3><p>这是我们对象父类的 <code>mirror</code>。如果这个对象不是一个类，它会是一个空的 <code>Optional</code> 值。如果对象的类型是基于类的，你会得到一个新的 <code>Mirror</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 试试 struct</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: aBookmark).superclassMirror())</div><div class="line"><span class="comment">// 输出: nil</span></div><div class="line"><span class="comment">// 试试 class</span></div><div class="line"><span class="built_in">print</span>(<span class="type">Mirror</span>(reflecting: aBookmark.store).superclassMirror())</div><div class="line"><span class="comment">// 输出: Optional(Mirror for Store)</span></div></pre></td></tr></table></figure>
<h2 id="Struct-转-Core-Data"><a href="#Struct-转-Core-Data" class="headerlink" title="Struct 转 Core Data"></a>Struct 转 Core Data</h2><p>假设我们在一个叫 <strong>Books Bunny</strong> 的新兴高科技公司工作，我们以浏览器插件的方式提供了一个人工智能，它可以自动分析用户访问的所有网站，然后把相关页面自动保存到书签中。</p>
<p>现在 <code>Swift</code> 已经开源，所以我们的后台服务端肯定是用 <code>Swift</code> 编写。因为在我们的系统中同时有数以百万计的网站访问活动，我们想用 <code>struct</code> 来存储用户访问网站的分析数据。不过，如果我们 AI 认定某个页面的数据是需要保存到书签中的话，我们需要使用 <code>CoreData</code> 来把这个类型的对象保存到数据库中。</p>
<p>现在我们不想为每个新建的 <code>struct</code> 单独写自定义的 <code>Core Data</code> 序列化代码。而是想以一种更优雅的方式来开发，从而可以让将来的所有 <code>struct</code> 都可以利用这种方式来做序列化。</p>
<p>那么我们该怎么做呢？</p>
<h3 id="一个协议"><a href="#一个协议" class="headerlink" title="一个协议"></a>一个协议</h3><p>记住，我们有一个 <code>struct</code>，它需要自动转换为 <code>NSManagedObject</code> （<strong>Core Data</strong>）。</p>
<p>如果我们想要支持不同的 <code>struct</code> 甚至类型，我们可以用协议来实现，然后确保我们需要的类型符合这个协议。所以我们假想的协议应该有哪些功能呢？</p>
<ul>
<li>第一，协议应该允许自定义我们想要创建的 <strong>Core Data 实体</strong>的名字</li>
<li>第二，协议需要提供一种方式来告诉它如何转换为 <code>NSManagedObject</code>。</li>
</ul>
<p>我们的 <code>protocol</code>（协议） 看起来是下面这个样子的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="comment">// 我们 Core Data 实体的名字</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">var</span> <span class="type">EntityName</span>: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">    <span class="comment">// 返回包含我们属性集的 NSManagedObject</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>toCoreData</code> 方法使用了 Swift 2.0 新的异常处理来抛出错误，如果转换失败，会有几种错误情况，这些情况都在下面的 <code>ErrorTypeenum</code> 进行了列举：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SerializationError</span>: <span class="title">ErrorType</span> </span>&#123;</div><div class="line">    <span class="comment">// 我们只支持 struct</span></div><div class="line">    <span class="keyword">case</span> <span class="type">StructRequired</span></div><div class="line">    <span class="comment">// 实体在 Core Data 模型中不存在</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnknownEntity</span>(name: <span class="type">String</span>)</div><div class="line">    <span class="comment">// 给定的类型不能保存在 core data 中</span></div><div class="line">    <span class="keyword">case</span> <span class="type">UnsupportedSubType</span>(label: <span class="type">String</span>?)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面列举了三种转换时需要注意的错误情况。第一种情况是我们试图把它应用到非 <code>struct</code> 的对象上。第二种情况是我们想要创建的 <code>entity</code> 在 Core Data 模型中不存在。第三种情况是我们想要把一些不能存储在 Core Data 中的东西保存到 Core Data 中（即 <code>enum</code>）。</p>
<p>让我们创建一个 <code>struct</code> 然后为其增加协议一致性：</p>
<h3 id="Bookmark-struct"><a href="#Bookmark-struct" class="headerlink" title="Bookmark struct"></a>Bookmark struct</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Bookmark</span> </span>&#123;</div><div class="line">   <span class="keyword">let</span> title: <span class="type">String</span></div><div class="line">   <span class="keyword">let</span> url: <span class="type">NSURL</span></div><div class="line">   <span class="keyword">let</span> pagerank: <span class="type">Int</span></div><div class="line">   <span class="keyword">let</span> created: <span class="type">NSDate</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们要实现 <code>toCoreData</code> 方法。</p>
<h3 id="协议扩展"><a href="#协议扩展" class="headerlink" title="协议扩展"></a>协议扩展</h3><p>当然我们可以为每个 <code>struct</code> 都写新的 <code>toCoreData</code> 方法，但是工作量很大，因为 <code>struct</code> 不支持继承，所以我们不能使用基类的方式。不过我们可以使用 <code>protocol extension</code> 来扩展这个方法到所有相符合的 <code>struct</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为扩展已经被应用到相符合的 <code>struct</code>，这个方法就可以在 <code>struct</code> 的上下文中被调用。因此，在协议中，<code>self</code> 指的是我们想分析的 <code>struct</code>。</p>
<p>所以，我们需要做的第一步就是创建一个可以写入我们 <code>Bookmark struct</code> 值的<code>NSManagedObject</code>。我们该怎么做呢？</p>
<h3 id="一点-Core-Data"><a href="#一点-Core-Data" class="headerlink" title="一点 Core Data"></a>一点 Core Data</h3><p><code>Core Data</code> 有点啰嗦，所以如果需要创建一个对象，我们需要如下的步骤：</p>
<ol>
<li>获得我们需要创建的实体的名字（字符串）</li>
<li>获取 <code>NSManagedObjectContext</code>，然后为我们的实体创建 <code>NSEntityDescription</code></li>
<li>利用这些信息创建 <code>NSManagedObject</code>。</li>
</ol>
<p>实现代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 Core Data 实体的名字</span></div><div class="line"><span class="keyword">let</span> entityName = <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.<span class="type">EntityName</span></div><div class="line"></div><div class="line"><span class="comment">// 创建实体描述</span></div><div class="line"><span class="comment">// 实体可能不存在, 所以我们使用 'guard let' 来判断，如果实体</span></div><div class="line"><span class="comment">// 在我们的 core data 模型中不存在的话，我们就抛出错误</span></div><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> desc = <span class="type">NSEntityDescription</span>.entityForName(entityName, inManagedObjectContext: context)</div><div class="line">    <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">UnknownEntity</span>(name: entityName) &#125;</div><div class="line"></div><div class="line"><span class="comment">// 创建 NSManagedObject</span></div><div class="line"><span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(entity: desc, insertIntoManagedObjectContext: context)</div></pre></td></tr></table></figure>
<h3 id="实现反射"><a href="#实现反射" class="headerlink" title="实现反射"></a>实现反射</h3><p>下一步，我们想使用反射 API 来读取 <code>bookmark</code> 对象的属性然后把它写入到 <code>NSManagedObject</code> 实例中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 Mirror</span></div><div class="line"><span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="comment">// 确保我们是在分析一个 struct</span></div><div class="line"><span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span> <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div></pre></td></tr></table></figure>
<p>我们通过测试 <code>displayStyle</code> 属性的方式来确保这是一个 <code>struct</code>。</p>
<p>所以现在我们有了一个可以让我们读取属性的 <code>Mirror</code>，也有了一个可以用来设置属性的 <code>NSManagedObject</code>。因为 <code>mirror</code> 提供了读取所有 <code>children</code> 的方式，所以我们可以遍历它们并保存它们的值。方式如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, value) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">    managedObject.setValue(value, forKey: label)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>太棒了！但是，如果我们试图编译它，它会失败。原因是 <code>setValueForKey</code> 需要一个 <code>AnyObject?</code> 类型的对象，而我们的 <code>children</code> 属性只返回一个 <code>(String?, Any)</code> 类型的 <code>tuple</code>。也就是说 <code>value</code> 是 <code>Any</code> 类型但是我们需要 <code>AnyObject</code> 类型的。为了解决这个问题，我们要测试 <code>value</code> 的 <code>AnyObject</code> 协议一致性。这也意味着如果得到的属性的类型不符合 <code>AnyObject</code> 协议（比如 <code>enum</code>)，我们就可以抛出一个错误。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line"><span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span></div><div class="line">  <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> value = anyValue <span class="keyword">as</span>? <span class="type">AnyObject</span> &#123;</div><div class="line">    	managedObject.setValue(value, forKey: label)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">UnsupportedSubType</span>(label: label)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在，只有在 <code>child</code> 是 <code>AnyObject</code> 类型的时候我们才会调用 <code>setValueForKey</code> 方法。</p>
<p>然后唯一剩下的事情就是返回 <code>NSManagedObject</code>。完整的代码如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">StructDecoder</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toCoreData</span><span class="params">(context: NSManagedObjectContext)</span></span> <span class="keyword">throws</span> -&gt; <span class="type">NSManagedObject</span> &#123;</div><div class="line">	<span class="keyword">let</span> entityName = <span class="keyword">self</span>.<span class="keyword">dynamicType</span>.<span class="type">EntityName</span></div><div class="line"></div><div class="line">	<span class="comment">// 创建实体描述</span></div><div class="line">	<span class="keyword">guard</span> <span class="keyword">let</span> desc = <span class="type">NSEntityDescription</span>.entityForName(entityName, inManagedObjectContext: context)</div><div class="line">	    <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">UnknownEntity</span>(name: entityName) &#125; <span class="comment">// [译者注] UnknownEntity 为 SerializationError.UnknownEntity</span></div><div class="line"></div><div class="line">	<span class="comment">// 创建 NSManagedObject</span></div><div class="line">	<span class="keyword">let</span> managedObject = <span class="type">NSManagedObject</span>(entity: desc, insertIntoManagedObjectContext: context)</div><div class="line"></div><div class="line">	<span class="comment">// 创建一个 Mirror</span></div><div class="line">	<span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line"></div><div class="line">	<span class="comment">// 确保我们是在分析一个 struct</span></div><div class="line">	<span class="keyword">guard</span> mirror.displayStyle == .<span class="type">Struct</span> <span class="keyword">else</span> &#123; <span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">StructRequired</span> &#125;</div><div class="line"></div><div class="line">	<span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">let</span> (label?, anyValue) <span class="keyword">in</span> mirror.children &#123;</div><div class="line">	    <span class="keyword">if</span> <span class="keyword">let</span> value = anyValue <span class="keyword">as</span>? <span class="type">AnyObject</span> &#123;</div><div class="line">		managedObject.setValue(child, forKey: label) <span class="comment">// [译者注] 正确代码为：managedObject.setValue(value, forKey: label)</span></div><div class="line">	    &#125; <span class="keyword">else</span> &#123;</div><div class="line">		<span class="keyword">throw</span> <span class="type">SerializationError</span>.<span class="type">UnsupportedSubType</span>(label: label)</div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> managedObject</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>搞定，我们现在已经把 <code>struct</code> 转换为 <code>NSManagedObject</code> 了。</p>
<h2 id="Class-转-Dictionary"><a href="#Class-转-Dictionary" class="headerlink" title="Class 转 Dictionary"></a>Class 转 Dictionary</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//自定义用户类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span>  <span class="comment">//姓名</span></div><div class="line">    <span class="keyword">var</span> nickname:<span class="type">String</span>?  <span class="comment">//昵称</span></div><div class="line">    <span class="keyword">var</span> age:<span class="type">Int</span>?   <span class="comment">//年龄</span></div><div class="line">    <span class="keyword">var</span> emails:[<span class="type">String</span>]?  <span class="comment">//邮件地址</span></div><div class="line">    <span class="keyword">var</span> tels:[<span class="type">Telephone</span>]? <span class="comment">//电话</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//电话结构体</span></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Telephone</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> title:<span class="type">String</span>  <span class="comment">//电话标题</span></div><div class="line">    <span class="keyword">var</span> number:<span class="type">String</span>  <span class="comment">//电话号码</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//自定义一个JSON协议</span></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>?</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展协议方法，实现一个通用的toJSONModel方法（反射实现）</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="comment">//将模型数据转成可用的字典数据，Any表示任何类型，除了方法类型</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>? &#123;</div><div class="line">        <span class="comment">//根据实例创建反射结构体Mirror</span></div><div class="line">        <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)</div><div class="line">        <span class="keyword">if</span> mirror.children.<span class="built_in">count</span> &gt; <span class="number">0</span>  &#123;</div><div class="line">            <span class="comment">//创建一个空字典，用于后面添加键值对</span></div><div class="line">            <span class="keyword">var</span> result: [<span class="type">String</span>:<span class="type">Any</span>] = [:]</div><div class="line">            <span class="comment">//遍历实例的所有属性集合</span></div><div class="line">            <span class="keyword">for</span> children <span class="keyword">in</span> mirror.children &#123;</div><div class="line">                <span class="keyword">let</span> propertyNameString = children.label!</div><div class="line">                <span class="keyword">let</span> value = children.value</div><div class="line">                <span class="comment">//判断value的类型是否遵循JSON协议，进行深度递归调用</span></div><div class="line">                <span class="keyword">if</span> <span class="keyword">let</span> jsonValue = value <span class="keyword">as</span>? <span class="type">JSON</span> &#123;</div><div class="line">                    result[propertyNameString] = jsonValue.toJSONModel()</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">self</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展可选类型，使其遵循JSON协议，可选类型值为nil时，不转化进字典中</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Optional</span>: <span class="title">JSON</span> </span>&#123;</div><div class="line">    <span class="comment">//可选类型重写toJSONModel()方法</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">toJSONModel</span><span class="params">()</span></span> -&gt; <span class="type">Any</span>? &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> x = <span class="keyword">self</span> &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> value = x <span class="keyword">as</span>? <span class="type">JSON</span> &#123;</div><div class="line">                <span class="keyword">return</span> value.toJSONModel()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//扩展两个自定义类型，使其遵循JSON协议</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">User</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Telephone</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="comment">//扩展Swift的基本数据类型，使其遵循JSON协议</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">String</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Int</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bool</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Array</span>: <span class="title">JSON</span> </span>&#123; &#125;</div><div class="line"></div><div class="line"><span class="comment">//创建一个User实例对象模型</span></div><div class="line"><span class="keyword">let</span> user1 = <span class="type">User</span>()</div><div class="line">user1.name = <span class="string">"hangge"</span></div><div class="line">user1.age = <span class="number">100</span></div><div class="line">user1.emails = [<span class="string">"hangge@hangge.com"</span>,<span class="string">"system@hangge.com"</span>]</div><div class="line"><span class="comment">//添加电话</span></div><div class="line"><span class="keyword">let</span> tel1 = <span class="type">Telephone</span>(title: <span class="string">"手机"</span>, number: <span class="string">"123456"</span>)</div><div class="line"><span class="keyword">let</span> tel2 = <span class="type">Telephone</span>(title: <span class="string">"公司座机"</span>, number: <span class="string">"001-0358"</span>)</div><div class="line">user1.tels = [tel1, tel2]</div><div class="line"><span class="comment">//模型转字典</span></div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> model = user1.toJSONModel() &#123;</div><div class="line">    <span class="built_in">print</span>(model)</div><div class="line">&#125;</div><div class="line"><span class="comment">/* 打印：【以下打印经过排版，正式的打印是紧凑的】</span></div><div class="line">[</div><div class="line">"tels": [</div><div class="line">    "[1]": [</div><div class="line">        "title": "公司座机",</div><div class="line">        "number": "001-0358"</div><div class="line">    ],</div><div class="line">    "[0]": [</div><div class="line">        "title": "手机",</div><div class="line">        "number": "123456"</div><div class="line">    ]</div><div class="line">],</div><div class="line">"name": "hangge",</div><div class="line">"emails": [</div><div class="line">    "[1]": "system@hangge.com",</div><div class="line">    "[0]": "hangge@hangge.com"</div><div class="line">],</div><div class="line">"age": 100</div><div class="line">]</div><div class="line">*/</div></pre></td></tr></table></figure>
<h2 id="自定义-Mirror"><a href="#自定义-Mirror" class="headerlink" title="自定义 Mirror"></a>自定义 Mirror</h2><p>我们之前已经讨论过，创建 <code>Mirror</code> 还有其他的选项。这些选项是非常有用的，比如，你想自己定义 <code>mirror</code> 中<strong>对象</strong>的哪些部分是可访问的。对于这种情况 <code>Mirror Struct</code> 提供了其他的构造器。</p>
<h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p>第一个特殊 <code>init</code> 是为 <code>Collection</code> 量身定做的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>, <span class="type">C</span> : <span class="type">CollectionType</span> <span class="keyword">where</span> <span class="type">C</span>.<span class="type">Generator</span>.<span class="type">Element</span> == <span class="type">Child</span>&gt;</div><div class="line">  (<span class="number">_</span> subject: <span class="type">T</span>, children: <span class="type">C</span>,</div><div class="line">   displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>? = <span class="keyword">default</span>,</div><div class="line">   ancestorRepresentation: <span class="type">Mirror</span>.<span class="type">AncestorRepresentation</span> = <span class="keyword">default</span>)</div></pre></td></tr></table></figure>
<p>与之前的 <code>init(reflecting:)</code> 相比，这个构造器允许我们定义更多反射处理的细节。</p>
<ul>
<li>它只对 <code>Collection</code> 有效</li>
<li>我们可以设定被反射的对象<strong>以及</strong>对象的 <code>children</code> （<code>Collection</code> 的内容）</li>
</ul>
<h3 id="Class-或者-Struct"><a href="#Class-或者-Struct" class="headerlink" title="Class 或者 Struct"></a>Class 或者 Struct</h3><p>第二个可以在 <code>class</code> 或者 <code>struct</code> 上使用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">init</span>&lt;<span class="type">T</span>&gt;(<span class="number">_</span> subject: <span class="type">T</span>,</div><div class="line">  children: <span class="type">DictionaryLiteral</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;,</div><div class="line">  displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>? = <span class="keyword">default</span>,</div><div class="line">  ancestorRepresentation: <span class="type">Mirror</span>.<span class="type">AncestorRepresentation</span> = <span class="keyword">default</span>)</div></pre></td></tr></table></figure>
<p>有意思的是，这里是由你指定对象的 <code>children</code> （即属性），指定的方式是通过一个 <code>DictionaryLiteral</code>，它有点像字典，可以直接用作函数参数。如果我们为 <code>Bookmark struct</code> 实现这个构造器，它看起来是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Bookmark</span>: <span class="title">CustomReflectable</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">customMirror</span><span class="params">()</span></span> -&gt; <span class="type">Mirror</span> &#123; <span class="comment">// [译者注] 此处应该为 public func customMirror() -&gt; Mirror &#123;</span></div><div class="line">	<span class="keyword">let</span> children = <span class="type">DictionaryLiteral</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt;(dictionaryLiteral:</div><div class="line">	(<span class="string">"title"</span>, <span class="keyword">self</span>.title), (<span class="string">"pagerank"</span>, <span class="keyword">self</span>.pagerank),</div><div class="line">	(<span class="string">"url"</span>, <span class="keyword">self</span>.url), (<span class="string">"created"</span>, <span class="keyword">self</span>.created),</div><div class="line">	(<span class="string">"keywords"</span>, <span class="keyword">self</span>.keywords), (<span class="string">"group"</span>, <span class="keyword">self</span>.group))</div><div class="line"></div><div class="line">	<span class="keyword">return</span> <span class="type">Mirror</span>.<span class="keyword">init</span>(<span class="type">Bookmark</span>.<span class="keyword">self</span>, children: children,</div><div class="line">	    displayStyle: <span class="type">Mirror</span>.<span class="type">DisplayStyle</span>.<span class="type">Struct</span>,</div><div class="line">	    ancestorRepresentation:.<span class="type">Suppressed</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h2><p>所以留下来让我们思考的问题是什么呢？好的反射用例又是什么呢？很显然，如果你在很多 <code>NSManagedObject</code> 上使用反射，它会大大降低你代码的性能。同时如果只有一个或者两个 <code>struct</code>，根据自己掌握的<code>struct</code> 领域的知识编写一个序列化的方法会更容易，更高性能且更不容易让人困惑。</p>
<p>而本文展示反射技巧可以当你在有很多复杂的 <code>struct</code> ，且偶尔想对它们中的一部分进行存储时使用。</p>
<p>例子如下：</p>
<ul>
<li>设置收藏夹</li>
<li>收藏书签</li>
<li>加星</li>
<li>记住上一次选择</li>
<li>在重新启动时存储 AST 打开的项目</li>
<li>在特殊处理时做临时存储</li>
</ul>
<p>当然除此之外，反射当然还有其他的使用场景：</p>
<ul>
<li>遍历 <code>tuples</code></li>
<li>对类做分析</li>
<li>运行时分析对象的一致性</li>
<li>自动生成详细日志 / 调试信息（即外部生成对象）</li>
</ul>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>Swift 反射 API 及用法：</p>
<p><a href="http://swift.gg/2015/11/23/swift-reflection-api-what-you-can-do/" target="_blank" rel="external">http://swift.gg/2015/11/23/swift-reflection-api-what-you-can-do/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常能听到映射和反射，那么它们代表的含义是什么呢？&lt;/p&gt;
&lt;p&gt;映射只是一种概念，通常是用代码方式来表示一个比较复杂的意义。例如访问网站时 404 错误的含义是“找不到当前页”，500错误是“服务器内部错误”。那么我们会把这些错误的原因和一些固定的数字对应起来，这就是一种映射。&lt;/p&gt;
&lt;p&gt;体现在程序里，映射用的比较多的地方就是和数据库打交道。我们通常会期望不直接操作数据库而对数据库做出一些改变。那么我们会声明一个类去对应数据库的一张数据表。&lt;/p&gt;
&lt;p&gt;例如有一张学生表，有学号和姓名两个字段。我们可以在代码里建一个学生类，下面有学号和姓名两个属性，通过一定的技术可以把这个类和那张学生表对应起来，可以实现在操作这个类的时候，却去改变那张表的数据的效果，我们可以称这是一种映射。&lt;/p&gt;
&lt;p&gt;熟悉 C#、Java 的朋友应该不难理解反射的，反射是一种技术，很多高级语言都有这种技术。具体作用就是通过一个独立存在的对象，可以找到该对象的其他信息。&lt;/p&gt;
&lt;p&gt;例如该对象是由哪个类实例化而成的，例如有一条狗和一个人，我们通过反射技术，可以得知狗是犬科，人是灵长目的。犬科和灵长目就是我们通过反射所得到的信息，这两个词语不是一个层面的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;用代码来说，映射就是 &lt;code&gt;a -&amp;gt; b&lt;/code&gt;，反射就是 &lt;code&gt;a.id&lt;/code&gt;、&lt;code&gt;a.func()&lt;/code&gt; 等。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - String</title>
    <link href="http://yoursite.com/2017/07/10/JavaScript%20-%20String/"/>
    <id>http://yoursite.com/2017/07/10/JavaScript - String/</id>
    <published>2017-07-09T18:24:00.000Z</published>
    <updated>2017-07-28T14:53:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：<strong>前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 <code>new</code> 创建，而内置对象则不需要。</strong></p>
<p>JavaScript 常见的内置对象有：<code>Array</code> 、<code>String</code> 、<code>Math</code> 、<code>Date</code> 几种。</p>
</blockquote>
<h2 id="索引字符串中的字符"><a href="#索引字符串中的字符" class="headerlink" title="索引字符串中的字符"></a>索引字符串中的字符</h2><p><code>charAr(index)</code> 和 <code>charCodeAt(index)</code> 方法可以根据 <code>index</code> 下标获取字符串中的指定字符，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello, world!'</span></div><div class="line"><span class="keyword">var</span> subStr = str.charAt(<span class="number">1</span>);</div><div class="line"><span class="keyword">var</span> subStrCode = str.charCodeAt(<span class="number">1</span>);</div><div class="line"><span class="built_in">console</span>.log(subStr);  <span class="comment">//log: e</span></div><div class="line"><span class="built_in">console</span>.log(subStrCode);  <span class="comment">//log: 101</span></div></pre></td></tr></table></figure>
<p>这里的 <code>101</code> 是 <code>e</code> 的 <code>Unicode</code> 编码。如越界，返回值是空的。</p>
  <a id="more"></a>
<h2 id="获子字符串在字符串的下标"><a href="#获子字符串在字符串的下标" class="headerlink" title="获子字符串在字符串的下标"></a>获子字符串在字符串的下标</h2><p><code>indexOf()</code> 和 <code>lastIndexOf()</code> 用于获取指定字符在字符串中的位置，区别在于 <code>indexOf()</code> 是从前往后索引，<code>lastIndexOf()</code> 是从后往前索引，如未检索到指定字符，返回 <code>-1</code>。它可以接收子串，而不是单一字符。</p>
<h2 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h2><p>JavaScript 中字符串的截取主要有以下 3 种方法：</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h3><p><code>slice()</code> 方法有两个参数：</p>
<table>
<thead>
<tr>
<th>形参</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td>必需，指定子字符串的起始位置。</td>
</tr>
<tr>
<td>end</td>
<td>可选，表示结束位置，end 本身不会被截取。</td>
</tr>
</tbody>
</table>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello world!'</span></div><div class="line"><span class="keyword">var</span> subStr = str.slice(<span class="number">-5</span>, <span class="number">-3</span>);</div><div class="line"><span class="built_in">console</span>.log(subStr);</div></pre></td></tr></table></figure>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring()"></a>substring()</h3><p><code>substring()</code> 方法的参数和使用方法与 <code>slice()</code> 相同，不同的地方在于参数不支持负数，如果传入的参数是负数，会将参数转换为 0 处理。且 <code>substring()</code> 会认为较大的数值是结束位置，较小的数值是开始位置，与形参的顺序无关。</p>
<h3 id="substr"><a href="#substr" class="headerlink" title="substr()"></a>substr()</h3><table>
<thead>
<tr>
<th>形参</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start</td>
<td>必需，子字符的起始位置。</td>
</tr>
<tr>
<td>len</td>
<td>可选，子字符串的长度。</td>
</tr>
</tbody>
</table>
<p><code>start</code> 为负数时，起始位置等于传入的负值与字符串长度相加，<code>len</code> 为负数时，返回空字符串。</p>
<h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><p><code>split()</code> 方法可以将字符串转为数组，参数是一个分隔符：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'welcome-to-beijing'</span>;</div><div class="line"><span class="keyword">var</span> strArr = str.split(<span class="string">'-'</span>);</div><div class="line"><span class="built_in">console</span>.log(strArr);</div><div class="line"><span class="comment">//log: ["welcome", "to", "beijing"]</span></div></pre></td></tr></table></figure>
<h2 id="替换字符串"><a href="#替换字符串" class="headerlink" title="替换字符串"></a>替换字符串</h2><p><code>replace()</code> 方法用于替换字符串，有两个参数：</p>
<table>
<thead>
<tr>
<th>形参</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>regexp</td>
<td>规定子字符串或要替换的模式</td>
</tr>
<tr>
<td>replacement</td>
<td>替换后的值</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> tel = <span class="string">'010-76578980,400-100-6789,010-86432906'</span>;</div><div class="line"><span class="keyword">var</span> newTel = tel.replace(<span class="string">','</span>,<span class="string">' '</span>);</div><div class="line"><span class="built_in">console</span>.log(tel);</div><div class="line"><span class="comment">//log: 010-76578980,400-100-6789,010-86432906</span></div><div class="line"><span class="built_in">console</span>.log(newTel);</div><div class="line"><span class="comment">//log: 010-76578980 400-100-6789,010-86432906</span></div></pre></td></tr></table></figure>
<h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hello world!'</span></div><div class="line"><span class="keyword">var</span> upper = firstCharTo(<span class="literal">true</span>,str);</div><div class="line"><span class="built_in">console</span>.log(upper);</div><div class="line"><span class="keyword">var</span> lower = firstCharTo(<span class="literal">false</span>,str);</div><div class="line"><span class="built_in">console</span>.log(lower);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">firstCharTo</span>(<span class="params">isUpper, str</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> strArr = str.split(<span class="string">' '</span>);</div><div class="line">  <span class="keyword">var</span> upperStrArr = [];</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</div><div class="line">    <span class="keyword">var</span> firstChar = strArr[i].charAt(<span class="number">0</span>)</div><div class="line">    <span class="keyword">if</span> (isUpper) &#123;</div><div class="line">      upperStrArr[i] = strArr[i].replace(firstChar, firstChar.toUpperCase());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">      upperStrArr[i] = strArr[i].replace(firstChar, firstChar.toLowerCase());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> upperStrArr.join(<span class="string">' '</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：&lt;strong&gt;前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 &lt;code&gt;new&lt;/code&gt; 创建，而内置对象则不需要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 常见的内置对象有：&lt;code&gt;Array&lt;/code&gt; 、&lt;code&gt;String&lt;/code&gt; 、&lt;code&gt;Math&lt;/code&gt; 、&lt;code&gt;Date&lt;/code&gt; 几种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;索引字符串中的字符&quot;&gt;&lt;a href=&quot;#索引字符串中的字符&quot; class=&quot;headerlink&quot; title=&quot;索引字符串中的字符&quot;&gt;&lt;/a&gt;索引字符串中的字符&lt;/h2&gt;&lt;p&gt;&lt;code&gt;charAr(index)&lt;/code&gt; 和 &lt;code&gt;charCodeAt(index)&lt;/code&gt; 方法可以根据 &lt;code&gt;index&lt;/code&gt; 下标获取字符串中的指定字符，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&#39;hello, world!&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subStr = str.charAt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subStrCode = str.charCodeAt(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(subStr);  &lt;span class=&quot;comment&quot;&gt;//log: e&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(subStrCode);  &lt;span class=&quot;comment&quot;&gt;//log: 101&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里的 &lt;code&gt;101&lt;/code&gt; 是 &lt;code&gt;e&lt;/code&gt; 的 &lt;code&gt;Unicode&lt;/code&gt; 编码。如越界，返回值是空的。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Math</title>
    <link href="http://yoursite.com/2017/07/09/JavaScript%20-%20Math/"/>
    <id>http://yoursite.com/2017/07/09/JavaScript - Math/</id>
    <published>2017-07-08T18:24:00.000Z</published>
    <updated>2017-07-28T14:52:55.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：<strong>前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 <code>new</code> 创建，而内置对象则不需要。</strong></p>
<p>JavaScript 常见的内置对象有：<code>Array</code> 、<code>String</code> 、<code>Math</code> 、<code>Date</code> 几种。</p>
</blockquote>
<h2 id="最大值和最小值"><a href="#最大值和最小值" class="headerlink" title="最大值和最小值"></a>最大值和最小值</h2><p><code>max</code> 用以求一组数中的最大值，<code>min</code> 用以求一组数中的最小值：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> maxNum = <span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">-22</span>,<span class="number">67</span>);</div><div class="line"><span class="keyword">var</span> minNum = <span class="built_in">Math</span>.min(<span class="number">1</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">-22</span>,<span class="number">67</span>);</div><div class="line"><span class="built_in">console</span>.log(maxNum);  <span class="comment">//log: 67</span></div><div class="line"><span class="built_in">console</span>.log(minNum);  <span class="comment">//log: -22</span></div></pre></td></tr></table></figure>
  <a id="more"></a>
<h2 id="向上取整和向下取整"><a href="#向上取整和向下取整" class="headerlink" title="向上取整和向下取整"></a>向上取整和向下取整</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.ceil(<span class="number">189.01</span>));   <span class="comment">//log: 190</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.floor(<span class="number">189.99</span>));  <span class="comment">//log: 189</span></div></pre></td></tr></table></figure>
<h2 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">189.01</span>));  <span class="comment">//log: 189</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.round(<span class="number">189.99</span>));  <span class="comment">//log: 190</span></div></pre></td></tr></table></figure>
<h2 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">-123.123</span>));  <span class="comment">//log: 123.123</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">123.123</span>));   <span class="comment">//log: 123.123</span></div></pre></td></tr></table></figure>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(getRandom(<span class="number">-20</span>,<span class="number">20</span>));</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getRandom</span> (<span class="params">n,m</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> choise = m - n + <span class="number">1</span>; <span class="comment">//随机整数的个数</span></div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*choise + n);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：&lt;strong&gt;前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 &lt;code&gt;new&lt;/code&gt; 创建，而内置对象则不需要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 常见的内置对象有：&lt;code&gt;Array&lt;/code&gt; 、&lt;code&gt;String&lt;/code&gt; 、&lt;code&gt;Math&lt;/code&gt; 、&lt;code&gt;Date&lt;/code&gt; 几种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;最大值和最小值&quot;&gt;&lt;a href=&quot;#最大值和最小值&quot; class=&quot;headerlink&quot; title=&quot;最大值和最小值&quot;&gt;&lt;/a&gt;最大值和最小值&lt;/h2&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt; 用以求一组数中的最大值，&lt;code&gt;min&lt;/code&gt; 用以求一组数中的最小值：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; maxNum = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.max(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; minNum = &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.min(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;-22&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(maxNum);  &lt;span class=&quot;comment&quot;&gt;//log: 67&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(minNum);  &lt;span class=&quot;comment&quot;&gt;//log: -22&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - DOM基础</title>
    <link href="http://yoursite.com/2017/07/07/JavaScript%20-%20DOM%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/07/07/JavaScript - DOM基础/</id>
    <published>2017-07-06T18:24:00.000Z</published>
    <updated>2017-07-28T15:00:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。HTML DOM 模型被构造为对象的树。</p>
<p><img src="https://cdn.auth0.com/blog/dombench/domtree.png" alt=""></p>
<p>DOM 定义了用于 HTML 的一系列标准的对象，以及访问和处理 HTML 文档的标准方法。通过 DOM，可以访问所有的 HTML 元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素。我们可以将 DOM 视为连接 HTML 和 JavaScript 的接口。通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML，比如：</p>
<ul>
<li>改变页面中的所有 HTML 元素</li>
<li>改变页面中的所有 HTML 属性</li>
<li>改变页面中的所有 CSS 样式</li>
<li>对页面中的所有事件做出反应</li>
</ul>
  <a id="more"></a>
<h2 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h2><p>通常，通过 JavaScript 找到元素。有三种方法来做这件事：</p>
<ul>
<li>通过 id 找到 HTML 元素</li>
<li>通过标签名找到 HTML 元素</li>
<li>通过类名找到 HTML 元素</li>
</ul>
<h3 id="通过-id-查找-HTML-元素"><a href="#通过-id-查找-HTML-元素" class="headerlink" title="通过 id 查找 HTML 元素"></a>通过 id 查找 HTML 元素</h3><p>语法：<code>document.getElementById(&#39;id&#39;)</code></p>
<p>功能：返回对拥有指定 <code>id</code> 的第一个对象的引用</p>
<p>返回值：DOM 对象</p>
<p>说明：<code>id</code> 为 DOM 元素上 <code>id</code> 属性的值</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    box</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="xml"></span></div><div class="line">    var box = document.getElementById("box");</div><div class="line">    console.log(box);</div><div class="line">    /*log:</div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">     box</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    */</div><div class="line">    var boxs = document.getElementById("boxs");</div><div class="line">    console.log(boxs);</div><div class="line">    /*log:</div><div class="line">    null</div><div class="line">    */</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="通过标签名查找-HTML-元素"><a href="#通过标签名查找-HTML-元素" class="headerlink" title="通过标签名查找 HTML 元素"></a>通过标签名查找 HTML 元素</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找 id="main" 的元素，然后查找 "main" 中的所有 &lt;p&gt; 元素：</span></div><div class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</div><div class="line"><span class="keyword">var</span> y=x.getElementsByTagName(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
<h3 id="通过类名查找-HTML-元素在只适用于-IE9-以上。"><a href="#通过类名查找-HTML-元素在只适用于-IE9-以上。" class="headerlink" title="通过类名查找 HTML 元素在只适用于 IE9 以上。"></a>通过类名查找 HTML 元素在只适用于 IE9 以上。</h3><h2 id="修改元素样式"><a href="#修改元素样式" class="headerlink" title="修改元素样式"></a>修改元素样式</h2><p>语法：<code>ele.style.styleName = styleValue</code></p>
<p>功能：设置 <code>ele</code> 元素的 CSS 样式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text"</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">      <span class="keyword">var</span> text = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'text'</span>);</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</div><div class="line">        text[i].style.color = <span class="string">'#000'</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取和修改标签内内容"><a href="#获取和修改标签内内容" class="headerlink" title="获取和修改标签内内容"></a>获取和修改标签内内容</h2><p>语法：<code>ele.innerHTML</code></p>
<p>功能：返回元素开始标签和结束标签之间的 HTML</p>
<p>语法：<code>ele.innerHTML = &quot;hello&quot;</code></p>
<p>功能：设置元素开始标签和结束标签之间的 HTML</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>).getElementsByTagName(<span class="string">'li'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</div><div class="line">      <span class="keyword">var</span> num = list[i].innerHTML</div><div class="line">      <span class="built_in">console</span>.log(num);</div><div class="line">      list[i].innerHTML = <span class="string">'&lt;i&gt;'</span> + (<span class="built_in">parseInt</span>(num) + <span class="number">10</span>) + <span class="string">'&lt;i&gt;'</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取和修改元素的-class-属性"><a href="#获取和修改元素的-class-属性" class="headerlink" title="获取和修改元素的 class 属性"></a>获取和修改元素的 class 属性</h2><p>语法：<code>ele.className</code></p>
<p>功能：返回元素的 class 属性</p>
<p>语法：<code>ele.className = &quot;hello&quot;</code></p>
<p>功能：设置返回元素的 class 属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.box</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.bag</span> &#123;</div><div class="line">      <span class="attribute">border-color</span>: blue;</div><div class="line">      <span class="attribute">border-width</span>: <span class="number">1em</span>;</div><div class="line">      <span class="attribute">border-style</span>: solid;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</div><div class="line">    <span class="keyword">var</span> boxClass = box.className;</div><div class="line">    box.className = boxClass + <span class="string">' '</span> + <span class="string">'bag'</span>;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="获取和修改元素属性"><a href="#获取和修改元素属性" class="headerlink" title="获取和修改元素属性"></a>获取和修改元素属性</h2><p>元素的属性有标准属性和自定义属性两种，标准属性是指 HTML 元素自身具有的属性，自定义属性既是我们自己给元素添加的属性。</p>
<h3 id="获取和修改标准属性"><a href="#获取和修改标准属性" class="headerlink" title="获取和修改标准属性"></a>获取和修改标准属性</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">      arr[i].align = <span class="string">'left'</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="获取和修改自定义属性"><a href="#获取和修改自定义属性" class="headerlink" title="获取和修改自定义属性"></a>获取和修改自定义属性</h3><p>语法：<code>ele.getAttribute(&quot;key&quot;)</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-type</span>=<span class="string">"upper"</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-type</span>=<span class="string">"lower"</span>&gt;</span>HELLO WORLD!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'p'</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (arr[i].getAttribute(<span class="string">'data-type'</span>) == <span class="string">'upper'</span>) &#123;</div><div class="line">        arr[i].innerHTML = arr[i].innerHTML.toUpperCase();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (arr[i].getAttribute(<span class="string">'data-type'</span>) == <span class="string">'lower'</span>) &#123;</div><div class="line">        arr[i].innerHTML = arr[i].innerHTML.toLowerCase();</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加自定义属性"><a href="#添加自定义属性" class="headerlink" title="添加自定义属性"></a>添加自定义属性</h3><p>语法：<code>ele.setAttribute(&quot;key&quot;, value)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">action</span>=<span class="string">"index.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"a"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> user = <span class="built_in">document</span>.getElementById(<span class="string">"user"</span>);</div><div class="line">    user.setAttribute(<span class="string">"minLen"</span>,<span class="number">3</span>);</div><div class="line">    <span class="keyword">var</span> minLen = user.getAttribute(<span class="string">"minLen"</span>);</div><div class="line">    <span class="keyword">var</span> userValue = user.value;</div><div class="line">    <span class="keyword">if</span> (minLen &gt; userValue.length) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"用户名："</span> + userValue + <span class="string">"太短了"</span>);</div><div class="line">      <span class="comment">//log: 用户名：a太短了</span></div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="删除属性"><a href="#删除属性" class="headerlink" title="删除属性"></a>删除属性</h3><p>语法：<code>ele.removeAttribute(&quot;key&quot;)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">  <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span>hello world!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line">  &lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</div><div class="line">    ele[<span class="number">0</span>].removeAttribute(<span class="string">"align"</span>);</div><div class="line">  <span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。HTML DOM 模型被构造为对象的树。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.auth0.com/blog/dombench/domtree.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;DOM 定义了用于 HTML 的一系列标准的对象，以及访问和处理 HTML 文档的标准方法。通过 DOM，可以访问所有的 HTML 元素，连同它们所包含的文本和属性。可以对其中的内容进行修改和删除，同时也可以创建新的元素。我们可以将 DOM 视为连接 HTML 和 JavaScript 的接口。通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;改变页面中的所有 HTML 元素&lt;/li&gt;
&lt;li&gt;改变页面中的所有 HTML 属性&lt;/li&gt;
&lt;li&gt;改变页面中的所有 CSS 样式&lt;/li&gt;
&lt;li&gt;对页面中的所有事件做出反应&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - Array</title>
    <link href="http://yoursite.com/2017/07/06/JavaScript%20-%20Array/"/>
    <id>http://yoursite.com/2017/07/06/JavaScript - Array/</id>
    <published>2017-07-05T18:24:00.000Z</published>
    <updated>2017-07-28T14:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：<strong>前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 <code>new</code> 创建，而内置对象则不需要。</strong></p>
<p>JavaScript 常见的内置对象有：<code>Array</code> 、<code>String</code> 、<code>Math</code> 、<code>Date</code> 几种。</p>
</blockquote>
<p><code>Array</code> 的元素可以是任意的类型。<code>Array</code> 的创建有两种方式，使用构造函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//构造函数创建数组</span></div><div class="line"><span class="keyword">var</span> nums = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="comment">//指定数组的长度</span></div><div class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line"><span class="comment">//指定数组包含的项</span></div><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</div></pre></td></tr></table></figure>
<p>或者使用字面量来创建数组：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'a'</span>;</div><div class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</div><div class="line"><span class="keyword">var</span> c = <span class="number">100</span>;</div><div class="line"><span class="keyword">var</span> chars = [a, b, c];</div></pre></td></tr></table></figure>
  <a id="more"></a>
<h2 id="读写"><a href="#读写" class="headerlink" title="读写"></a>读写</h2><p><code>Array</code> 的取值和赋值可以通过 <code>[]</code> 进行。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chars = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> a = chars[<span class="number">0</span>];</div><div class="line"><span class="keyword">var</span> f = chars[<span class="number">5</span>];</div><div class="line"><span class="built_in">console</span>.log(a, f);  <span class="comment">//log: a undefined</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> upperChars = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(upperChars.length); <span class="comment">//log: 10</span></div><div class="line"><span class="keyword">var</span> z = <span class="string">'Z'</span>;</div><div class="line">upperChars[<span class="number">24</span>] = z;</div><div class="line"><span class="built_in">console</span>.log(upperChars.length); <span class="comment">//log: 25</span></div><div class="line"><span class="built_in">console</span>.log(upperChars[<span class="number">24</span>], upperChars[<span class="number">2</span>]); <span class="comment">//log: Z undefined</span></div></pre></td></tr></table></figure>
<p>上面的代码说明，<code>Array</code> 可以灵活的改变长度，越界和未赋值的部分，都是 <code>undefined</code>。</p>
<h2 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h2><p>栈方法，顾名思义，就是把数组当做栈来处理，也就是先进先出的原则。主要有以下几个方法：</p>
<h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chars = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">chars[<span class="number">24</span>] = <span class="string">'z'</span>;</div><div class="line"><span class="keyword">var</span> len = chars.push(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(len); <span class="comment">//log: 28</span></div></pre></td></tr></table></figure>
<p><code>push</code> 的作用是将元素序列添加到 <code>Array</code> 的尾部，其返回值是添加后的数组长度。</p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chars = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> c = chars.pop()</div><div class="line"><span class="keyword">var</span> len = chars.length;</div><div class="line"><span class="built_in">console</span>.log(c, len);  <span class="comment">//log: c 2</span></div></pre></td></tr></table></figure>
<p><code>pop</code> 的作用是移除 <code>Array</code> 的最后一个元素，其返回值是被移除的元素。</p>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a>unshift</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chars = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> len = chars.unshift(<span class="number">-3</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(chars);</div><div class="line"><span class="comment">//log: [-3, -2, -1, 0, 1, 2, 3]</span></div><div class="line"><span class="built_in">console</span>.log(len);</div><div class="line"><span class="comment">//log: 7</span></div></pre></td></tr></table></figure>
<p><code>unshift</code> 的作用是将元素序列添加到 <code>Array</code> 的头部，其返回值是添加后的数组长度。</p>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a>shift</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> chars = [];</div><div class="line"><span class="keyword">var</span> unknown = chars.shift()</div><div class="line"><span class="keyword">var</span> len = chars.length;</div><div class="line"><span class="built_in">console</span>.log(unknown, len);  <span class="comment">//log: undefined 0</span></div></pre></td></tr></table></figure>
<p><code>pop</code> 的作用是移除 <code>Array</code> 的第一个元素，其返回值是被移除的元素。</p>
<h2 id="转字符串"><a href="#转字符串" class="headerlink" title="转字符串"></a>转字符串</h2><p><code>join</code> 方法可以将 <code>Array</code> 转换成一个字符串，语法如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> infos = [<span class="number">1</span>, <span class="string">'2'</span>, <span class="literal">true</span>, <span class="number">3.14</span>, <span class="literal">undefined</span>, <span class="literal">null</span>];</div><div class="line"><span class="keyword">var</span> infoStr = infos.join();</div><div class="line"><span class="built_in">console</span>.log(infoStr); </div><div class="line"><span class="comment">//log: 1,2,true,3.14,,</span></div><div class="line"><span class="built_in">console</span>.log(infos.join(<span class="string">'-'</span>)); </div><div class="line"><span class="comment">//log: 1-2-true-3.14--</span></div><div class="line"><span class="built_in">console</span>.log(infos.join(<span class="string">''</span>));</div><div class="line"><span class="comment">//log: 12true3.14</span></div></pre></td></tr></table></figure>
<h2 id="反序"><a href="#反序" class="headerlink" title="反序"></a>反序</h2><p><code>reverse</code> 方法可以将 <code>Array</code> 反序排列，如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>,];</div><div class="line"><span class="keyword">var</span> result = nums.reverse();</div><div class="line"><span class="built_in">console</span>.log(result);  </div><div class="line"><span class="comment">//log: [8, 6, 4, 2]</span></div></pre></td></tr></table></figure>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><code>sort</code> 方法可以根据传入的参数，对 <code>Array</code> 进行排序：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var chars = [<span class="string">'e'</span>, <span class="string">'z'</span>, <span class="string">'p'</span>, <span class="string">'o'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>];</div><div class="line">var result = chars.sort();</div><div class="line">console.log(result);</div><div class="line"><span class="comment">//log: ["a", "c", "e", "o", "p", "z"]</span></div></pre></td></tr></table></figure>
<p>需要注意的是，<code>sort</code> 方法在对数值进行排序时，也是先将元素转为 <code>String</code> 类型在排序，因此，数值的排序是按首位排序，首位相同再对第二位进行比较：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nums = [<span class="number">9</span>, <span class="number">-1</span>, <span class="number">3.24</span>, <span class="number">3.3</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">25.6</span>, <span class="number">25.9</span>, <span class="number">24.8</span>, <span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'z'</span>, <span class="string">'Z'</span>];</div><div class="line"><span class="keyword">var</span> result = nums.sort();</div><div class="line"><span class="built_in">console</span>.log(result);</div><div class="line"><span class="comment">//log: [-1, 0, 2, 24.8, 25.6, 25.9, 3.24, 3.3, 9, "A", "Z", "a", "z"]</span></div></pre></td></tr></table></figure>
<p>如果需要对数值进行排序，那么需要给 <code>sort</code> 传入一个匿名函数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var nums = [9, -1, 3.24, 3.3, 2, 0, 25.6, 25.9, 24.8];</div><div class="line">var result = nums.sort(function(a, b)&#123; return a &gt; b&#125;);</div><div class="line">console.log(result);</div><div class="line">//log: [-1, 0, 2, 3.24, 3.3, 9, 24.8, 25.6, 25.9]</div></pre></td></tr></table></figure>
<h2 id="连接其他数组"><a href="#连接其他数组" class="headerlink" title="连接其他数组"></a>连接其他数组</h2><p><code>concat</code> 方法用于两个或多个数组的连接：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> c = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> arr = a.concat(c, b);</div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"><span class="comment">//log: [1, 2, 3, 7, 8, 9, 4, 5, 6]</span></div></pre></td></tr></table></figure>
<h2 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> subArr = arr.slice(<span class="number">2</span>,<span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(subArr);</div><div class="line"><span class="comment">//log: [undefined, null, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<p><code>slice</code> 方法越界，会截取所有在此范围内的元素。<code>slice</code> 方法可以接受两个参数，<code>start</code> 和 <code>end</code>，其中 <code>start</code> 是必需的，<code>start</code> 参数可以是负数，如果是负数，表示从数组尾部开始计算。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> subArr = arr.slice(<span class="number">-3</span>,<span class="number">-1</span>);</div><div class="line"><span class="built_in">console</span>.log(subArr);</div><div class="line"><span class="comment">//log: [3, 4]</span></div></pre></td></tr></table></figure>
<p>当 <code>slice</code> 方法的参数是负数时，会用数组的长度加上这个数，来确定起始或结束的位置。</p>
<h2 id="删除、插入和替换"><a href="#删除、插入和替换" class="headerlink" title="删除、插入和替换"></a>删除、插入和替换</h2><p><strong>删除</strong>的语法是 <code>arr.splice(index,count)</code>，参数含义如下：</p>
<table>
<thead>
<tr>
<th>形参</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>要删除的起始位置</td>
</tr>
<tr>
<td>count</td>
<td>要删除的元素个数</td>
</tr>
</tbody>
</table>
<p><code>count</code> 如不填，则删除 <code>index</code> 后的所有元素，如为 0，则不删除任何元素，示例如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line"><span class="keyword">var</span> subArr = arr.splice(<span class="number">2</span>,<span class="number">3</span>);</div><div class="line"><span class="built_in">console</span>.log(subArr);</div><div class="line"><span class="comment">//log: [3, 4, 5]</span></div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"><span class="comment">//log: [1, 2, 6]</span></div></pre></td></tr></table></figure>
<p><code>splice</code> 的返回值是被删除的数组片段。</p>
<p><strong>插入</strong>的语法是 <code>arr.splice(index,0,item1,...,itemX)</code>，返回值是空数组；</p>
<p><strong>替换</strong>的语法是 <code>arr.splice(index,count,item1,...,itemX)</code>，返回值是被删除的数组片段；</p>
<h2 id="查找元素下标"><a href="#查找元素下标" class="headerlink" title="查找元素下标"></a>查找元素下标</h2><p><code>indexOf</code> 方法用于查找元素在数组中的位置，可以接收两个参数：</p>
<table>
<thead>
<tr>
<th>形参</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>searchValue</td>
<td>必需，要查找的元素</td>
</tr>
<tr>
<td>startIndex</td>
<td>可选，索引的起始位置，不填则从 0 开始</td>
</tr>
</tbody>
</table>
<p>返回值是 <code>Number</code> 类型，如未找到该元素，则返回 <code>-1</code>，如有多个元素，则返回第一个元素的下标：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="number">3</span>,<span class="number">4</span>);</div><div class="line"><span class="built_in">console</span>.log(index);</div><div class="line"><span class="comment">//log: 5</span></div></pre></td></tr></table></figure>
<p><code>lastIndexOf</code> 方法和 <code>indexOf</code> 作用相同，不同的地方是从数组末尾开始查找。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;JavaScript 中的对象是指带有属性和方法的特殊数据类型。JavaScript 中的所有事物都是对象，比如字符串、数组、函数等。对象分为内置对象和原生对象，它们的区别在于：&lt;strong&gt;前者总是在引擎初始化阶段就被创建好的对象，是后者的一个子集；而后者包括了一些在运行过程中动态创建的对象。从语法层面来看的话，原生对象需要使用 &lt;code&gt;new&lt;/code&gt; 创建，而内置对象则不需要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JavaScript 常见的内置对象有：&lt;code&gt;Array&lt;/code&gt; 、&lt;code&gt;String&lt;/code&gt; 、&lt;code&gt;Math&lt;/code&gt; 、&lt;code&gt;Date&lt;/code&gt; 几种。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Array&lt;/code&gt; 的元素可以是任意的类型。&lt;code&gt;Array&lt;/code&gt; 的创建有两种方式，使用构造函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//构造函数创建数组&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nums = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//指定数组的长度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; colors = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//指定数组包含的项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者使用字面量来创建数组：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; chars = [a, b, c];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>字符编码的故事</title>
    <link href="http://yoursite.com/2017/07/03/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://yoursite.com/2017/07/03/字符编码的故事/</id>
    <published>2017-07-02T18:24:00.000Z</published>
    <updated>2017-07-28T15:02:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久以前，有一群人，他们决定用 8 个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到 8 个开关状态是好的，于是他们把这称为 <code>字节</code>。</p>
<p>再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为 <code>计算机</code>。</p>
<a id="more"></a>
<h2 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h2><p>开始计算机只在美国用，八位的字节一共可以组合出 256 种不同的状态。 他们把其中的编号从 0 开始的 32 种状态分别规定了特殊的用途，一但终端、打印机遇上约定好的这些字节被传过来时，就要做一些约定的动作，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">遇上0×10, 终端就换行；</div><div class="line"></div><div class="line">遇上0×07, 终端就向人们嘟嘟叫；</div><div class="line"></div><div class="line">遇上0x1b, 打印机就打印反白的字，或者终端就用彩色显示字母。</div></pre></td></tr></table></figure>
<p>他们看到这样很好，于是就把这些 <code>0×20</code> 以下的字节状态称为 <code>控制码</code>。他们又把所有的空格、标点符号、数字、大小写字母分别用连续的字节状态表示，一直编到了第 127 号，这样计算机就可以用不同字节来存储英语的文字了。</p>
<p>大家看到这样，都感觉很好，于是大家都把这个方案叫做 <code>ASCII</code> 编码。</p>
<blockquote>
<p>American Standard Code for Information Interchange：美国信息互换标准代码。</p>
</blockquote>
<p>当时世界上所有的计算机都用同样的 <code>ASCII</code> 方案来保存英文文字。</p>
<h2 id="GB2312"><a href="#GB2312" class="headerlink" title="GB2312"></a>GB2312</h2><p>后来，就像建造巴比伦塔一样，世界各地的都开始使用计算机，但是很多国家用的不是英文，他们的字母里有许多是 <code>ASCII</code> 里没有的，为了可以在计算机保存他们的文字，他们决定采用 127 号之后的空位来表示这些新的字母、符号，还加入了很多画表格时需要用下到的横线、竖线、交叉等形状，一直把序号编到了最后一个状态 255。</p>
<p>从128 到 255 这一页的字符集被称为 <code>扩展字符集</code>。从此之后，贪婪的人类再没有新的状态可以用了，美帝国主义可能没有想到还有第三世界国家的人们也希望可以用到计算机吧！</p>
<p>等中国人们得到计算机时，已经没有可以利用的字节状态来表示汉字，况且有 6000 多个常用汉字需要保存呢。</p>
<p>但是这难不倒智慧的中国人民，我们不客气地把那些 127 号之后的奇异符号们直接取消掉, 规定：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">一个小于127的字符的意义与原来相同，但两个大于 127 的字符连在一起时，就表示一个汉字；</div><div class="line"></div><div class="line">前面的一个字节（他称之为高字节）从 0xA1 用到 0xF7，后面一个字节（低字节）从 0xA1 到 0xFE；</div></pre></td></tr></table></figure>
<p>这样我们就可以组合出大约7000多个简体汉字了。</p>
<p>在这些编码里，我们还把数学符号、罗马希腊的字母、日文的假名们都编进去了，连在 <code>ASCII</code> 里本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的 <code>全角字符</code>。</p>
<p>而原来在 127 号以下的那些就叫 <code>半角字符</code> 了。</p>
<p>中国人民看到这样很不错，于是就把这种汉字方案叫做 <code>GB2312</code>。<code>GB2312</code> 是对 <code>ASCII</code> 的中文扩展。</p>
<h2 id="GBK"><a href="#GBK" class="headerlink" title="GBK"></a>GBK</h2><p>但是中国的汉字太多了，我们很快就就发现有许多人的人名没有办法在这里打出来，特别是某些很会麻烦别人的国家领导人。于是我们不得不继续把 <code>GB2312</code> 没有用到的码位找出来老实不客气地用上。</p>
<p>后来还是不够用，于是干脆不再要求低字节一定是 127 号之后的内码，只要第一个字节是大于 127 就固定表示这是一个汉字的开始，不管后面跟的是不是扩展字符集里的内容。结果扩展之后的编码方案被称为 <code>GBK</code> 标准，<code>GBK</code> 包括了<code>GB2312</code> 的所有内容，同时又增加了近 20000 个新的汉字（包括繁体字）和符号。</p>
<h2 id="GB18030-DBCS"><a href="#GB18030-DBCS" class="headerlink" title="GB18030 / DBCS"></a>GB18030 / DBCS</h2><p>后来少数民族也要用电脑了，于是我们再扩展，又加了几千个新的少数民族的字，<code>GBK</code> 扩成了 <code>GB18030</code>。从此之后，中华民族的文化就可以在计算机时代中传承了。</p>
<p>中国的程序员们看到这一系列汉字编码的标准是好的，于是通称他们叫做 <code>DBCS</code>。</p>
<blockquote>
<p>Double Byte Charecter Set：双字节字符集。</p>
</blockquote>
<p>在 <code>DBCS</code> 系列标准里，最大的特点是<strong>两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里</strong>，因此他们写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于 127 的，那么就认为一个双字节字符集里的字符出现了。</p>
<p>那时候凡是受过加持，会编程的计算机僧侣们都要每天念下面这个咒语数百遍：”一个汉字算两个英文字符！一个汉字算两个英文字符……”</p>
<p>因为当时各个国家都像中国这样搞出一套自己的编码标准，结果互相之间谁也不懂谁的编码，谁也不支持别人的编码。</p>
<p>连大陆和台湾这样只相隔了 150 海里，使用着同一种语言的兄弟地区，也分别采用了不同的 DBCS 编码方案。</p>
<p>当时的中国人想让电脑显示汉字，就必须装上一个 <code>汉字系统</code>，专门用来处理汉字的显示、输入的问题，但是那个台湾的愚昧封建人士写的算命程序就必须加装另一套支持 <code>BIG5</code> 编码的什么 <code>倚天汉字系统</code> 才可以用，装错了字符系统，显示就会乱了套！这怎么办？而且世界民族之林中还有那些一时用不上电脑的穷苦人民，他们的文字又怎么办？ 真是计算机的巴比伦塔命题啊！</p>
<h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p>正在这时，大天使加百列及时出现了，一个叫 <strong>ISO</strong> 的国际组织决定着手解决这个问题。</p>
<blockquote>
<p>International Organization for Standardization：国际标准化组织。</p>
</blockquote>
<p>他们采用的方法很简单，废了所有的地区性编码方案，重新搞一个包括了地球上所有文化、所有字母和符 的编码！</p>
<p>他们打算叫它 <code>Universal Multiple-Octet Coded Character Set</code>，简称 <code>UCS</code>，俗称 <code>Unicode</code>。</p>
<p><code>Unicode</code> 开始制订时，计算机的存储器容量极大地发展了，空间再也不成为问题了。于是 ISO 就直接规定必须用两个字节，也就是 16 位来统一表示所有的字符，对于 <code>ASCII</code> 里的那些 <code>半角字符</code>，<code>Unicode</code> 保持其原编码不变，只是将其长度由原来的 8 位扩展为16 位，而其他文化和语言的字符则全部重新统一编码。</p>
<p>由于 <code>半角英文符号</code> 只需要用到低 8 位，所以其高 8 位永远是 0，因此这种大气的方案在保存英文文本时会多浪费一倍的空间。</p>
<p>这时候，从旧社会里走过来的程序员开始发现一个奇怪的现象：他们的 <code>strlen</code> 函数靠不住了，一个汉字不再是相当于两个字符了，而是一个！是的，<strong>从 <code>Unicode</code> 开始，无论是半角的英文字母，还是全角的汉字，它们都是统一的 <code>一个字符</code>！同时，也都是统一的 <code>两个字节</code></strong>，请注意 <code>字符</code> 和 <code>字节</code> 两个术语的不同：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“字节”是一个8位的物理存贮单元，</div><div class="line"></div><div class="line">而“字符”则是一个文化相关的符号。</div></pre></td></tr></table></figure>
<p>在 <code>Unicode</code> 中，一个字符就是两个字节。一个汉字算两个英文字符的时代已经快过去了。</p>
<h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p><code>Unicode</code> 同样也不完美，这里就有两个的问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">一个是，如何才能区别 Unicode 和 ASCII？计算机怎么知道三个字节表示一个符号，而不是分别表示三个符号呢？</div><div class="line"></div><div class="line">第二个问题是，我们已经知道，英文字母只用一个字节表示就够了，如果 Unicode 统一规定，每个符号用三个或四个字节表示，那么每个英文字母前都必然有二到三个字节是 0，这对于存储空间来说是极大的浪费，文本文件的大小会因此大出二三倍，这是难以接受的。</div></pre></td></tr></table></figure>
<p><code>Unicode</code> 在很长一段时间内无法推广，直到互联网的出现，为解决  <code>Unicode</code> 如何在网络上传输的问题，于是面向传输的众多 UTF 标准出现了，</p>
<blockquote>
<p>Universal Character Set（UCS）Transfer Format：UTF编码。</p>
</blockquote>
<p>顾名思义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UTF-8就是每次 8 个位传输数据，</div><div class="line"></div><div class="line">而UTF-16就是每次 16 个位。</div></pre></td></tr></table></figure>
<p><code>UTF-8</code> 就是在互联网上使用最广的一种 <code>Unicode</code> 的实现方式，这是为传输而设计的编码，并使编码无国界，这样就可以显示全世界上所有文化的字符了。</p>
<p><code>UTF-8</code> 最大的一个特点，就是它是一种变长的编码方式。</p>
<p>它可以使用 1~4 个字节表示一个符号，根据不同的符号而变化字节长度，当字符在 <code>ASCII</code> 码的范围时，就用一个字节表示，保留了 <code>ASCII</code> 字符一个字节的编码做为它的一部分，<strong>需要注意的是 <code>Unicode</code> 一个中文字符占 2 个字节，而 <code>UTF-8</code> 一个中文字符占 3 个字节。</strong></p>
<p>从 <code>Unicode</code> 到 <code>UTF-8</code> 并不是直接的对应，而是要过一些算法和规则来转换。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Unicode符号范围 | UTF-8编码方式</div><div class="line"></div><div class="line">(十六进制) | （二进制） </div><div class="line"></div><div class="line">—————————————————————– </div><div class="line"></div><div class="line">0000 0000-0000 007F | 0xxxxxxx </div><div class="line"></div><div class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx </div><div class="line"></div><div class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx </div><div class="line"></div><div class="line">0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</div></pre></td></tr></table></figure>
<h2 id="原文链接"><a href="#原文链接" class="headerlink" title="原文链接"></a>原文链接</h2><p><a href="https://www.zhihu.com/question/23374078/answer/69732605" target="_blank" rel="external">https://www.zhihu.com/question/23374078/answer/69732605</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久以前，有一群人，他们决定用 8 个可以开合的晶体管来组合成不同的状态，以表示世界上的万物。他们看到 8 个开关状态是好的，于是他们把这称为 &lt;code&gt;字节&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;再后来，他们又做了一些可以处理这些字节的机器，机器开动了，可以用字节来组合出很多状态，状态开始变来变去。他们看到这样是好的，于是它们就这机器称为 &lt;code&gt;计算机&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="字符编码" scheme="http://yoursite.com/categories/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
    
      <category term="字符编码" scheme="http://yoursite.com/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 定位模型</title>
    <link href="http://yoursite.com/2017/06/25/CSS%20%E5%AE%9A%E4%BD%8D%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/25/CSS 定位模型/</id>
    <published>2017-06-24T17:21:00.000Z</published>
    <updated>2017-07-14T13:47:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>position</code> 属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。<code>position</code> 属性有以下几种模型：</p>
<ul>
<li>static 自然模型</li>
<li>relative 相对定位模型</li>
<li>absolute 绝对定位模型</li>
<li>fixed 固定定位模型</li>
<li>sticky 磁贴定位模型</li>
</ul>
<p>在学习布局模型之前，我们先来了解几个属性。</p>
<a id="more"></a>
<h2 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h2><p><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。元素可拥有负的 <code>z-index</code> 属性值。仅能在定位元素，例如 <code>position:absolute</code> 这样的元素上奏效！</p>
<p>该属性设置一个定位元素沿 z 轴的位置，z 轴定义为垂直延伸到显示区的轴。如果为正数，则离用户更近，为负数则表示离用户更远。</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>auto</td>
<td>默认。堆叠顺序与父元素相等。</td>
</tr>
<tr>
<td>number</td>
<td>设置元素的堆叠顺序。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 z-index 属性的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">img</span><span class="selector-class">.x</span> &#123;</div><div class="line">      <span class="attribute">position</span>: absolute;</div><div class="line">      <span class="attribute">left</span>: <span class="number">0px</span>;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0px</span>;</div><div class="line">      <span class="attribute">z-index</span>: -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"x"</span> <span class="attr">src</span>=<span class="string">"http://www.w3school.com.cn/i/eg_mouse.jpg"</span> /&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>默认的 z-index 是 0。Z-index -1 拥有更低的优先级。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，<code>img</code> 原本应该在 <code>p</code> 元素的上面，但是由于修改了 <code>img</code> 的 <code>z-index</code> 属性，因此 <code>p</code> 显示在了 <code>img</code> 的上面。</p>
<h2 id="static-自然定位"><a href="#static-自然定位" class="headerlink" title="static 自然定位"></a>static 自然定位</h2><p><code>static</code> 的叫法有很多，如静态定位，常规定位，自然定位等。特点如下：</p>
<ol>
<li>使元素定位于<strong>常规/自然流</strong>中，也就是块、行垂直排列下去，行内元素水平从左往右排列；</li>
<li>忽略 <code>top、bottom、left、right</code> 或者 <code>z-index</code> 声明；</li>
<li>两个相邻的元素如果都设置了 <code>margin</code>，那么最终外边距会取两者中最大的；</li>
<li>如果是具有固定的 <code>width、height</code> 属性，如果将左右外边距设置为 <code>auto</code>，则左右外边距会自动扩大占满剩余宽度，最终的效果是这个块水平居中。</li>
</ol>
<h2 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h2><p><code>relative</code> 作用是使元素成为可定位的祖先元素，通俗的讲，就是可以使其他元素以此元素作为参照物设定坐标。<code>relative</code> 有以下几个特点：</p>
<ol>
<li><p>可以使用 <code>top、bottom、right、left、z-index</code> 等属性进行相对定位，这里的相对定位参展的是此元素在自然流中原本的位置；</p>
</li>
<li><p>相对定位的元素不会离开常规流，也就是说使用 <code>top、bottom、right、left、z-index</code> 等属性设定偏移后，自然流中依然保留此元素的位置；</p>
</li>
<li><p>任何元素都可以设置为 <code>relation</code>，它的绝对定位的后代都可以相对于它进行绝对定位，这点在网页广告中应用较多，如下所示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen</span></span></div><div class="line">    .parent &#123;</div><div class="line">      width: 200px;</div><div class="line">      height: 150px;</div><div class="line">      border: 1px solid #000;</div><div class="line">      position: relative;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    .child &#123;</div><div class="line">      width: 80px;</div><div class="line">      height: 80px;</div><div class="line">      background-color: blue;</div><div class="line">      position: absolute;</div><div class="line">      right: -80px;</div><div class="line">      top: 0;</div><div class="line">    &#125;</div><div class="line">  &lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line"></div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div class="<span class="attr">parent</span>"&gt;<span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>可以使浮动元素发生偏移，并控制它们的堆叠顺序。这句话怎么理解呢？通常在浮动元素中，我们无法修改元素的偏移，但使用 <code>relation</code> 后，就可以通过 <code>top、bottom、right、left</code> 进行偏移了，同理，也可以通过 <code>z-index</code> 来改变堆叠顺序。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.block</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.block</span><span class="selector-pseudo">:nth-child(2)</span> &#123;</div><div class="line">      <span class="comment">/*改变浮动元素的位置*/</span></div><div class="line">      <span class="attribute">position</span>: relative;</div><div class="line">      <span class="attribute">top</span>: <span class="number">10em</span>;</div><div class="line">      <span class="comment">/*margin-top: 10px;*/</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/*改变浮动元素的层级*/</span></div><div class="line">    <span class="selector-class">.block</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</div><div class="line">      <span class="attribute">z-index</span>: <span class="number">9</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.block</span><span class="selector-pseudo">:nth-child(5)</span> &#123;</div><div class="line">      <span class="attribute">position</span>: relative;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid red;</div><div class="line">      <span class="attribute">left</span>: -<span class="number">52px</span>;</div><div class="line">      <span class="attribute">z-index</span>: <span class="number">20</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>E<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>F<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h2><p><code>absolute</code> 生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。位置通过 <code>left、top、right、bottom</code> 属性进行规定，<code>absolute</code> 有以下特性：</p>
<ol>
<li><p>使元素脱离常规流，也就是说自然流中不会再保存此元素的位置，此处需要注意的是，如果使用 <code>%</code> 作为单位进行偏移，这个 <code>%</code> 对比的是最近的祖先元素；</p>
</li>
<li><p>如果有父级元素中有 <code>relative</code> ，那么这个标签就是此元素的祖先元素，如果没有，那么 <code>&lt;body&gt;</code> 就是此元素的祖先元素；</p>
</li>
<li><p><code>right、left、top、bottom</code> 等值如果设置为 <code>0px</code>，它将对齐到最近的祖先元素的各边，这种特性可以用来设定居中对齐，需要注意的是，如果此元素没有设定宽高，实际上和 <code>width: 100%;  height: 100%;</code> 是一个意思；如果设定了宽高，可以使用以下方法：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: auto auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>right、left、top、bottom</code> 等值如果设置为 auto，那么它会回到常规流中；</p>
</li>
</ol>
<h2 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h2><p><code>absolute</code> 和 <code>fixed</code> 都是用于绝对定位，两者不同之处在以下几点：</p>
<ol>
<li><code>absolute</code> 相对于最近的祖先元素进行绝对定位，而 <code>fixed</code> 是相对于浏览器的窗口进行定位，这个特点使得 <code>fixed</code> 适合用于悬浮效果；</li>
<li>固定定位元素不会随着浏览器窗口的滚动而滚动；  </li>
</ol>
<h2 id="sticky-磁贴定位"><a href="#sticky-磁贴定位" class="headerlink" title="sticky 磁贴定位"></a>sticky 磁贴定位</h2><p><code>sticky</code> 也有很多名字，比如磁贴定位、粘性定位、吸附定位等，<code>sticky</code> 只适用于 CSS3 版本。<code>sticky</code> 类似 <code>relative</code> 和 <code>fixed</code> 的结合体，使用 <code>sticky</code> 可以很轻松的做出元素到达浏览器顶部后悬浮的效果：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.header</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.nav</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">position</span>: sticky;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    这里是 logo</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">    这里是导航，有分享，收藏，登录，喜欢等等</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>sticky</code> 有以下几个特性：</p>
<ol>
<li><p>如果产生偏移，原位置依然还会在常规流中；</p>
</li>
<li><p>如果它的祖先元素有滚动，那么它的偏移标尺就是最近的祖先元素，这个改怎么理解呢？如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    * &#123;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.header</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.nav</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">height</span>: <span class="number">50px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">      <span class="attribute">position</span>: sticky;</div><div class="line">      <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.top</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: yellow;</div><div class="line">      <span class="attribute">height</span>: <span class="number">70px</span>;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.content</span> &#123;</div><div class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">position</span>: relative;</div><div class="line">      <span class="attribute">overflow</span>: scroll;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></div><div class="line">    这里是 logo</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span></div><div class="line">      这里是一些内容</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav"</span>&gt;</span></div><div class="line">      这里是导航，有分享，收藏，登录，喜欢等等</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此时，<code>sticky</code> 的父级元素是有滚动的，因此它的偏移标尺是父级元素，因此滚动第二层的下拉框，会触发悬浮，滚动第一次则无效果；</p>
</li>
<li><p>如果祖先元素没有滚动，那么它的偏移标尺就是浏览器的窗口；</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;position&lt;/code&gt; 属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。&lt;code&gt;position&lt;/code&gt; 属性有以下几种模型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static 自然模型&lt;/li&gt;
&lt;li&gt;relative 相对定位模型&lt;/li&gt;
&lt;li&gt;absolute 绝对定位模型&lt;/li&gt;
&lt;li&gt;fixed 固定定位模型&lt;/li&gt;
&lt;li&gt;sticky 磁贴定位模型&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在学习布局模型之前，我们先来了解几个属性。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 浮动</title>
    <link href="http://yoursite.com/2017/06/22/CSS%20%E6%B5%AE%E5%8A%A8/"/>
    <id>http://yoursite.com/2017/06/22/CSS 浮动/</id>
    <published>2017-06-21T17:21:00.000Z</published>
    <updated>2017-07-14T13:44:53.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>float</code> 属性可以让元素显示在任意的问题，下面是 <code>float</code> 的几个常用值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左浮动</td>
</tr>
<tr>
<td>right</td>
<td>右浮动</td>
</tr>
<tr>
<td>none</td>
<td>无浮动</td>
</tr>
<tr>
<td>inherit</td>
<td>继承浮动</td>
</tr>
</tbody>
</table>
<p><code>float</code> 属性最初被设计出来，是为了解决图片的排版问题，也就是让文字环绕着图片。</p>
<a id="more"></a>
<h2 id="浮动的原因和副作用"><a href="#浮动的原因和副作用" class="headerlink" title="浮动的原因和副作用"></a>浮动的原因和副作用</h2><p>CSS 的定位有 3 种机制：</p>
<ul>
<li>标准流，也叫做普通流；</li>
<li>定位；</li>
<li>浮动；</li>
</ul>
<p>浮动这种方式元素脱离了文档的标准流，但也会影响它周围的元素。浮动的元素不再占有原始的空间，转而占有其他的空间，这会导致父元素无法检测子元素的高度，从而出现父元素塌陷的问题，父元素的塌陷又导致依赖这个父元素布局的元素被浮动元素所遮挡，那么这样的问题如何解决呢？</p>
<h2 id="解决浮动副作用"><a href="#解决浮动副作用" class="headerlink" title="解决浮动副作用"></a>解决浮动副作用</h2><p>我们知道浮动带来的主要问题是父元素的塌陷，这个问题可以通过以下几种方案解决：</p>
<ul>
<li>手动给父元素添加高度；</li>
<li>通过 <code>clear</code> 清除内部和外部浮动；</li>
<li>给父元素添加 <code>overflow</code> 属性并结合 <code>zoom:1</code> 使用；</li>
<li>给父元素添加浮动。</li>
</ul>
<h3 id="手动给父元素添加高度"><a href="#手动给父元素添加高度" class="headerlink" title="手动给父元素添加高度"></a>手动给父元素添加高度</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="comment">/*手动设置高度，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">height</span>: <span class="number">32px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上就是通过手动设定父元素高度来解决塌陷，但这种解决方法不是很好，首先我们要确定子元素高度，其次，<strong>如果子元素很多，宽度不够导致子元素换行，父元素的高度就又不够了</strong>。</p>
<h3 id="clear-属性"><a href="#clear-属性" class="headerlink" title="clear 属性"></a>clear 属性</h3><p><code>clear</code> 属性定义了元素的哪边上不允许出现浮动元素。在 CSS1 和 CSS2 中，这是通过自动为设置了 <code>clear</code> 属性的元素增加上外边距实现的。在 CSS2.1 中，会在元素上外边距之上增加清除空间，而外边距本身并不改变。不论哪一种改变，最终结果都一样，<strong>如果声明为左边或右边清除，会使元素的上外边框边界刚好在该边上浮动元素的下外边距边界之下。对于 CSS 的清除浮动 <code>clear</code>，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。</strong><code>clear</code> 属性有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>在左侧不允许浮动元素。</td>
</tr>
<tr>
<td>right</td>
<td>在右侧不允许浮动元素。</td>
</tr>
<tr>
<td>both</td>
<td>在左右两侧均不允许浮动元素。</td>
</tr>
<tr>
<td>none</td>
<td>默认值。允许浮动元素出现在两侧。</td>
</tr>
<tr>
<td>inherit</td>
<td>规定应该从父元素继承 clear 属性的值。</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.div1</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">float</span>: right;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.div2</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">120px</span>;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="comment">/*使用 clear 属性，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="overflow-和-zoom"><a href="#overflow-和-zoom" class="headerlink" title="overflow 和 zoom"></a>overflow 和 zoom</h2><p><code>overflow</code> 属性规定当内容溢出元素框时发生的事情。这个属性定义溢出元素内容区的内容会如何处理。如果值为 scroll，不论是否需要，用户代理都会提供一种滚动机制。因此，有可能即使元素框中可以放下所有内容也会出现滚动条。这个属性有以下几个常用的值：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">visible</span>:默认值。内容不会被修剪，会呈现在元素框之外。</div><div class="line"></div><div class="line"><span class="selector-tag">hidden</span>:内容会被修剪，并且其余内容是不可见的。</div><div class="line"></div><div class="line"><span class="selector-tag">scroll</span>:内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</div><div class="line"></div><div class="line"><span class="selector-tag">auto</span>:如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</div><div class="line"></div><div class="line"><span class="selector-tag">inherit</span>:规定应该从父元素继承 <span class="selector-tag">overflow</span> 属性的值。</div></pre></td></tr></table></figure>
<p><code>zoom</code> 则是 IE 浏览器专用的一个属性。它可以根据子元素的总体高度来放大缩小父元素的高度。这种方法同样不是很完美，如果子元素宽度超过父元素，<code>overflow</code> 属性会导致子元素的部分内容不可见。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="comment">/*使用 overflow 和 zoom 属性，解决父元素塌陷*/</span></div><div class="line">      <span class="attribute">overflow</span>: hidden;</div><div class="line">      <span class="attribute">zoom</span>: <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="给父元素添加浮动"><a href="#给父元素添加浮动" class="headerlink" title="给父元素添加浮动"></a>给父元素添加浮动</h3><p>给父元素添加 <code>float</code> 属性后，父元素和子元素相当于在同一个流里，所以自然子元素会撑开父元素，因此父元素就不再塌陷，但是这会导致父元素的兄弟元素收到影响，那么如何解决呢？我们可以给父元素的兄弟元素添加 <code>clear</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-class">.per</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">500px</span>;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.bro</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">background-color</span>: blue;</div><div class="line">      <span class="attribute">clear</span>: both;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-class">.test</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">30px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"per"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bro"</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;float&lt;/code&gt; 属性可以让元素显示在任意的问题，下面是 &lt;code&gt;float&lt;/code&gt; 的几个常用值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;left&lt;/td&gt;
&lt;td&gt;左浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;right&lt;/td&gt;
&lt;td&gt;右浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;inherit&lt;/td&gt;
&lt;td&gt;继承浮动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;float&lt;/code&gt; 属性最初被设计出来，是为了解决图片的排版问题，也就是让文字环绕着图片。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 盒子模型</title>
    <link href="http://yoursite.com/2017/06/15/CSS%20%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/06/15/CSS 盒子模型/</id>
    <published>2017-06-14T17:21:00.000Z</published>
    <updated>2017-07-14T13:41:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在网页中，元素可以视作可以产生矩形的框，这些框会影响元素之间的距离，元素内容的距离等。盒子模型的概念是将网页视作一个个盒子，每个盒子用来放网页中的各种元素。比如图片，文字等元素，都可以视为盒子，这些盒子可以用更大的盒子 <code>&lt;div&gt;</code> 进行嵌套。将这些盒子进行嵌套，叠加，排列，最后就成为了网页。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png" alt="盒子模型"></p>
<a id="more"></a>
<h2 id="width"><a href="#width" class="headerlink" title="width"></a>width</h2><p>如上图所示，<code>height</code> 和 <code>width</code> 是指元素本身的宽和高，宽度的值可以是数值和百分比以及 <code>auto</code>，与宽度有关的还有以下两个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>min-width</td>
<td>最大宽度</td>
</tr>
<tr>
<td>max-width</td>
<td>最小宽度</td>
</tr>
</tbody>
</table>
<p>最小和最大宽度，主要是为了防止页面变形，比如一个页面的宽度设置为百分比，这时此页面的宽度会根据浏览器的宽度而定，但如果浏览器的宽度过小，页面就会变形。</p>
<p>例如百分比设置的页面，浏览器窗口宽度被缩小成 <code>100px</code> 宽度，如果设定了 <code>min-width:780px</code>，那么网页会正常显示，只不过有一部分看不到。同理，<code>max-width</code> 也是如此，现在大多显示都是宽屏的，如果不想页面铺满全屏或各模块的间隔过大，就可以通过最大宽度进行限制。</p>
<h2 id="height"><a href="#height" class="headerlink" title="height"></a>height</h2><p><code>height</code> 和 <code>width</code> 的值时一样的，而且同样有两个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>min-height</td>
<td>最大高度</td>
</tr>
<tr>
<td>max-height</td>
<td>最小高度</td>
</tr>
</tbody>
</table>
<p>我们有时设置一个对象盒子时候避免对象没有内容时候不能撑开，但内容多少不能确定所以又不能固定高度，这个时候我们就会需要设置 <code>min-height</code> 最小高度撑高对象盒子。当内容少时候最小高度能将内容显示出，如果内容多余最小高度能装下时候，对象也会再随内容增多而增高。</p>
<p><code>max-height</code> 此属性很少使用，可能是为了避免内容太多将高度撑太高影响布局美化统一，这个时候我们设置最大高度限制。比如一个 <code>table tr td</code> 表格对象里装一个图片，而图片高度不确定，如果太高了不想图片撑破 <code>tr td</code> 表格，这个时候通过 <code>max-height</code> 限制图片最大高度是有必要的。</p>
<p><strong>需要注意的是，如果 <code>max</code> 小于 <code>min</code> 时，元素会优先使用 <code>min-height</code>，宽度也是如此。 </strong></p>
<h2 id="支持-height-和-width-的元素"><a href="#支持-height-和-width-的元素" class="headerlink" title="支持 height 和 width 的元素"></a>支持 height 和 width 的元素</h2><p>块级元素支持 <code>height</code> 和 <code>width</code> 属性，而行内元素不支持。此外，替换元素也支持 <code>height</code> 和 <code>width</code> 属性，那么是替换元素呢？</p>
<h3 id="替换元素"><a href="#替换元素" class="headerlink" title="替换元素"></a>替换元素</h3><p>替换元素是浏览器根据其标签的元素与属性来判断显示具体的内容。</p>
<p>比如：<code>&lt;input /&gt; type=&quot;text&quot;</code> 时，这是一个文本输入框，换一个其他的时候，浏览器显示就不一样。</p>
<p>HTML中的 <code>&lt;img&gt;、&lt;input&gt;、&lt;textarea&gt;、&lt;select&gt;、&lt;object&gt;</code> 都是替换元素，这些元素都没有实际的内容。</p>
<h3 id="非替换元素"><a href="#非替换元素" class="headerlink" title="非替换元素"></a>非替换元素</h3><p>HTML 的大多数元素是不可替换元素，他们将内容直接告诉浏览器，将其显示出来。比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;wanmei.com&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>浏览器将把这段内容直接显示出来。</p>
<h2 id="boder"><a href="#boder" class="headerlink" title="boder"></a>boder</h2><table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>boder-width</td>
<td>边框宽度</td>
</tr>
<tr>
<td>boder-color</td>
<td>边框颜色</td>
</tr>
<tr>
<td>boder-style</td>
<td>边框样式</td>
</tr>
</tbody>
</table>
<h2 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h2><p><code>padding</code> 属性是指元素内容到元素边框的距离。<code>padding</code> 可以通过四个方向表示对应的内边距：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>padding-left</td>
<td>左内边距</td>
</tr>
<tr>
<td>padding-right</td>
<td>右内边距</td>
</tr>
<tr>
<td>padding-top</td>
<td>顶内边距</td>
</tr>
<tr>
<td>padding-bottom</td>
<td>底内边距</td>
</tr>
</tbody>
</table>
<p>它们的值可以是长度值和百分比，但不能是负值。盒子在网页中所占用的空间，不单与 <code>height</code> 和 <code>width</code> 属性有关，还与 <code>padding</code> 属性有关。</p>
<h2 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h2><p><code>margin</code> 属性用于设定元素与元素之间的距离，即外边距，<code>margin</code> 同样有四个方向：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>margin-left</td>
<td>左外边距</td>
</tr>
<tr>
<td>margin-right</td>
<td>右外边距</td>
</tr>
<tr>
<td>margin-top</td>
<td>顶外边距</td>
</tr>
<tr>
<td>margin-bottom</td>
<td>底外边距</td>
</tr>
</tbody>
</table>
<p>与 <code>padding</code> 不同的是，<code>margin</code> 的值可以是负数。默认情况下，下面这些元素是存在外边距的，为了不受默认边距的影响，我们经常会去掉他们的边距：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span>, <span class="selector-tag">p</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>margin</code> 还有一个特殊的值 <code>auto</code>，这个值会使元素在父元素中水平居中。</p>
<p><strong>需要注意的是，两个元素之间的外边距，不会相加，而是取其中较大的一个，作为彼此的间距。</strong></p>
<h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p><code>display</code> 属性用于设置元素是内联元素还是块级元素，它有以下两个值：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">inline</span>:元素将显示为内联元素，元素前后没有换行</div><div class="line"></div><div class="line"><span class="selector-tag">block</span>:元素将显示为块级元素，元素前后会带有换行</div><div class="line"></div><div class="line"><span class="selector-tag">inline-block</span>:行内块元素，元素呈现为 <span class="selector-tag">inline</span>，但具有 <span class="selector-tag">block</span> 相应的特性</div><div class="line"></div><div class="line"><span class="selector-tag">none</span>:元素不会被显示</div></pre></td></tr></table></figure>
<p>需要注意的是，内联元素和使用 <code>display: inline</code> 设定为内联的元素，<code>width</code> 和 <code>height</code> 无效，水平方向的 <code>margin</code> 和 <code>padding</code> 有效，垂直无效。</p>
<p>块级元素和行内块元素，垂直和水平的 <code>margin</code> 和 <code>padding</code> 均有效。</p>
<h2 id="CSS-交互效果"><a href="#CSS-交互效果" class="headerlink" title="CSS 交互效果"></a>CSS 交互效果</h2><p>之前我们已经了解过，当鼠标移过时可以通过 <code>:hover</code> 伪类捕捉事件并修改元素，那么一个元素的事件如何修改另一个元素呢？如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>display属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">ul</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">li</span> &#123;</div><div class="line">      <span class="attribute">display</span>: none;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="selector-tag">ul</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">li</span> &#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">      <span class="attribute">display</span>: inline;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>家电<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>冰箱<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>空调<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>洗衣机<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在这个例子中，<code>li</code> 标签默认隐藏，当鼠标移动到 <code>ul</code> 上面时，<code>li</code> 标签会以行内元素显示。</p>
<p><strong>需要注意的是，这种事件只能修改自己的子元素，兄弟元素和父级元素无法通过这种方式修改。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在网页中，元素可以视作可以产生矩形的框，这些框会影响元素之间的距离，元素内容的距离等。盒子模型的概念是将网页视作一个个盒子，每个盒子用来放网页中的各种元素。比如图片，文字等元素，都可以视为盒子，这些盒子可以用更大的盒子 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 进行嵌套。将这些盒子进行嵌套，叠加，排列，最后就成为了网页。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oboehz2ag.bkt.clouddn.com/%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B.png&quot; alt=&quot;盒子模型&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 列表样式</title>
    <link href="http://yoursite.com/2017/06/12/CSS%20%E5%88%97%E8%A1%A8%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/06/12/CSS 列表样式/</id>
    <published>2017-06-11T17:21:00.000Z</published>
    <updated>2017-07-14T13:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>list-style-type</code> 用于设定<strong>列表项</strong>的标记样式，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>ul 值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无标记</td>
</tr>
<tr>
<td>disc</td>
<td>默认值，实心圆点</td>
</tr>
<tr>
<td>circle</td>
<td>空心的圆点</td>
</tr>
<tr>
<td>square</td>
<td>实心的方块</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>ol 值</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>无标记</td>
</tr>
<tr>
<td>decimal</td>
<td>默认，阿拉伯数字</td>
</tr>
<tr>
<td>lower-roman</td>
<td>小写罗马数字</td>
</tr>
<tr>
<td>upper-roman</td>
<td>大写罗马数字</td>
</tr>
<tr>
<td>lower-alpha</td>
<td>小写英文字母</td>
</tr>
<tr>
<td>upper-alpha</td>
<td>大写英文字母</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style media="screen"&gt;</div><div class="line">ul li &#123;</div><div class="line">  list-style-type: none;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>除了默认的几种样式，我们还可以使用图片来设定列表项的标记。</p>
<h2 id="list-style-image"><a href="#list-style-image" class="headerlink" title="list-style-image"></a>list-style-image</h2><p><code>list-style-image</code> 的值可以是 <code>url(...)</code> 和 <code>none</code>。</p>
<h2 id="list-style-position"><a href="#list-style-position" class="headerlink" title="list-style-position"></a>list-style-position</h2><p><code>list-style-position</code> 用以设定列表项标记图片的位置，常用属性有以下几种：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">inside</span>:列表项标记放置在文本以内，且环绕文本根据标记对齐。</div><div class="line"></div><div class="line"><span class="selector-tag">outside</span>:默认值，列表项放置在文本外，且环绕文本不根据标记对齐。</div></pre></td></tr></table></figure>
<p>两者的区别是，<code>inside</code> 标记图片会占用列表项文字的文字，没有宽度限制，且列表项文字如果换行，以标记图片对齐；<code>outside</code> 标记图书使用预留位置，有宽度限制，列表项文字如果换行，以文字对齐。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;list-style-type&lt;/code&gt; 用于设定&lt;strong&gt;列表项&lt;/strong&gt;的标记样式，有以下几个常用的值：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ul 值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;disc&lt;/td&gt;
&lt;td&gt;默认值，实心圆点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;circle&lt;/td&gt;
&lt;td&gt;空心的圆点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;square&lt;/td&gt;
&lt;td&gt;实心的方块&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ol 值&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;none&lt;/td&gt;
&lt;td&gt;无标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;decimal&lt;/td&gt;
&lt;td&gt;默认，阿拉伯数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower-roman&lt;/td&gt;
&lt;td&gt;小写罗马数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upper-roman&lt;/td&gt;
&lt;td&gt;大写罗马数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lower-alpha&lt;/td&gt;
&lt;td&gt;小写英文字母&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;upper-alpha&lt;/td&gt;
&lt;td&gt;大写英文字母&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 背景</title>
    <link href="http://yoursite.com/2017/06/11/CSS%20%E8%83%8C%E6%99%AF/"/>
    <id>http://yoursite.com/2017/06/11/CSS 背景/</id>
    <published>2017-06-10T17:21:00.000Z</published>
    <updated>2017-07-14T13:32:52.000Z</updated>
    
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>background-color</td>
<td>元素的背景颜色</td>
</tr>
<tr>
<td>background-image</td>
<td>元素的背景图片</td>
</tr>
<tr>
<td>background-position</td>
<td>背景图片的起始位置</td>
</tr>
<tr>
<td>background-attachment</td>
<td>背景图片是否固定</td>
</tr>
<tr>
<td>background-repeat</td>
<td>背景图片是否重复及如何重复</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h2 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h2><p>背景颜色的值可以是颜色的英文名，Hex 和 RGB。<code>background-color</code> 的作用区域包括内容，内边距 <code>padding</code> 和边框，不包括外边距 <code>margin</code>。</p>
<p><code>background-color</code> 有一个特殊的值 <code>transparent</code> ，它是全透明黑色的标识，类似 <code>rgba(0,0,0,0)</code>。当我们不希望元素有背景颜色，且不希望浏览器的设置影响到元素的背景颜色，可以通过 <code>transparent</code> 设定。</p>
<blockquote>
<p>应该是类似 iOS 中 <code>color = clear</code>，背景色是透明的。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>background-color<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">div</span> &#123;</div><div class="line">      <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">background-color</span>: red;</div><div class="line">      <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">      <span class="attribute">margin</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">text-align</span>: center;</div><div class="line">      <span class="attribute">line-height</span>: <span class="number">300px</span>;</div><div class="line">      <span class="attribute">border-width</span>: <span class="number">20px</span>;</div><div class="line">      <span class="attribute">border-style</span>: dashed;</div><div class="line">    &#125;</div><div class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">    background-color</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><p>用于设定元素的背景图片，<code>background-image</code> 覆盖的位置与 <code>background-color</code> 一致，默认左上角是起始位置，并在水平和垂直方向上重复。<code>background-image</code> 的值可以是绝对地址，也可以是相对地址，语法是 <code>url(...)</code> ，或者是 <code>none</code>，同时设定背景颜色和图片时，图片会覆盖背景颜色。</p>
<h2 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h2><p>背景图片的重复方式使用 <code>background-repeat</code> 标记，它的值有以下几个：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>repeat</td>
<td>重复</td>
</tr>
<tr>
<td>no-repeat</td>
<td>不重复</td>
</tr>
<tr>
<td>repeat-x</td>
<td>x 轴重复</td>
</tr>
<tr>
<td>repeat-y</td>
<td>y 轴重复</td>
</tr>
</tbody>
</table>
<h2 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h2><p>用于标记图片的显示方式，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>scroll</td>
<td>默认值，背景图片跟随滚动条滚动。</td>
</tr>
<tr>
<td>fixed</td>
<td>当页面的其余部分滚动时，背景图片不会移动</td>
</tr>
</tbody>
</table>
<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><p><code>background-position</code> 有以下几个常用的值：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">百分比:水平和垂直位置的百分比，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">数值:水平和垂直位置的值，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">top:顶部显示，等同于 x = 0，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">bottom:底部显示，等同于 x = 100%，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">right:左对齐，等同于 y = 0，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">left:右对齐，等同于 y = 100%，如只写一个参数，第二个默认居中。</div><div class="line"></div><div class="line">center:居中对齐，等同于 x = 50%, y = 50%</div></pre></td></tr></table></figure>
<p>另外需要注意的是，当 <code>background-attachment</code> 是 <code>fixed</code> 时，位置是按浏览器窗口计算，当  <code>background-attachment</code> 是 <code>scroll</code> 时，位置是按父元素计算。</p>
]]></content>
    
    <summary type="html">
    
      &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;background-color&lt;/td&gt;
&lt;td&gt;元素的背景颜色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-image&lt;/td&gt;
&lt;td&gt;元素的背景图片&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-position&lt;/td&gt;
&lt;td&gt;背景图片的起始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-attachment&lt;/td&gt;
&lt;td&gt;背景图片是否固定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;background-repeat&lt;/td&gt;
&lt;td&gt;背景图片是否重复及如何重复&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Xcode错误 - Apple Mach-O Linker (ld) Error Group</title>
    <link href="http://yoursite.com/2017/06/10/Xcode%E9%94%99%E8%AF%AF%20-%20Apple%20Mach-O%20Linker%20(ld)%20Error%20Group/"/>
    <id>http://yoursite.com/2017/06/10/Xcode错误 - Apple Mach-O Linker (ld) Error Group/</id>
    <published>2017-06-09T18:24:00.000Z</published>
    <updated>2017-07-14T13:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 <a href="https://github.com/ZipArchive/ZipArchive" target="_blank" rel="external">ZipArchive</a> 时，Xcode 报错 <code>Apple Mach-O Linker (ld) Error Group</code>，错误原因是类库依赖的框架没有添加，添加缺失的框架即可，在这个例子中我添加了 <code>libe.tbd</code> 后解决。</p>
<blockquote>
<p>Teaching a man (or women) how to fish:</p>
<p>Usually Mach-O Linker Error means you have not included a header file for a function you are using in your code.</p>
<p>Easiest way is to copy that function or method call and paste into Xcode quick search using shift+command+O. This will search all frameworks (and header files), find that function or method call and show you its location (the header in this case):</p>
<p>In this case, this call belongs to the Accelerate framework so on top of your file, enter <code>#import &lt;Accelerate/Accelerate.h&gt;</code>.</p>
<p>When doing quick search, you might have to get rid of leading underscore. In other words, search for vImageBoxConvolve_ARGB8888</p>
<p>Hope this helps</p>
</blockquote>
   <a id="more"></a>
<p>参考链接：</p>
<p><a href="http://stackoverflow.com/questions/17414460/xcode-gives-apple-mach-o-linker-error" target="_blank" rel="external">http://stackoverflow.com/questions/17414460/xcode-gives-apple-mach-o-linker-error</a></p>
<p><a href="http://stackoverflow.com/questions/5329001/apple-mach-o-linker-error-when-compiling-for-device" target="_blank" rel="external">http://stackoverflow.com/questions/5329001/apple-mach-o-linker-error-when-compiling-for-device</a>        </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 &lt;a href=&quot;https://github.com/ZipArchive/ZipArchive&quot;&gt;ZipArchive&lt;/a&gt; 时，Xcode 报错 &lt;code&gt;Apple Mach-O Linker (ld) Error Group&lt;/code&gt;，错误原因是类库依赖的框架没有添加，添加缺失的框架即可，在这个例子中我添加了 &lt;code&gt;libe.tbd&lt;/code&gt; 后解决。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Teaching a man (or women) how to fish:&lt;/p&gt;
&lt;p&gt;Usually Mach-O Linker Error means you have not included a header file for a function you are using in your code.&lt;/p&gt;
&lt;p&gt;Easiest way is to copy that function or method call and paste into Xcode quick search using shift+command+O. This will search all frameworks (and header files), find that function or method call and show you its location (the header in this case):&lt;/p&gt;
&lt;p&gt;In this case, this call belongs to the Accelerate framework so on top of your file, enter &lt;code&gt;#import &amp;lt;Accelerate/Accelerate.h&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When doing quick search, you might have to get rid of leading underscore. In other words, search for vImageBoxConvolve_ARGB8888&lt;/p&gt;
&lt;p&gt;Hope this helps&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Xcode错误" scheme="http://yoursite.com/categories/Xcode%E9%94%99%E8%AF%AF/"/>
    
    
      <category term="Xcode错误" scheme="http://yoursite.com/tags/Xcode%E9%94%99%E8%AF%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 文本样式</title>
    <link href="http://yoursite.com/2017/06/09/CSS%20%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/06/09/CSS 文本样式/</id>
    <published>2017-06-08T17:21:00.000Z</published>
    <updated>2017-07-14T13:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>网页是由文字、图片、音视频组成，因此网页的文字很大程度影响网页的美观度，CSS 的常用文字样式属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>字体</td>
<td>font-family</td>
</tr>
<tr>
<td>字号</td>
<td>font-size</td>
</tr>
<tr>
<td>颜色</td>
<td>font-color</td>
</tr>
<tr>
<td>字重</td>
<td>font-weight</td>
</tr>
<tr>
<td>样式</td>
<td>font-style</td>
</tr>
</tbody>
</table>
<h2 id="font-标签"><a href="#font-标签" class="headerlink" title="font 标签"></a>font 标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"宋体"</span> <span class="attr">size</span>=<span class="string">"20px"</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>字体可以通过 <code>&lt;font&gt;</code> 标签设置，但是建议通过 <code>style</code> 标签和属性来设置字体，因为在很多版本中，<code>&lt;font&gt;</code> 标签已被弃用。</p>
<a id="more"></a>
<h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family 字体"></a>font-family 字体</h2><p>定义元素内的字体，包含空格的字体名个中文字体名，需要用英文 <code>&quot;&quot;</code> 包裹，多个字体使用英文 <code>,</code> 隔开，当使用 <code>style</code> 属性声明字体时，使用英文 <code>&#39;&#39;</code> 包裹，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">h1</span> &#123;</div><div class="line">        <span class="attribute">font-family</span>: <span class="string">"lucida grande"</span>, <span class="string">"lucida sans unicode"</span>, lucida, helvetica, <span class="string">"Hiragino Sans GB"</span>, <span class="string">"Microsoft YaHei"</span>, <span class="string">"WenQuanYi Micro Hei"</span>, sans-serif;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-family:'宋体';"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>font-family</code> 的属性值可以是字体名，也可以是字体集，<strong>字体集是一类字体的统称</strong>。</p>
<h2 id="font-size-字号"><a href="#font-size-字号" class="headerlink" title="font-size 字号"></a>font-size 字号</h2><p><code>font-size</code> 用于定义元素内的字体大小，它的值可以相对单位，也可以是绝对单位。绝对单位有以下几种：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>单位</th>
</tr>
</thead>
<tbody>
<tr>
<td>in</td>
<td>英寸</td>
</tr>
<tr>
<td>cm</td>
<td>厘米</td>
</tr>
<tr>
<td>mm</td>
<td>毫米</td>
</tr>
<tr>
<td>pt</td>
<td>磅，印刷的点数，1英寸 = 72磅。</td>
</tr>
<tr>
<td>pc</td>
<td>1pc = 12pt</td>
</tr>
</tbody>
</table>
<p>当没有设置 <code>font-size</code> 时，网页会使用浏览器默认的字体大小，一般是 <code>16px</code>。我们也可以使用绝对值来定义 <code>font-size</code>，可用的绝对值有以下几种：</p>
<table>
<thead>
<tr>
<th>属性值</th>
<th>对应字号</th>
</tr>
</thead>
<tbody>
<tr>
<td>xx-small</td>
<td>9px</td>
</tr>
<tr>
<td>x-small</td>
<td>11px</td>
</tr>
<tr>
<td>small</td>
<td>13px</td>
</tr>
<tr>
<td>medium</td>
<td>16px</td>
</tr>
<tr>
<td>large</td>
<td>19px</td>
</tr>
<tr>
<td>x-large</td>
<td>23px</td>
</tr>
<tr>
<td>xx-large</td>
<td>28px</td>
</tr>
</tbody>
</table>
<p>绝对单位不会因为设备分辨率或父元素的大小而改变，且根据浏览器和默认设置的不同，展示效果也不一样，因此绝对单位在 <code>font-size</code> 中并不常用。</p>
<p>相对单位有两种单位，<code>px</code> 、 <code>em</code>、 <code>%</code>，相对单位会根据屏幕分辨率的不同，改变自身的大小。其中 <code>em</code> 和 <code>%</code>  都是根据父元素的 <code>font-size</code> 进行计算得出值。<code>2em</code> 也就是父元素字体大小的 2 倍，<code>200%</code> 等同于 <code>2em</code>。</p>
<p>相对单位还有两个特殊的值 <code>smaller</code> 和 <code>larger</code>，它们会根据父元素的 <code>font-size</code> 变大或变小。</p>
<h2 id="color-文字颜色"><a href="#color-文字颜色" class="headerlink" title="color 文字颜色"></a>color 文字颜色</h2><p><code>color</code> 属性用于定义元素内文字的颜色，<code>color</code> 的值可以是英文名、Hex、RGB。</p>
<h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight 字体粗细"></a>font-weight 字体粗细</h2><p><code>font-weight</code> 用于为元素内的文字设置粗细，<code>font-weight</code> 的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal / 400</td>
</tr>
<tr>
<td>粗</td>
<td>bold / 700</td>
</tr>
<tr>
<td>更粗</td>
<td>bolder</td>
</tr>
<tr>
<td>更细</td>
<td>lighter</td>
</tr>
<tr>
<td>数字</td>
<td>100 - 900</td>
</tr>
</tbody>
</table>
<h2 id="font-style-字体样式"><a href="#font-style-字体样式" class="headerlink" title="font-style 字体样式"></a>font-style 字体样式</h2><p>在 HTML 中，我们使用 <code>&lt;em&gt;</code> 和 <code>&lt;i&gt;</code> 标签设置斜体，那么在 CSS 中，如何设置斜体呢？那就是 <code>font-style</code>，它有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal</td>
</tr>
<tr>
<td>斜体</td>
<td>italic</td>
</tr>
<tr>
<td>倾斜</td>
<td>oblique</td>
</tr>
</tbody>
</table>
<h2 id="font-variant-字体变形"><a href="#font-variant-字体变形" class="headerlink" title="font-variant 字体变形"></a>font-variant 字体变形</h2><p>设置元素中文本为小型大写字母，只针对英文有效， <code>font-variant</code> 常用的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>默认</td>
<td>normal</td>
</tr>
<tr>
<td>小型大写字母</td>
<td>small-caps</td>
</tr>
</tbody>
</table>
<h2 id="text-align-水平对齐"><a href="#text-align-水平对齐" class="headerlink" title="text-align 水平对齐"></a>text-align 水平对齐</h2><p>设置元素内文本的水 平对齐方式，<code>text-align</code> 常用的值有以下几种：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>left</td>
<td>左对齐</td>
</tr>
<tr>
<td>right</td>
<td>右对齐</td>
</tr>
<tr>
<td>center</td>
<td>居中对齐</td>
</tr>
<tr>
<td>justify</td>
<td>两段对齐</td>
</tr>
</tbody>
</table>
<p><strong>需要注意的是，<code>text-align</code> 只对块级元素有效</strong>。</p>
<h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>设置元素内容的垂直方式，<code>vertical-align</code> 有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>baseline</td>
<td>基线对齐</td>
</tr>
<tr>
<td>sub</td>
<td>下标</td>
</tr>
<tr>
<td>super</td>
<td>上标</td>
</tr>
<tr>
<td>top</td>
<td>元素顶部对齐</td>
</tr>
<tr>
<td>text-top</td>
<td>文字顶部对齐</td>
</tr>
<tr>
<td>middle</td>
<td>垂直居中对齐</td>
</tr>
<tr>
<td>bottom</td>
<td>元素底部对齐</td>
</tr>
<tr>
<td>text-bottom</td>
<td>文字底部对齐</td>
</tr>
<tr>
<td>长度</td>
<td>比如 15、-15</td>
</tr>
<tr>
<td>百分比</td>
<td>比如 30%、-30%。</td>
</tr>
</tbody>
</table>
<p><strong><code>vertical-align</code> 对行内元素有效，对块级元素无效</strong>。<code>vertical-align</code> 设定的是行内元素在父级元素中，两条基线的垂直对齐方式。</p>
<p><img src="http://oboehz2ag.bkt.clouddn.com/CSS%20%E5%9E%82%E7%9B%B4%E5%AF%B9%E9%BD%90.jpg" alt="CSS 垂直对齐"></p>
<h2 id="line-height-行高"><a href="#line-height-行高" class="headerlink" title="line-height 行高"></a>line-height 行高</h2><p>用于设定元素中文本的的行高，它的值可以是长度和  <code>%</code>，<code>em</code>。使用长度作为行高，如果 <code>font-size</code> 发生变化，由于 <code>line-height</code> 大于或小于 <code>font-size</code>，会造成页面文字挤压或过于稀疏，这种情况可以使用百分比来设定行高。</p>
<h2 id="word-spacing-和-letter-spacing"><a href="#word-spacing-和-letter-spacing" class="headerlink" title="word-spacing 和 letter-spacing"></a>word-spacing 和 letter-spacing</h2><table>
<thead>
<tr>
<th>字体属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>word-spacing</td>
<td>设定元素内单词之间的间距</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>设定元素内字母之间的间距</td>
</tr>
</tbody>
</table>
<p><code>word-spacing</code> 属性以空格作为单词的依据，将单词之间的间距增加或缩小。</p>
<h2 id="text-transform"><a href="#text-transform" class="headerlink" title="text-transform"></a>text-transform</h2><p><code>text-transform</code> 用于设定元素内文本的大小写，有以下几个常用的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>capitalize</td>
<td>首字母大写</td>
</tr>
<tr>
<td>uppercase</td>
<td>大写</td>
</tr>
<tr>
<td>lowercase</td>
<td>小写</td>
</tr>
<tr>
<td>none</td>
<td>默认值</td>
</tr>
</tbody>
</table>
<p><code>text-transform</code> 是以空格区分文本中的单词，如 <code>text-align</code> 这样的单词，在一些浏览器中，可能不会生效。</p>
<h2 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h2><p><code>text-decoration</code> 用以设定元素内文本的装饰，有以下几个常见的值：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>underline</td>
<td>下划线</td>
</tr>
<tr>
<td>overline</td>
<td>上划线</td>
</tr>
<tr>
<td>line-through</td>
<td>删除线</td>
</tr>
<tr>
<td>blink</td>
<td>闪烁</td>
</tr>
<tr>
<td>none</td>
<td>默认</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网页是由文字、图片、音视频组成，因此网页的文字很大程度影响网页的美观度，CSS 的常用文字样式属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;字体&lt;/td&gt;
&lt;td&gt;font-family&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字号&lt;/td&gt;
&lt;td&gt;font-size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;颜色&lt;/td&gt;
&lt;td&gt;font-color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字重&lt;/td&gt;
&lt;td&gt;font-weight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;样式&lt;/td&gt;
&lt;td&gt;font-style&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;font-标签&quot;&gt;&lt;a href=&quot;#font-标签&quot; class=&quot;headerlink&quot; title=&quot;font 标签&quot;&gt;&lt;/a&gt;font 标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;face&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;宋体&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;20px&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;color&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;hello&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;font&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;字体可以通过 &lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 标签设置，但是建议通过 &lt;code&gt;style&lt;/code&gt; 标签和属性来设置字体，因为在很多版本中，&lt;code&gt;&amp;lt;font&amp;gt;&lt;/code&gt; 标签已被弃用。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 继承和层叠</title>
    <link href="http://yoursite.com/2017/06/07/CSS%20%E7%BB%A7%E6%89%BF%E5%92%8C%E5%B1%82%E5%8F%A0/"/>
    <id>http://yoursite.com/2017/06/07/CSS 继承和层叠/</id>
    <published>2017-06-06T17:21:00.000Z</published>
    <updated>2017-07-13T11:54:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 中，标签的层级关系就是树，<code>&lt;html&gt;</code> 是根节点。CSS 继承是指从父元素那继承部分 CSS 属性。</p>
<blockquote>
<p>应该类似父类和子类的关系吧，只不过这个类只用来描述 View 的 UI 元素。</p>
</blockquote>
<p>比如下面的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>CSS <span class="tag">&lt;<span class="name">span</span>&gt;</span>继承<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们没有描述 <code>&lt;span&gt;</code>  的样式，<code>继承</code> 两个字也变成红色，用面向对象来理解，应该是这样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span> </span>&#123;</div><div class="line">	color = red</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Span</span>: <span class="title">P</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> span = <span class="type">Span</span>()</div><div class="line"><span class="built_in">print</span>(span.color)</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>CSS 的继承关系是比较弱的，子元素不一定会继承父元素所有的属性。</p>
<p>CSS 层叠可以定义多个样式，不冲突时，多个样式可以层叠为一个，冲突时，按照不同样式规则优先级来应用样式。</p>
<blockquote>
<p>CSS 层叠类似子类重写和添加属性吧。CSS 的继承和层叠和面向对象的继承和多态感觉差不多。</p>
</blockquote>
<h2 id="CSS-权值"><a href="#CSS-权值" class="headerlink" title="CSS 权值"></a>CSS 权值</h2><table>
<thead>
<tr>
<th>类型</th>
<th>权值</th>
</tr>
</thead>
<tbody>
<tr>
<td>行内样式</td>
<td>1000</td>
</tr>
<tr>
<td>id 选择器</td>
<td>100</td>
</tr>
<tr>
<td>class 选择器和伪类</td>
<td>10</td>
</tr>
<tr>
<td>标签选择器</td>
<td>1</td>
</tr>
<tr>
<td>通配符选择器</td>
<td>0</td>
</tr>
<tr>
<td>继承</td>
<td>无权值，有任意声明都会被覆盖。</td>
</tr>
</tbody>
</table>
<h3 id="权值计算"><a href="#权值计算" class="headerlink" title="权值计算"></a>权值计算</h3><p>以 <code>#main div.warning h2 {...}</code> 举例：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>符名</th>
<th>权重</th>
</tr>
</thead>
<tbody>
<tr>
<td>id</td>
<td><code>#main</code></td>
<td>100</td>
</tr>
<tr>
<td>标签</td>
<td><code>div</code></td>
<td>1</td>
</tr>
<tr>
<td>class</td>
<td><code>warning</code></td>
<td>10</td>
</tr>
<tr>
<td>标签</td>
<td><code>h2</code></td>
<td>1</td>
</tr>
</tbody>
</table>
<p>因此它的权值是 112。</p>
<h3 id="比较原则"><a href="#比较原则" class="headerlink" title="比较原则"></a>比较原则</h3><p><code>1,0,0,0 &gt; 0,99,99,99</code>，也就是说从左往右逐个等级比较，前一等级相等才往后比，无论是行间、内部和外部样式，都是按照这个规则来进行比较。而不是直观的 <code>行间 &gt; 内部 &gt; 外部样式</code>，<code>id &gt; class &gt; 元素</code>。之所以有这样的错觉，是因为确实行间为第一等的权重，所以它的权重是最高的，而内部样式可能一般写在了外部样式引用了之后，所以覆盖掉了之前的。</p>
<p>同样权值的样式，后声明的样式会覆盖先声明的样式。</p>
<h2 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span>&gt;</span><span class="css"></span></div><div class="line">      * &#123;</div><div class="line">        <span class="attribute">color</span>: red <span class="meta">!important</span></div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:blue"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>!importrtant</code> 关键字可以使样式的权重提升到无限大，通过 <code>!important</code> 声明的样式，会覆盖所有冲突样式。</p>
<h2 id="CSS-优先级"><a href="#CSS-优先级" class="headerlink" title="CSS 优先级"></a>CSS 优先级</h2><p>之前我们学习过，CSS 的优先级 <code>行内样式 &gt; 内部样式 &gt; 外部样式</code> ，其中 <code>&lt;link&gt;</code> 和 <code>@import</code> 的优先级取决于位置的先后，最后定义的优先级最高，也就是就近原则。</p>
<p>那么元素选择器、class 选择器、id 选择器、全局选择器，群组选择器、后代选择器，这几种选择器的优先级又是怎样的呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS 选择器优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">"screen"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">      <span class="selector-tag">div</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-id">#green</span> &#123;</div><div class="line">        <span class="attribute">color</span>: green;</div><div class="line">      &#125;</div><div class="line">      <span class="selector-class">.blue</span> &#123;</div><div class="line">        <span class="attribute">color</span>: blue;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>单独使用<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span>&gt;</span></div><div class="line">      使用标签选择器</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span></div><div class="line">      使用 id 样式</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span>&gt;</span></div><div class="line">      使用 class 样式</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"blue"</span> <span class="attr">id</span>=<span class="string">"green"</span>&gt;</span></div><div class="line">      同时引用 class 和 id</div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--id选择器 &gt; 标签选择器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--class选择器 &gt; 标签选择器--&gt;</span></div><div class="line">    <span class="comment">&lt;!--id选择器 &gt; class选择器--&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过上面的代码，我们可以得出结论：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">id选择器 &gt; class选择器 &gt; 标签选择器</div></pre></td></tr></table></figure>
<blockquote>
<p>我们之前学习过，id 和 HTML 元素是一一对应的，但多个元素可以使用一个 class，一个元素也可以使用多个 class，因此 id 距离元素“更近”。</p>
</blockquote>
<p>一个元素同时继承多个 class 发生冲突时，后定义的 class 会覆盖之前的 class。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 中，标签的层级关系就是树，&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; 是根节点。CSS 继承是指从父元素那继承部分 CSS 属性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;应该类似父类和子类的关系吧，只不过这个类只用来描述 View 的 UI 元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;比如下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;selector-tag&quot;&gt;p&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;CSS &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;继承&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们没有描述 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;  的样式，&lt;code&gt;继承&lt;/code&gt; 两个字也变成红色，用面向对象来理解，应该是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;P&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	color = red&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Span&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;P&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; span = &lt;span class=&quot;type&quot;&gt;Span&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(span.color)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 命名规范</title>
    <link href="http://yoursite.com/2017/06/03/CSS%20%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2017/06/03/CSS 命名规范/</id>
    <published>2017-06-02T17:21:00.000Z</published>
    <updated>2017-07-14T13:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 样式可以通过 <code>&lt;link&gt;</code> 的方式，提供给多个 HTML 文件使用，这其中有很多的 <code>id</code>、<code>class</code> 的命名，命名的重要性不必多说，那么 CSS 中，怎样的命名才算是规范的呢？有以下几个规则：</p>
<ul>
<li>采用英文字母、数字、以及 <code>-</code> 和 <code>_</code> 命名；</li>
<li>使用小写字母命名，不能以数字、<code>-</code>、<code>_</code> 开头；</li>
<li>尽量使用单词命名，多个单词使用 <code>_</code>、<code>-</code> 进行连接，或使用小驼峰命名；</li>
<li>使用具有具体意义的命名；</li>
</ul>
<p>命名一般使用元素位置所为标记，常用的命名标记有以下几个：</p>
<table>
<thead>
<tr>
<th>结构</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>页头</td>
<td>header</td>
</tr>
<tr>
<td>页尾</td>
<td>footer</td>
</tr>
<tr>
<td>导航</td>
<td>nav</td>
</tr>
<tr>
<td>页面主体</td>
<td>main</td>
</tr>
<tr>
<td>侧栏</td>
<td>sidebar</td>
</tr>
<tr>
<td>栏目</td>
<td>column</td>
</tr>
<tr>
<td>内容</td>
<td>content / container</td>
</tr>
<tr>
<td>容器</td>
<td>container</td>
</tr>
<tr>
<td>左中右</td>
<td>left right center</td>
</tr>
<tr>
<td>页面外围控制</td>
<td>wrapper</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>导航的样式命名有进一步的细分，如下：</p>
<table>
<thead>
<tr>
<th>位置</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>主导航</td>
<td>mainnav</td>
</tr>
<tr>
<td>子导航</td>
<td>subnav</td>
</tr>
<tr>
<td>顶导航</td>
<td>topnav</td>
</tr>
<tr>
<td>边导航</td>
<td>sidebar</td>
</tr>
<tr>
<td>左导航</td>
<td>leftsidebar</td>
</tr>
<tr>
<td>右导航</td>
<td>rightsidebar</td>
</tr>
<tr>
<td>菜单</td>
<td>menu</td>
</tr>
<tr>
<td>子菜单</td>
<td>submenu</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
</tr>
<tr>
<td>摘要</td>
<td>summary</td>
</tr>
</tbody>
</table>
<p>功能命名如下：</p>
<table>
<thead>
<tr>
<th>功能</th>
<th>标记</th>
</tr>
</thead>
<tbody>
<tr>
<td>标志</td>
<td>logo</td>
</tr>
<tr>
<td>广告</td>
<td>banner</td>
</tr>
<tr>
<td>登录</td>
<td>login</td>
</tr>
<tr>
<td>登录条</td>
<td>loginbar</td>
</tr>
<tr>
<td>注册</td>
<td>register</td>
</tr>
<tr>
<td>搜索</td>
<td>search</td>
</tr>
<tr>
<td>功能区</td>
<td>shop</td>
</tr>
<tr>
<td>标题</td>
<td>title</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 样式可以通过 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 的方式，提供给多个 HTML 文件使用，这其中有很多的 &lt;code&gt;id&lt;/code&gt;、&lt;code&gt;class&lt;/code&gt; 的命名，命名的重要性不必多说，那么 CSS 中，怎样的命名才算是规范的呢？有以下几个规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用英文字母、数字、以及 &lt;code&gt;-&lt;/code&gt; 和 &lt;code&gt;_&lt;/code&gt; 命名；&lt;/li&gt;
&lt;li&gt;使用小写字母命名，不能以数字、&lt;code&gt;-&lt;/code&gt;、&lt;code&gt;_&lt;/code&gt; 开头；&lt;/li&gt;
&lt;li&gt;尽量使用单词命名，多个单词使用 &lt;code&gt;_&lt;/code&gt;、&lt;code&gt;-&lt;/code&gt; 进行连接，或使用小驼峰命名；&lt;/li&gt;
&lt;li&gt;使用具有具体意义的命名；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;命名一般使用元素位置所为标记，常用的命名标记有以下几个：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;结构&lt;/th&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;页头&lt;/td&gt;
&lt;td&gt;header&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页尾&lt;/td&gt;
&lt;td&gt;footer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;导航&lt;/td&gt;
&lt;td&gt;nav&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页面主体&lt;/td&gt;
&lt;td&gt;main&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;侧栏&lt;/td&gt;
&lt;td&gt;sidebar&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;栏目&lt;/td&gt;
&lt;td&gt;column&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;内容&lt;/td&gt;
&lt;td&gt;content / container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;容器&lt;/td&gt;
&lt;td&gt;container&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;左中右&lt;/td&gt;
&lt;td&gt;left right center&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;页面外围控制&lt;/td&gt;
&lt;td&gt;wrapper&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CSS - 选择器</title>
    <link href="http://yoursite.com/2017/05/26/CSS%20%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/05/26/CSS 选择器/</id>
    <published>2017-05-25T17:21:00.000Z</published>
    <updated>2017-07-13T12:12:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 常用选择器有 6 种：</p>
<ul>
<li>标签选择器；</li>
<li>类选择器；</li>
<li>id 选择器；</li>
<li>全局选择器；</li>
<li>群组选择器；</li>
<li>后代选择器；</li>
</ul>
<a id="more"></a>
<h2 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h2><p>标签选择器通过 HTML 标签作为选择器：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">p</span> &#123;</div><div class="line">    <span class="attribute">color</span>: red;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器通过 <code>class</code> 属性作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-class">.red</span> &#123;</div><div class="line">      <span class="attribute">color</span>: red;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>类选择器还可以通过 HTML 标签进行更细一步的区分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-tag">h1</span><span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">h2</span><span class="selector-class">.font</span> &#123;</div><div class="line">      <span class="attribute">font-size</span>: <span class="number">50px</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以自定义一个属性字段，使用类选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-attr">[bc]</span> &#123;</div><div class="line">      <span class="attribute">background</span>: red;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"red font"</span> <span class="attr">bc</span>=<span class="string">""</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="id-选择器"><a href="#id-选择器" class="headerlink" title="id 选择器"></a>id 选择器</h2><p>id 选择器通过 <code>id</code> 属性作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-id">#bc</span> &#123;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bc"</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>与 <code>class</code> 属性不同，<code>id</code> 属性和 HTML 元素是一一对应的，没每个 HTML 元素只能有一个 <code>id</code>，一个 <code>id</code> 也只能声明一个元素。</p>
<h2 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h2><p>给多个 HTML 标签，类，id 设置同样的样式：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">  <span class="selector-id">#bc</span>, <span class="selector-class">.bc</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span> &#123;</div><div class="line">      <span class="attribute">background</span>: <span class="number">#000000</span>;</div><div class="line">  &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bc"</span>&gt;</span>id选择器<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bc"</span>&gt;</span>类选择器<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p>​                                                    </p>
<h2 id="全局选择器"><a href="#全局选择器" class="headerlink" title="全局选择器"></a>全局选择器</h2><p>全局选择器又称为通配符选择器，如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">    <span class="attribute">background</span>: <span class="number">#ffffff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器利用 HTML 标签的层级关系，通过 HTML 标签作为选择器：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-id">#p1</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.red</span> <span class="selector-tag">a</span> <span class="selector-tag">em</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>有些状态使用 <code>class</code> 和 <code>id</code> 属性无法准确的表示，因此需要使用伪类。<strong>CSS 伪类用于向某些选择器添加特殊的效果。</strong>伪类最常见的是对于链接的状态处理，如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="comment">/* 未访问的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#FF0000</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="comment">/* 已访问的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#00FF00</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="comment">/* 鼠标移动到链接上 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#FF00FF</span></div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="comment">/* 选定的链接 */</span></div><div class="line">        <span class="attribute">color</span>: <span class="number">#0000FF</span></div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>链接伪类有顺序的限制，其先后顺序为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">:link &gt; :visited &gt; :hover &gt; :active</div></pre></td></tr></table></figure>
<h2 id="hover-和-active"><a href="#hover-和-active" class="headerlink" title=":hover 和 :active"></a>:hover 和 :active</h2><p><code>:hover</code> 用于鼠标经过某个元素时，<code>:active</code> 用于一个元素被激活时，也就是按下鼠标到松开鼠标的这段时间。例如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">P</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>伪类可以通过类选择器和标签选择器组合使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.tips</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">        <span class="attribute">color</span>: red;</div><div class="line">    &#125;</div><div class="line">    <span class="selector-tag">p</span><span class="selector-class">.tips</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"tips"</span>&gt;</span>hello html<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 常用选择器有 6 种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标签选择器；&lt;/li&gt;
&lt;li&gt;类选择器；&lt;/li&gt;
&lt;li&gt;id 选择器；&lt;/li&gt;
&lt;li&gt;全局选择器；&lt;/li&gt;
&lt;li&gt;群组选择器；&lt;/li&gt;
&lt;li&gt;后代选择器；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
</feed>
